<?php
// $Id: betterselect.module,v 1.4.2.7 2009/02/27 15:05:29 marktheunissen Exp $

/**
 * @file
 * Use stylized checkboxes instead of the default multiple select HTML element.
 *
 * @todo: Fix bug with required elements; values don't seem to "take".
 */

/**
 * Implementation of hook_menu().
 */
function betterselect_menu() {
  $items = array();
  $items['admin/settings/betterselect'] = array(
    'title' => t('Better select'),
    'description' => t('Configure better select settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('betterselect_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Build settings form().
 */
function betterselect_admin_settings() {
  $form['betterselect_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General options'),
  );

  $form['betterselect_general']['betterselect_scroll'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scrollable div'),
    '#description' => t('Place options in a scrollable div'),
    '#default_value' => variable_get('betterselect_scroll', FALSE),
  );

  $form['betterselect_general']['betterselect_node_form_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Node and search forms only'),
    '#description' => t('Only convert select lists on node and search forms'),
    '#default_value' => variable_get('betterselect_node_form_only', FALSE),
  );

  $form['betterselect_taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy options'),
  );

  $form['betterselect_taxonomy']['betterselect_save_lineage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save lineage'),
    '#description' => t('If a user selects a child term when saving a node, automatically save the parent term too.'),
    '#default_value' => variable_get('betterselect_save_lineage', FALSE),
  );

  $form['betterselect_taxonomy']['betterselect_add_depth_classes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add depth classes'),
    '#description' => t('Add an extra div to each betterselect option, with a class indicating depth in taxonomy hierarchy. Good for styling parent/child.'),
    '#default_value' => variable_get('betterselect_add_depth_classes', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_elements().
 */
function betterselect_elements() {
  $type = array();
  $type['select']['#process'] = array('betterselect_process');

  return $type;
}

/**
 * Form process callback; translates multiselect fields into checkboxes.
 */
function betterselect_process($element, $edit, $form_state, $complete_form) {
  // SGS: add "$complete_form['#id'] != 'user-register' )" to this condition for the profile form for the anonymous user
  // RVN: add bypass on entire if with "  || in_array($element['#id'], $bypass)" to allow betterselect for the elibrary filters (and doesn't hurt the other places)
  $bypass = array('edit-doc-type', 'edit-domains');
  if ( (isset($element['#multiple']) && $element['#multiple'] == TRUE && !(variable_get('betterselect_node_form_only', FALSE) == TRUE && $complete_form['#id'] != 'node-form' && $complete_form['#id'] != 'search-form' && $complete_form['#id'] != 'user-register' ))  || in_array($element['#id'], $bypass)) {

      // If we're dealing with taxonomy, fix the option titles.
    if (is_object($element['#options'][0])) {
      // Build new array of options in format that theme_checkboxes expects.
      $options = array();
      $defaults = array();
      foreach ($element['#options'] as $option) {
        if (is_array($option->option)) {
          foreach ($option->option as $tid => $name) {
            $options[$tid] = check_plain($name);
          }
        }
      }
      $element['#options'] = $options;
    }

    // We now check that the element's options are correct. If they're not in
    // the right format, we abort.
    foreach($element['#options'] as $key => $val) {
      if (!is_numeric($key) || !is_string($val)) {
        return $element;
      }
    }

    // The default value should be an array, if it isn't expand_checkboxes()
    // will make it one.
    if (isset($element['#default_value']) && is_array($element['#default_value']) && count($element['#default_value'])) {
      // Fix the value arrays; checkboxes are the exact inverse of multiselect,
      // apparently for vindictive fun.

      // First make sure there's at least 1 non-blank array element
      $temp = $element['#default_value'];
      $temp = array_shift($element['#default_value']);
      if (!empty($temp)) {
        $element['#default_value'] = array_flip($element['#default_value']);
        $element['#value'] = array_flip($element['#value']);
      }
    }

    // Place options in a scrollable or non-scrollable div
    $div_class = variable_get('betterselect_scroll', FALSE) ? 'form-checkboxes-scroll' : 'form-checkboxes-noscroll';
    $element['#attributes'] = array('class' => $div_class);

    // Switch display to checkboxes instead.
    $element['#type'] = 'checkboxes';
    unset($element['#theme']);
    $element = expand_checkboxes($element);

    // Hide the silly "None" option. (assumes array element with a blank key is the "None" option)
    if (!$element['#required'] && is_array($element[''])) {
      $element['']['#prefix'] = '<div style="display:none">';
      $element['']['#suffix'] = '</div>';
    }

    // Include the JS and CSS files.
    static $path;
    if (!isset($path)) {
      $path = drupal_get_path('module', 'betterselect');
      // SGS add jquery.treeview.js , jquery.treeview.css
	  drupal_add_js(drupal_get_path('module', 'betterselect')."/jquery.treeview.js");
	  drupal_add_css(drupal_get_path('module', 'betterselect')."/jquery.treeview.css");
      drupal_add_css($path . '/betterselect.css');
      //drupal_add_css('/misc/jquery-treeiew/jquery.treeview.css');
      //drupal_add_css('/misc/jquery-treeiew/red-tree.css');
      drupal_add_js($path . '/betterselect.js');
      //drupal_add_js('http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js');
    }

    // Add classes to items that indicate depth, for taxonomy, useful for
    // styling parent terms differently.
    if (variable_get('betterselect_add_depth_classes', FALSE)) {
      $prev = NULL;
      $prev_depth = 0;
      $open_ul =0;
	  
      foreach (element_children($element) as $key) {
        $title = $element[$key]['#title'];
        $trim_title = ltrim($title, '-');
        // SGS: remove /2
        $depth = (strlen($title) - strlen($trim_title));// / 2;		
        if ($prev !== NULL && $depth > 0) {
          $element[$key]['#prefix'] = "<div class='betterselect-checkbox-li'>\n";
        }
        else {
          $element[$key]['#prefix'] = "<div class='betterselect-checkbox'>\n";
        }
        $element[$key]['#suffix'] = "</div>\n";
        $element[$key]['#attributes']['class'] = "betterselect";

        $element[$key]['#title'] = $trim_title;

        // Put a class on each element that contains children. We do this
        // retroactively, in other words, we operate on the previous element.
        if ($prev !== NULL) {
          if ($depth > $prev_depth) {
            // Gone down a level, so previous must get 'has-children' class
            $prev['#prefix'] = str_replace("file", "folder", $prev['#prefix']);
            $prev['#suffix'] = "<div>\n";
            $open_ul++;
          }

          // checks whether a previously opened ul should be closed or not
          else if($depth < $prev_depth && $open_ul > 0) {
              // we went up one level, so we close the previously opened ul
              $element[$key]['#prefix'] = str_repeat("</div>\n</div>\n", $prev_depth - $depth) . "<div class='betterselect-checkbox-ul'>\n";
              $open_ul-= $prev_depth - $depth;
          } 
        }
        else {
          $element[$key]['#prefix'] = "<div class='betterselect-checkbox'>\n";
        }

        $prev = &$element[$key];
        $prev_depth = $depth;
      }
    }

    // close the last open ul tag, if anyleft open
    if($open_ul > 0) {
        $prev['#suffix'] .=  str_repeat('</div></div>', $open_ul);
    }
    

    // Add the necessary prefix/suffix to make JS/CSS work.
    $size   = isset($element['#size']) ? $element['#size'] : 10;
    $prefix = isset($element['#prefix']) ? $element['#prefix'] : '';
    $suffix = isset($element['#suffix']) ? $element['#suffix'] : '';
    $fixheight = count($element['#options']) > $size ? ' betterfixed' : '';
    $id = 'better-select-' . $element['#id'];
    $element['#prefix'] = '<div id="' . $id . '" class="better-select' . $fixheight . '">' . $prefix . '<div class="treeview-default">';
    $element['#suffix'] = '</div>' . $suffix . '</div>';
  }
  return $element;
}

/**
 * Implementation of hook_form_alter().
 */
function betterselect_form_alter(&$form, $form_state, $form_id) {
  // Taxonomy stores its #options in a weird way; we need to move it back once we're done.
  if (($form['#id'] == 'node-form' && isset($form['taxonomy']))) {
    $form['#submit'][] = 'betterselect_taxonomy_from_checkboxes';
  }
  elseif ($form_id == 'taxonomy_form_term' && !(variable_get('betterselect_node_form_only', FALSE))) {
    // This is the form that appears on the edit/term/xx page. Betterselect
    // has to process it before taxonomy module.
    array_unshift($form['#submit'], 'betterselect_taxonomy_form_term_from_checkboxes');
  }

  if($form_id == 'views_exposed_form' && strstr($form['#id'], 'views-exposed-form-elibrary-view')) {
    $form['#submit'][] = 'betterselect_taxonomy_from_checkboxes';
  }
}

/**
 * Additional submit handler for the taxonomy term form.
 */
function betterselect_taxonomy_form_term_from_checkboxes($form, &$form_state) {
  $fix = array('parent', 'relations');
  foreach ($fix as $select) {
    $options = array();
    if (isset($form_state['values'][$select])) {
      foreach ($form_state['values'][$select] as $tid => $selected) {
        if ($selected) {
          $options[$tid] = $tid;
        }
      }
      $form_state['values'][$select] = $options;
    }
  }
}

/**
 * Restore submitted checkbox values back to format Taxonomy module expects.
 */
function betterselect_taxonomy_from_checkboxes($form, &$form_state) {
	//SGS resolve php warning :
	// Warning: Invalid argument supplied for foreach() in betterselect_taxonomy_from_checkboxes() (line 259 of /var/www/isa_seb_local/sites/all/modules/contributed/modified/betterselect/betterselect.module).
  if (isset ($form_state['values']['taxonomy'])){
	  foreach ($form_state['values']['taxonomy'] as $index => $properties) {
		if (is_numeric($index) && $form['taxonomy'][$index]['#multiple']) {
		  $options = array();
		  foreach ($form_state['values']['taxonomy'][$index] as $tid => $selected) {
			if ($selected) {
			  $options[$tid] = $tid;
			  // Save lineage - automatically select all parents.
			  if (variable_get('betterselect_save_lineage', FALSE)) {
				$parents = taxonomy_get_parents($tid);
				foreach ($parents as $key => $val) {
				  $options[$key] = $key;
				}
			  }
			}
		  }
		  $form_state['values']['taxonomy'][$index] = $options;
		}
	  }
  }
}
