<?php
/**
 * @defgroup isa_multiple_digest
 * @brief Packages up recently published stories into a newsletter and sends them via simplenews module at regularly scheduled intervals.
 * @file 
 * Modules main file
 * @ingroup isa_multiple_digest
 */

define('LIMIT_BODY_LENGTH', 300);

/**
 * Implement of hook_cron()
 */
function isa_multiple_digest_cron() {
  $current_time = time();
  $current_date = isa_multiple_digest_get_date_array($current_time);

  $day = $current_date['day'];
  $last = (int) $current_date['number_of_day'];

//-------------- TODO remove, this is only for test -----------------------//
  if (isset($_GET['run_weekly'])) {
    $test = TRUE;
  }

  if (isset($_GET['run_monthly'])) {
    $day_up = NULL;
    $day = $_GET['run_monthly'];
    if ($day == 1) {
      $day_up = 'First day';
    }
    elseif ($day == 15) {
      $day_up = '15th';
    }
    elseif ($day == $last) {
      $day_up = 'Last day';
    }
    if ($day_up) {
      $query = "UPDATE {simplenews_digest_multiple} SET last_cron = %d WHERE day = %d";
      db_query($query, 0, $day_up);
    }
  }
  //------------------------------------------------------------------------//
  // new week
  if ($test || ($current_date['day_of_week'] == variable_get('isa_multiple_digest_cron_day_of_week', 0))) {//0 correspond to Sunday
    isa_multiple_digest_inject_node('', $current_date);
  }


  switch ($day) {
    case 1: // new month
      isa_multiple_digest_inject_node('First day', $current_date);
      break;
    case 15: // 15th month
      isa_multiple_digest_inject_node('15th', $current_date);
      break;
    case $last: // last month
      isa_multiple_digest_inject_node('Last day', $current_date);
      break;
  }
}

/**
 * For a timestamp, return the day of week,the week number, the month number in an array
 *
 * @param timestamp $timestamp the timestamp
 * @return array date : date['day_of_week'], date['week_number'],date['month_number']
 */
function isa_multiple_digest_get_date_array($timestamp) {
  if (!is_numeric($timestamp)) {
    return NULL;
  }
  $date['day_of_week'] = date('w', $timestamp);
  $date['week_number'] = date('W', $timestamp);
  $date['month_number'] = date('m', $timestamp);
  $date['number_of_day'] = date('t', $timestamp);
  $date['day'] = date('d', $timestamp);
  return $date;
}

/**
 * Implement of hook_form_alter
 * @param array  $form
 * @param array  $form_state
 * @param String $form_id
 */
function isa_multiple_digest_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "simplenews_admin_types_form") { //Insert or update
    $form = isa_multiple_digest_settings_form($form);
    $form['#submit'][] = 'isa_multiple_digest_submit';
    $form['#redirect'] = 'admin/content/simplenews/types/list';
  }
  elseif ($form_id == "simplenews_admin_types_delete") { //delete
    $form['#submit'][] = 'isa_multiple_digest_delete_submit';
  }
}

/**
 * Implement of submit form
 * @param array $form
 * @param array $form_state
 *
 */
function isa_multiple_digest_submit(&$form, $form_state) {

  $frequency = $form_state['values']['simplenews_digest_frequency'];
  if ($frequency == 'weekly') {
    $day = '';
  }
  else {
    $day = $form_state['values']['day'];
  }


  $tid = db_result(db_query("SELECT t.tid FROM {term_data} t WHERE t.vid = %d AND t.name = '%s' ORDER BY t.tid DESC", $form_state['values']['vid'], $form_state['values']['name']));
  $cids = serialize($form_state['values']['simplenews_digest_content_types']);
  $tids = serialize($form_state['values']['simplenews_digest_terms']);
  $update = array();

  $sdmid = db_result(db_query("SELECT distinct sdmid FROM {simplenews_digest_multiple}  WHERE tid = %d", $tid));
  if (!$sdmid)
    $multipledigest = array('tid' => $tid, 'tids' => $tids, 'ctids' => $cids, 'frequency' => $frequency, 'day' => $day, 'last_cron' => time());
  else {
    $multipledigest = array('tid' => $tid, 'tids' => $tids, 'ctids' => $cids, 'frequency' => $frequency, 'day' => $day);
    $update['sdmid'] = $sdmid;
  }


  if ($form_state['values']['simplenews_digest_enable'] == 'yes') //check if digest is required
    isa_multiple_digest_save($multipledigest, $update);


  // dsk(drupal_add_js(drupal_get_path('module', 'isa_multiple_digest') . '/js/isa_multiple_digest'),'js');
}

/**
 * enable to use a js file in the module
 */
function isa_multiple_digest_init() {
  drupal_add_js(drupal_get_path('module', 'isa_multiple_digest') . '/js/isa_multiple_digest.js');
}

/**
 * Called by cron, inserts digest newsletter into newsletter for immediate mail out
 *
 * @param string $frequency
 */
function isa_multiple_digest_inject_node($day, $date) {
  $digests = isa_multiple_digest_get_newsletter_config('day', $day);

  foreach ($digests as $key => $digest) {
    $last_cron = $digest->last_cron;
    $last_cron = isa_multiple_digest_get_date_array($last_cron);

    if ($day != '') {// monthly
      if ($last_cron['month_number'] != $date['month_number']) {
        $update['sdmid'] = $digest->sdmid;
        $newsletter['tid'] = $digest->tid;
        // get nodes for this digest config
        $newsletter['new_nodes'] = isa_multiple_digest_select_nodes($digest);
        if (!empty($newsletter['new_nodes'])) {
          // create newsletter body
          $newsletter['body'] = theme_isa_multiple_digest_format_newsletter($newsletter);
          //$newsletter['body'] = theme('isa_multiple_digest_format_newsletter', $newsletter);
          //create newsletter node

          isa_multiple_digest_create_newsletter_node($newsletter);
          //update field last_cron in DB
          $digest->last_cron = time();
          isa_multiple_digest_save($digest, $update);
        }
      }
      elseif ($last_cron['month_number'] == $date['month_number']) {// if the same month (Exp: the newsletter was created on 05/01/2000 and you have newsletter on 15th, it sends one on 15/01/2000)
        if ($last_cron['day'] != $date['day']) {
          $update['sdmid'] = $digest->sdmid;
          $newsletter['tid'] = $digest->tid;
          $digest->cron_last = $digest->last_cron;
          // get nodes for this digest config
          $newsletter['new_nodes'] = isa_multiple_digest_select_nodes($digest);
          if (!empty($newsletter['new_nodes'])) {
            // create newsletter body
            $newsletter['body'] = theme_isa_multiple_digest_format_newsletter($newsletter);
            //create newsletter node
            isa_multiple_digest_create_newsletter_node($newsletter);
            //update field last_cron in DB
            $digest->last_cron = time();
            isa_multiple_digest_save($digest, $update);
          }
        }
      }
    }
    else {//per week
      if ($last_cron['week_number'] != $date['week_number']) {
        $update['sdmid'] = $digest->sdmid;
        $newsletter['tid'] = $digest->tid;
        // get nodes for this digest config
        $newsletter['new_nodes'] = isa_multiple_digest_select_nodes($digest);
        if (!empty($newsletter['new_nodes'])) {
          // create newsletter body
          $newsletter['body'] = theme_isa_multiple_digest_format_newsletter($newsletter);
          //$newsletter['body'] = theme('isa_multiple_digest_format_newsletter', $newsletter);
          //create newsletter node
          isa_multiple_digest_create_newsletter_node($newsletter);
          //update field last_cron in DB
          $digest->last_cron = time();
          isa_multiple_digest_save($digest, $update);
        }
      }
      else {
        if ($last_cron['day'] != $date['day']) {
          $update['sdmid'] = $digest->sdmid;
          $newsletter['tid'] = $digest->tid;
          $digest->cron_last = $digest->last_cron;
          // get nodes for this digest config
          $newsletter['new_nodes'] = isa_multiple_digest_select_nodes($digest);
          if (!empty($newsletter['new_nodes'])) {
            // create newsletter body
            $newsletter['body'] = theme_isa_multiple_digest_format_newsletter($newsletter);
            //$newsletter['body'] = theme('isa_multiple_digest_format_newsletter', $newsletter);
            //create newsletter node
            isa_multiple_digest_create_newsletter_node($newsletter);
            //update field last_cron in DB
            $digest->last_cron = time();
            isa_multiple_digest_save($digest, $update);
          }
        }
      }
    }
  }
}

/**
 * Create newsletters nodes
 *
 * @param array $newsletter newsletter config
 */
function isa_multiple_digest_create_newsletter_node($newsletter) {
  $tid = $newsletter['tid'];
  $language_default = variable_get('language_default', 'en');
  // get newsletter number
  $newsletter_number = db_result(db_query("SELECT DISTINCT COUNT(n.nid) from {node} n
             INNER JOIN {term_node} t ON n.nid = t.nid WHERE t.tid = %d", $tid));
  $newsletter_number++;

  //get newsletter term
  $term = taxonomy_get_term($tid);
  $content_type = variable_get('simplenews_content_types', NULL);
  if ($newsletter['body'] && $content_type) { // Don't send anything unless there are new nodes
    $node->body = $newsletter['body'];
    $node->uid = 1;
    $node->title = $term->name . ' #' . $newsletter_number;
    $node->type = array_shift($content_type);
    $node->teaser = node_teaser($node->body);
    $node->filter = variable_get('filter_default_format', 1);
    $node->status = 1;
    $node->revision = 1;
    $node->promote = 0;
    $node->comment = 0;
    $node->created = time();
    $node->changed = time();
    $node->taxonomy = array($tid);
    $node->language = $language_default->language;
    $node->simplenews = array(
        'send' => SIMPLENEWS_COMMAND_SEND_NOW,
        'advanced' => array(
            'priority' => 0,
            'receip' => 0,
            's_format' => 'html',
        ),
        's_status' => 0
    );
    node_save($node);
  }
}

/** Return a digest list with parameter
 *
 * @param string $column column name
 * @param string $value value
 * @return array digests
 */
function isa_multiple_digest_get_newsletter_config($column, $value) {
  $sql = "SELECT * FROM {simplenews_digest_multiple} sdm ";
  if ($column) {
    $sql .= "WHERE sdm." . $column . " = '" . $value . "'";
  }
  $result = db_query($sql);
  $digests = array();
  while ($row = db_fetch_object($result)) {
    $digests[$row->tid] = $row;
    //  $digests=$row;
  }
  return $digests;
}

/** Query the database for nodes to send in newsletter
 *
 * @param array $digest the configuration of newsletter
 * @return array node
 */
function isa_multiple_digest_select_nodes($digest) {
  $start_time = $digest->last_cron;
  $state_validated = array(ISA_SID_NEWS_CREATED, ISA_SID_NEWS_PUBLISHED, ISA_SID_NEWS_REQUEST_PUBLICATION, ISA_SID_COMMUNITY_VALIDATED, ISA_SID_NEWS_VALIDATED, ISA_SID_FEDPROJ_PUBLISHED, ISA_SID_RELEASE_CREATED, ISA_SID_RELEASE_REQUESTED, ISA_SID_RELEASE_APPROVED);
  $language_default = variable_get('language_default', 'en');
  $result = array();
  $query_tab = array();

  // initialize $query_tab with common options
  $query_tab['select'] = 'SELECT DISTINCT n.nid, n.type, n.title, n.created , nr.body';
  $query_tab['from'] = 'FROM {node} n';
  $query_tab['join'][] = 'LEFT JOIN {node_revisions} nr ON nr.nid = n.nid';
  $query_tab['where'][] = 'n.status = 1';
  $query_tab['where'][] = sprintf('n.created >= %d', $start_time);
  $query_tab['where'][] = sprintf('n.created <= %d', time());
  $query_tab['where'][] = sprintf("n.language = '%s'", $language_default->language);

  ////////////////////////////////////
  // Add content type in $query_tab //
  ////////////////////////////////////
  $content_types = unserialize($digest->ctids);
  if (!empty($content_types)) {
    // search content type with a workflow and add in $content_types_with_workflow
    foreach ($content_types as $name => $used) {
      if (workflow_get_workflow_for_type($used)) {
        $content_types_with_workflow[$name] = $used;
        unset($content_types[$name]);
      }
    }
    $selected_content_types = array_filter($content_types);
    // content type without workflow      //
    // add condition "node.type in (...)" //
    if (!empty($selected_content_types)) {
      //$selected_content_types = array_filter($content_types);
      $type_placeholders = implode(',', array_fill(0, count($selected_content_types), "'%s'"));
      $where = vsprintf("n.type IN ($type_placeholders)", $selected_content_types);
    }

    // content type with workflow                                   //
    // add condition "node.type in (...) AND workflow.sid in (...)" //
    if (!empty($content_types_with_workflow)) {
      $selected_content_types_with_workflow = $content_types_with_workflow;
      $type_placeholders_with_workflow = implode(',', array_fill(0, count($selected_content_types_with_workflow), "'%s'"));
      $query_tab['join'][] = 'LEFT JOIN {workflow_node} wn ON wn.nid = n.nid ';
      $where_workflow = vsprintf("n.type IN ($type_placeholders_with_workflow) AND wn.sid IN (" . implode(',', $state_validated) . ")", $selected_content_types_with_workflow);
      //merge conditions: "$where OR $where_workflow"
      if ($where) {
        $where = '(' . $where . ' OR ( ' . $where_workflow . '))';
      }
      else {
        $where = '(' . $where_workflow . ')';
      }
    }
    if ($where) {
      $query_tab['where'][] = $where;
    }
  }

  ////////////////////////////////
  // Add taxonomy in $query_tab //
  ////////////////////////////////
  $terms = unserialize($digest->tids);
  if (!empty($terms) && $terms != 0) {
    $selected_terms = array_filter($terms);
    $term_placeholders = implode(',', array_fill(0, count($selected_terms), '%d'));
    $query_tab['where'][] = vsprintf("t.tid IN ($term_placeholders)", $selected_terms);
    $query_tab['join'][] = 'INNER JOIN {term_node} t ON n.nid = t.nid';
  }

  /////////////////////////
  // Construct sql query //
  /////////////////////////
  $query_tab['join'] = implode(' ', $query_tab['join']);
  $query_tab['where'] = 'WHERE ' . implode(' AND ', $query_tab['where']);
  $sql = $query_tab['select'] . ' ' . $query_tab['from'] . ' ' . $query_tab['join'] . ' ' . $query_tab['where'];

  ///////////////
  // Run query //
  ///////////////
  $qs = db_query($sql);
  while ($obj = db_fetch_object($qs)) {
    $result[] = $obj;
  }
  return $result;
}

/**
 * Generate the newsletter body
 *
 * @param array $newsletter newsletter config
 * @return string node body formated (html)
 */
function theme_isa_multiple_digest_format_newsletter(&$newsletter) {
  $output_by_type = array();
  // sort the content list, news at first , event and the rest
  $output_by_type[ISA_NEWS_TYPE] = '';
  $output_by_type[ISA_EVENT_TYPE] = '';

  foreach ($newsletter['new_nodes'] as $node) {
    $output_by_type[$node->type] .= theme('multiple_digest_format_content', $node);
  }
  // Nothing to send, no newsletter is sent
  if (!$output_by_type) {
    return '';
  }
  // $newsletter['body'] created here
  $output = '';
  // Sort content by type
  $node_type = node_get_types();
  foreach ($output_by_type as $type => $content) {
    if (!empty($content)) {
      if (isset($node_type[$type])) {
        $new_name = $node_type[$type]->name;
      }
      else {
        $new_name = $type;
      }
      $output .= "<h3>$new_name</h3>" . $content;
    }
  }
  return $output;
}

/**
 * Implement of hook_theme()
 */
function isa_multiple_digest_theme() {

  return array(
      'isa_multiple_digest_format_newsletter' => array(
          'arguments' => array('newsletter' => NULL),
      ),
      'multiple_digest_format_content' => array(
          'arguments' => array('node' => array()),
          'template' => 'format-content',
      ),
  );
}

/**
 *
 * @param type $vars 
 */
function isa_multiple_digest_preprocess_multiple_digest_format_content(&$vars) {

  $vars['title_view'] = isa_multiple_digest_create_node_link($vars['node']);
  $vars['body_view'] = strip_tags(truncate_utf8($vars['node']->body, LIMIT_BODY_LENGTH, FALSE, TRUE));
  $vars['body_view'] = trim($vars['body_view']);
  if ($vars['node']->type == ISA_EVENT_TYPE) {
    $node = node_load($vars['node']->nid);
    if ($node->field_event_dates['0']['value'] == $node->field_event_dates['0']['value2']) {
      $date = $node->field_event_dates['0']['value'];
      $vars['date_view'] = date('d F Y', strtotime($date));
    }
    else {
      $date = strtotime($node->field_event_dates['0']['value']);
      $date2 = strtotime($node->field_event_dates['0']['value2']);
      if (date('Y', $date) == date('Y', $date2)) {
        if (date('F', $date) == date('F', $date2)) {
          // 1 - 2 January 2011
          $vars['date_view'] = date('d', $date) . ' - ' . date('d F Y', $date2);
        }
        else {
          // 1 January - 1 june 2011
          $vars['date_view'] = date('d F', $date) . ' - ' . date('d F Y', $date2);
        }
      }
      else {
        //1 january 2011 - 1 january 2011
        $vars['date_view'] = date('d F Y', $date) . ' - ' . date('d F Y', $date2);
      }
    }
  }
  else {
    $vars['date_view'] = date('d F Y', $vars['node']->created);
  }
}

/**
 * Generates a hyperlink to the node, called by the format_newsletter theme
 *
 * @param object $node
 * @return string title linked
 */
function isa_multiple_digest_create_node_link($node) {
  $path_alias = drupal_get_path_alias('node/' . $node->nid);
  return l(check_plain($node->title), $path_alias);
}

/**
 * Create the part of the who who manage the digest
 * @return
 *  A Array $form who contains the new element (Digest)
 */
function isa_multiple_digest_settings_form(&$form) {

  $content_types = array();
  $path = explode('/', drupal_get_normal_path($_GET['q'])); // paths like admin/content/simplenews/types/edit/%
  $digest = isa_multiple_digest_get_newsletter_config('tid', $path[5]);
  //dsk($path[5], 'path');
//  dsk($digest['frequency'], 'freq');
//  dsk($digest['ctids'], 'ctids');

  $digest = $digest[$path[5]];

  foreach (node_get_types () as $system_name => $data) {
    $content_types[$system_name] = $data->name;
  }
  asort($content_types);
  $form['simplenews_digest_multiple'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => 'Digest',
  );
  //Add a radios button to give the user the ability to manage digest or not
  $form['simplenews_digest_multiple']['simplenews_digest_enable'] = array(
      '#type' => 'radios',
      '#title' => 'Use or edit Digest',
      '#options' => array('yes' => yes, 'no' => no),
      '#default_value' => isset($digest->sdmid) ? 'yes' : 'no',
  );
  $form['simplenews_digest_multiple']['simplenews_digest_frequency'] = array(
      '#type' => 'radios',
      '#prefix' => '<div id="wrapper-digest" >',
      '#title' => 'Frequency of publication',
      '#options' => array('weekly' => weekly, 'monthly' => monthly),
      '#default_value' => isset($digest->frequency) ? $digest->frequency : 'weekly',
  );


  //choose the date of the month
  $form['simplenews_digest_multiple']['simplenews_digest_monthly'] = array(
      '#type' => 'fieldset',
      '#title' => 'Monthly settings',
      '#description' => 'Monthly settings are used only when the newsletter is sent monthly.',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  $form['simplenews_digest_multiple']['simplenews_digest_monthly']['day'] = array(
      '#type' => 'select',
      '#title' => 'Day of the month to send newsletter',
      '#options' => drupal_map_assoc(array('First day', '15th', 'Last day')),
      '#default_value' => $digest->day == '' ? 'First day' : $digest->day,
  );


  $form['simplenews_digest_multiple']['simplenews_digest_content_types'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Send only the following types of content in the newsletter',
      '#options' => $content_types,
      '#default_value' => isset($digest->ctids) ? unserialize($digest->ctids) : array(),
  );
  $form['simplenews_digest_multiple']['simplenews_digest_terms'] = array(
      '#type' => 'select',
      '#suffix' => '</div>',
      '#multiple' => TRUE,
      '#size' => 20,
      '#title' => 'Send only content from these categories',
      '#default_value' => unserialize($digest->tids),
      '#options' => taxonomy_form_all(),
  );
  return $form;
}

/**
 * Save the digest (insert or update)
 * @param array $multidigest the digest
 * @param array $update the primary key
 */
function isa_multiple_digest_save($multidigest, $update) {
  $query = NULL;
  if (sizeof($update) > 0) {
    if (is_object($multidigest)) {
      $multidigest->sdmid = $update['sdmid'];
    }
    else
      $multidigest['sdmid'] = $update['sdmid'];

    $query = drupal_write_record("simplenews_digest_multiple", $multidigest, 'sdmid');
  }
  else
    $query = drupal_write_record("simplenews_digest_multiple", $multidigest);
}

/**
 * Implement hook_menu ()
 */
function isa_multiple_digest_menu() {
  $items['admin/settings/simplenews/multiple_digest_settings'] = array(
      'title' => 'Multiple digest settings',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer multiple digest config'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('isa_multiple_digest_config'),
      'description' => t('Configure automatic digest newsletters of new site content.')
  );
  return $items;
}

/**
 * Page callback for multiple digest settings page
 *
 * @return array $form the form
 * @see isa_multiple_digest_menu ();
 */
function isa_multiple_digest_config() {
  $form['digest'] = array(
      '#type' => 'fieldset',
      '#title' => 'Digest configuration',
  );
  $form['digest']['isa_multiple_digest_cron_day_of_week'] = array(
      '#type' => 'select',
      '#title' => 'Day of week newsletter sent',
      '#options' => array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'), 3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday')),
      '#default_value' => variable_get('isa_multiple_digest_cron_day_of_week', 0),
      '#description' => 'Select the day of week for the send newsletter',
  );
  return system_settings_form($form);
}

/**
 * Implement of hook_perm
 */
function isa_multiple_digest_perm() {
  return array('administer multiple digest config');
}

/**
 * Do update digest informations in the database
 * @param array $multidigest
 */
function isa_multiple_digest_update($multidigest) {
  drupal_write_record("simplenews_digest_multiple", $multidigest);
}

/**
 * Delete a digest
 * @param int $tid the digest to remove
 */
function isa_multiple_digest_delete($tid) {
  db_query("DELETE FROM {simplenews_digest_multiple} WHERE tid = %d", $tid);
}

/**
 * Implement of submit form
 * @param array $form
 * @param array $form_state
 */
function isa_multiple_digest_delete_submit(&$form, $form_state) {
  $tid = $form_state['values']['tid'];
  isa_multiple_digest_delete($tid);
}
