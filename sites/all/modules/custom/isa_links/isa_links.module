<?php

/**
 * @defgroup isa_links
 * @brief Create the buttons on the right side and the menus on the left
 * @file 
 * Modules main file
 * @ingroup isa_links
 */
require('isa_links_buttons_datas.inc');
require('isa_links_menus_datas.inc');

/**
 * Implement hook_theme()
 * @param array $existing An array of existing implementations
 * @param string $type What 'type' is being processed
 * @param string $theme The actual name of theme that is being being checked
 * @param string $path The directory path of the theme or module
 * @return array A keyed array of theme hooks.
 */
function isa_links_theme($existing, $type, $theme, $path) {
  $items = array();
  $items['block_buttons'] = array(
    'arguments' => array('buttons' => NULL, 'links' => NULL),
    'template' => 'block-buttons',
  );
  $items['block_left_menu'] = array(
    'arguments' => array('menus' => NULL),
    'template' => 'block-left-menu',
  );
  return $items;
}

/**
 * Get the buttons/menus depending on the path
 * @param string $type The type of menus|buttons desired
 * @return array All buttons|menus which can be displayed on the page corresponding to the path
 */
function isa_links_get_links($type) {
  if ($type == 'buttons') {
    $all_buttons = isa_links_buttons_datas();
  } elseif ($type == 'menus') {
    $all_buttons = isa_links_menus_datas();
  }
  
  foreach ($all_buttons as $path => $buttons) {
    $path_ini = $path;
    // We check if the path correspond to the key.
    $regexp = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'),
        array('|', '.*', '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2'),
        preg_quote($path, '/')) . ')$/';
    // Compare with the internal and path alias (if any).
    $page_match = preg_match($regexp, $_GET['q']);
    if (!$page_match && function_exists('drupal_get_path_alias')) {
      $path = drupal_get_path_alias($_GET['q']);
      if ($path != $_GET['q']) {
        $page_match = preg_match($regexp, $path);
      }
    }
    if ($page_match) {
      
      eval('$buttons = ' . $buttons . ';');
      return $buttons;
    }
  }
}

//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create the more about joinup buttons content and class
 * @return button html content
 */
function isa_links_hb_create_more_about_joinup_array_button_content($button_data) {
	$array_buttons['content'] = "<a href='" . base_path() .  $button_data['href'] ."' class='action " . $button_data['class'] ."' title='" . $button_data['tooltips'] ."'>" . $button_data['title'] . "</a>";
	if($button_data['class'] == 'our-services'){
		$array_buttons['class'] = 'icon-exchange pull-left icon';
		
	}
	if($button_data['class'] == 'subscribe-newsletter'){
		$array_buttons['class'] = 'icon-envelope-alt pull-left icon';
	}
		
	return $array_buttons;
}

//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create the more about joinup buttons
 */
function isa_links_hb_create_more_about_joinup_array_buttons($buttons_data) {
	$array_buttons = array();
	foreach ($buttons_data as $button_data){
		$button = isa_links_hb_create_more_about_joinup_array_button_content($button_data);
		array_push($array_buttons, $button);
	}
	return $array_buttons;
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Fill the home buttons regions
 * @return structure region_header
 */
function isa_links_hb_fill_region_header($region_header) {
	$region_structure =
	"<div class='home-button-region-header'>"
			. $region_header .
	"</div>";
	return $region_structure;
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Fill the home buttons content of the buttons
 * @return structure simple button
 */
function isa_links_hb_fill_simple_button($button) {
	$button_structure =
	"<div class='rounded-box con " . $button['wrapper_class'] . "'>
	        <div class='rounded-box-wrapper con'>
				<i class='" . $button['class'] . "'></i><div>" . $button['content'] . "</div>
			</div>
	    <div class='corner topLeft'></div>
	    <div class='corner topRight'></div>
	    <div class='corner bottomLeft'></div>
	    <div class='corner bottomRight'></div>
	</div>";
	return $button_structure;
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create the home buttons region
 * @return region (union of header + buttons)
 */
function isa_links_hb_create_region($region_header, $array_buttons) {
	$region = NULL;
	$region_buttons = NULL;
	foreach($array_buttons as $button){//Join the diferent buttons in to one single html
		$region_buttons .= isa_links_hb_fill_simple_button($button);
	}
	$region = isa_links_hb_fill_region_header($region_header) . $region_buttons;//Create the region by joinning header and buttons
	return $region;
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Join the home buttons regions
 * @return The block (union of regions)
 */
function isa_links_hb_join_regions($array_regions) {
	$block_regions = NULL;
	foreach($array_regions as $region){//Join the diferent regions in to one single html
		$block_regions .= $region;
	}
	return $block_regions;
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create the home buttons block
 * @return array The block (content + subject)
 */
function isa_links_hb_create_block() {
	//$block['subject'] = t('Home buttons');

	//Get array with all buttons
	$all_buttons = isa_links_get_links('buttons'); 
	//Prepare 'propose your...' button html content
	$button_propose_array['quick_action'] = $all_buttons['quick_action'];
	$button_propose_array['bottom_action'][0] = $all_buttons['bottom_action'][0];
	$button_propose_content = isa_links_create_button_propose($button_propose_array);
	$button_propose['content'] = $button_propose_content;
	$button_propose['class'] = 'icon-plus-sign pull-left icon';
	$button_propose['wrapper_class'] = 'propose-button';
		
	//Prepare 'share this' button html content	
	$button_share_this_array['bottom_action']['share-this'] = $all_buttons['bottom_action'][1];
	$button_share_this_content = isa_links_create_button_share_this($button_share_this_array);
	$button_share_this['content'] = $button_share_this_content;
	$button_share_this['class'] = '';
	$button_share_this['wrapper_class'] = 'share-this-button';
	
	//Build the sharing content region block	
	$region_sharingcontent_buttons = array($button_propose,$button_share_this);
	$region_sharingcontent_header = "<div class='title-box-sharing'><span></span><h3><b>Sharing</b> content</h3></div>";
	$region_sharingcontent = isa_links_hb_create_region($region_sharingcontent_header,$region_sharingcontent_buttons);

	//Prepare 'Our services' and 'Newsletter' buttons html content
	$more_about_joinup_buttons_array['bottom_action'][0] = $all_buttons['action'][0];
	$more_about_joinup_buttons_array['bottom_action'][1] = $all_buttons['bottom_action'][1];	//Build the 'more about joinup'  region block
	$region_more_about_joinup_buttons = isa_links_hb_create_more_about_joinup_array_buttons($more_about_joinup_buttons_array['bottom_action']); //Create the array of button_content
	$region_more_about_joinup_header = "<div class='title-box-joinup'><h3><span></span><b>More</b> on Joinup</h3></div>";
	$region_more_about_joinup_buttons[0]['wrapper_class'] = 'services-button';
	$region_more_about_joinup_buttons[1]['wrapper_class'] = 'newsletter-button';
	$region_more_about_joinup = isa_links_hb_create_region($region_more_about_joinup_header,$region_more_about_joinup_buttons);

	//Prepare the regions
	$block_regions = array($region_sharingcontent,$region_more_about_joinup);
	
	//Join the regions in to a block
	$block['content'] = isa_links_hb_join_regions($block_regions);
	return $block;
}

//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create the 'share this' button
 * @return array The block (content + subject)
 */
function isa_links_create_button_share_this($array_buttons) {
	foreach ($array_buttons as $button_type => $buttons) {
		$arguments = '';
		$script = '';
		if (isset($buttons['share-this']) && $buttons['share-this']) {
			drupal_add_js(drupal_get_path('module', 'isa_links') . '/isabookmark/share.js');
		//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
		//If the page has a short url this is the link to the "Share This on..."
		if (arg(0) && arg(1) ){
		$link = url(arg(0) . "/" . arg(1), array('absolute' => TRUE, 'alias' => TRUE));
		} else {
		$link = url($_GET['q'], array('absolute' => TRUE, 'alias' => TRUE));
		}
		$script = '<div id="share-this" class="share-links"><script type="text/javascript">
		iBeginShare.attachLink(\'share-this\', {
				share_text:\'Share this on...\'
				,  share_size:\'\'
				,  share_url:\'' . $link . '\'
				});
		</script></div>
		';
		unset($buttons['share-this']);
		}
		
		$array_buttons[$button_type] = isa_links_theme_buttons($buttons) . $script;
	}
	$block['content'] = theme('block_buttons',$array_buttons['bottom_action']);
	return $block['content'];
}
//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Create 'propose your...' button
 * @return array The block (content + subject)
 */
function isa_links_create_button_propose($array_buttons) {
	foreach ($array_buttons as $button_type => $buttons) {
		$arguments = '';
		foreach ($buttons as $key => $button) {
				$class = '';
				if (isset($button['class'])) {
					$class = ' ' . $button['class'];
				}
				$button['attributes'] = array('class' => $button_type . $class);
				if (isset($button['html'])) {
					$button['attributes'] = array('class' => $button['class']);
					$button['title'] = l($button['title'], NULL,
							array('html' => TRUE, 'attributes' => array('class' => 'action propose-your', 'title' => $button['title']))) . $array_buttons['quick_action'];
				}
				$buttons[$key] = $button;
		}
		$array_buttons[$button_type] = isa_links_theme_buttons($buttons);
	}
	$block['content'] = theme('block_buttons',$array_buttons['bottom_action']);
	return $block['content'];
}
function isa_links_download_button(){
  global $user;
  $nid = variable_get('current_group', isa_toolbox_get_community_nid());
  $node = isa_toolbox_get_original_node(node_load($nid));
  $path = explode('/', drupal_get_normal_path($_GET['q']));
  $group_type = isa_toolbox_get_node_type_name($node);
  $release_id = isa_toolbox_get_last_release($node->nid);
  $release = NULL;
  if ($release_id) {
    $release = node_load($release_id);
    $download_link = $release->path;
  } else {
    if ($node->group_type == ISA_ASSET_TYPE) {
      $download_link = ($node->group_type . '/' . $node->project['uri'] . '/asset_release/all');
    } else {
      $download_link = ($node->group_type . '/' . $node->project['uri'] . '/release/all');
    }
  }
  if(drupal_lookup_path('source', $download_link)){
    $download_button['download'] = isa_links_get_general_button('download-' . $node->group_type, 'isa_links_node_is_validated', $project, NULL, $download_link, 'Download');
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-974
    //Link to the distribution section 
    $block['content'] = isa_links_theme_buttons($download_button, array('class' => 'links'), 'download-links');
  }else{
    $block = '';
  }
  return $block;
}
/**
 * Create the buttons block (on the right of the page)
 * @return array The block (content + subject)
 */
function isa_links_create_buttons($region) {
  //Get the correct buttons, depending on the path
  $all_buttons = isa_links_get_links('buttons');
  if (!isset($all_buttons['links'])) {
    $all_buttons['links'] = NULL;
  }
  if('bottom' == $region){
    unset($all_buttons['push']);
    unset($all_buttons['links']);
    unset($all_buttons['action']);
  }else{
    unset($all_buttons['bottom_action']);
    unset($all_buttons['quick_action']);
  }
  foreach($all_buttons as $key => $value){
    if(count($value) <= 0){
      unset($all_buttons[$key]);
    }
  }
  foreach ($all_buttons as $button_type => $buttons) {
    $arguments = '';
    $share_this = '';
    foreach ($buttons as $key => $button) {
      if ($key == 'share-this' && $button == 1 && $region == 'bottom') {
        $button = array();
	drupal_add_js(drupal_get_path('module', 'isa_links') . '/isabookmark/share.js');	
		  //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
		  //If the page has a short url this is the link to the "Share This on..."
		  if (arg(0) && arg(1) ){		
			  $link = url(arg(0) . "/" . arg(1), array('absolute' => TRUE, 'alias' => TRUE));
		  } else {
			  $link = url($_GET['q'], array('absolute' => TRUE, 'alias' => TRUE));
		  }	  
	$share_this = '<div id="share-this" class="share-links"><script type="text/javascript">
		    iBeginShare.attachLink(\'share-this\', {
		       share_text:\'Share this on...\'
				    ,  share_size:\'\'
				    ,  share_url:\'' . $link . '\'
				    });
		    </script></div>
		    ';
      }
      if (isset($button['access_callback'])) {
        $arguments = '';
        if (isset($button['access_arguments'])) {
          $arguments = $button['access_arguments'];
        }
        eval('$callback = ' . $button['access_callback'] . '($arguments);');
      }
      if ((isset($button['permission']) && !user_access($button['permission'])) ||
        (isset($button['access_callback']) && !$callback)) {
        //Delete the button if the user have not the permission to see it
        unset($buttons[$key]);
      } else {
        $class = '';
        if (isset($button['class'])) {
          $class = ' ' . $button['class'];
        }
        $button['attributes'] = array('class' => $button_type . $class);
        if (isset($button['html'])) {
          $button['attributes'] = array('class' => $button['class']);
          $button['title'] = l($button['title'], NULL,
              array('html' => TRUE, 'attributes' => array('class' => 'action propose-your', 'title' => $button['title']))) . $all_buttons['quick_action'];
        }
        //Rewrite the url
        if (isset($button['url_callback'])) {
          eval('$url_callback = ' . $button['url_callback'] . '();');
          $button['href'] = sprintf($button['href'], $url_callback);
        }
        $buttons[$key] = $button;
      }
    }
    if ($share_this) {
      $buttons['share-this'] = array('title' => $share_this);
    }
    else {
      unset($buttons['share-this']);
    }
    $all_buttons[$button_type] = isa_links_theme_buttons($buttons);
  }
  //remove span but causes a lot a of other errors w3c
  //$all_buttons['action'] = ereg_replace('(.*)"><span[^>]*>(.*)</span>(.*)"','\\1 quick-actions">\\2\\3',$all_buttons['action']);
  $block['content'] = theme('block_buttons', $all_buttons['push'] . $all_buttons['action'] . $all_buttons['bottom_action'], $all_buttons['links']);
  return $block;
}

/**
 * Create the menus block (on the left of the page)
 * @return array The block (content + subject)
 */
function isa_links_create_menus() {
  //Get the correct menus, depending on the path
  $all_menus = isa_links_get_links('menus');
  $menu_theme = '';
  if (count($all_menus) > 0) {
    foreach ($all_menus as $menu_name => $menus) {
      //Check if the menu should be displayed
      if (isset($menus['access_callback'])) {
        eval('$access_callback = ' . $menus['access_callback'] . '();');
      }
      if ((isset($menus['permission']) && !user_access($menus['permission'])) ||
        (isset($menus['access_callback']) && !$access_callback)) {
        //Delete the menu if the user have not the permission to see it
        unset($all_menus[$menu_name]);
      } else {
        foreach ($menus['menus'] as $key => $menu) {
          //Check if the menu item should be displayed
          if (isset($menu)) {
            if (isset($menu['access_callback'])) {
              eval('$menu_callback = ' . $menu['access_callback'] . '();');
            }
            if ((isset($menu['permission']) && !user_access($menu['permission'])) ||
              (isset($menu['access_callback']) && !$menu_callback)) {
              //Delete the menu item if the user have not the permission to see it
              unset($menus['menus'][$key]);
            } else {
              //Rewrite the url
              if (isset($menu['url_callback'])) {
                eval('$url_callback = ' . $menu['url_callback'] . '();');
                $menu['href'] = sprintf($menu['href'], $url_callback);
              }
              if (isset($menu['class'])) {
                $menu['attributes'] = array('class' => $menu['class']);
              }
              //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-796
              //Mark active the contextual menu when searching text
              $root_path = explode("/", $_GET['q']);
              $menu_path = explode("/", $menu['href']);
              if(count($root_path) > count($menu_path)){
                $root_path_tail = array_pop($root_path);
                $root_path = implode("/", $root_path);
                $menu['href'] == $root_path ? $menu['attributes']['class'] = 'active' : FALSE;
              }
              $menus['menus'][$key] = $menu;
            }
          } else {
            unset($menus['menus'][$key]);
          }
        }
        if (count($menus['menus']) > 0) {

          $menu_theme .= isa_links_theme_menu($menu_name, $menus['menus']);
        }
      }
    }
  }

  $block['content'] = theme('block_left_menu', $menu_theme);
  return $block;
}

/**
 * Return the shortname of the group (depending on the context or the argument)
 * @param node $group The node corresponding to the group
 * @return string the shortname of the group
 */
function isa_links_get_group_short_name($group = NULL) {
  if (!$group) {
    $nid = variable_get('current_group', isa_toolbox_get_community_nid());
    $group = node_load($nid);
  }
  if ($group) {
    if ($group->type == ISA_COMMUNITY_TYPE) {
      return $group->field_community_short_name[0]['value'];
    } elseif ($group->type == ISA_PROJECT_TYPE) {
      return $group->project['uri'];
    } elseif ($group->type == ISA_REPOSITORY_TYPE) {
      $path = explode('/', $group->path);
      return $path[1];
    }
  } else {
    return '';
  }
}

/**
 * Return a link (h3, enabled|disabled,) = item of the menu
 * Used to highlight a menu corresponding on the page
 * @global user $user
 * @param string $menu_name The name (title) of the item menu
 * @param array $menu The informations corresponding to the item menu
 * @return string : the link of the item of the menu
 */
function isa_links_theme_menu($menu_name, $menu) {
  //print_R($menu);
  global $language;
  $initial_path = $_GET['q'];
  $node = menu_get_object();
  if (!$node) {
    $exploded_path = explode('/', $initial_path);
    if ($exploded_path[0] == 'node' && is_numeric($exploded_path[1]) && $exploded_path[2] == 'edit') {
      $node = node_load($exploded_path[1]);
    }
    if ($exploded_path[0] == 'comment' && is_numeric($exploded_path[2])) {
      if ($exploded_path[1] == 'edit') {
        $comment = _comment_load($exploded_path[2]);
        $node = node_load($comment->nid);
      } else {
        $node = node_load($exploded_path[2]);
      }
    }
  }
  $group = node_load(variable_get('current_group', isa_toolbox_get_community_nid()));

  $short_name = isa_links_get_group_short_name($group);
  $path = '';
  //on a node
  if ($node) {
    if ($group) {
      switch ($group->group_type) {
        case ISA_REPOSITORY_TYPE:
          break;
        default:
          $path = "{$group->group_type}/{$short_name}/";
          break;
      }
    }
    switch ($node->type) {
      case ISA_ASSET_RELEASE_TYPE:
        $path .= empty($path) ? 'catalogue/all' : 'asset_release/all';
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-796
        //Mark Federated Reposotory context menu when accessing an asset_release from its Federated Repository 
        if(strpos(referer_uri(),'/asset_release/')){
          $menu['Federated repositories']['attributes']['class'] = 'active';
          $menu['Catalogue of assets']['language'] = '1';
        }
        break;
      case ISA_DISTRIBUTION_TYPE:
        $path .= empty($path) ? 'catalogue/all' : 'asset_release/all';
        break;
      case 'asset-release':
        $path .= "catalogue/all";
        break;
      case ISA_PROJECT_RELEASE_TYPE:
        $path .= 'release/all';
        break;
      case ISA_ISSUE_TYPE:
        $path .= 'issue/all';
        break;
      case ISA_PROJECT_TYPE:
      case ISA_COMMUNITY_TYPE:
        $path = "node/{$node->nid}";
        break;
      case ISA_REPOSITORY_TYPE:
        $path = 'catalogue/repository/all';
        break;
      case ISA_LICENCE_TYPE:
        $path = 'catalogue/licence/all';
        break;
      case ISA_DOCUMENTATION_TYPE:
        $path = 'catalogue/documentation/all';
        break;
      case ISA_PUBLISHER_TYPE:
        $path = 'catalogue/publisher/all';
        break;
      case ISA_ITEM_TYPE:
        $path = 'catalogue/item/all';
        break;
      case ISA_CONTACT_POINT_TYPE:
        $path = 'catalogue/contact_point/all';
        break;
      case ISA_NEWSLETTER_TYPE:
        $path = 'news/newsletter';
        break;
      case ISA_NEWS_TYPE:
        if (!$group) {
          $path = 'news/news';
          break;
        }
      case ISA_BLOG_TYPE:
        if (!$group) {
          $path = 'news/blog';
          break;
        }
        $path .= 'newsandblog/all';
        break;
      case ISA_TOPIC_TYPE:
        $path .= 'forum/all';
        break;
      case ISA_WIKI_TYPE:
        //case of license wizard pages
        if (strstr(drupal_get_path_alias($initial_path), 'software/license-wizard')
          || strstr(drupal_get_path_alias($initial_path), 'node/2048')) {
          $path = 'node/2048';
          break;
        }
      case ISA_DOCUMENT_TYPE:
        $path .= ( $group) ? 'elibrary/all' : 'elibrary/document';
        break;
      case ISA_PRESENTATION_TYPE:
        $path .= 'elibrary/presentation';
        break;
      case ISA_CASE_TYPE:
        switch (isa_toolbox_get_case_type($node)) {
          case 0 : $path .= 'elibrary/case';
            break;
          case 1 : $path .= 'software/studies';
            break;
          case 2 : $path .= 'software/guidelines';
            break;
        }
        break;
      case ISA_FACTSHEET_TYPE:
        $path .= 'elibrary/factsheet';
        break;
      case ISA_VIDEO_TYPE:
        $path .= 'elibrary/video';
        break;
      case ISA_FEDERATED_FORGE_TYPE:
        $path .= 'software/federated_forge';
        break;
      case ISA_FEDERATED_PROJECT_TYPE:
        $path .= 'software/federated_forge';
        break;
      case ISA_LEGALDOCUMENT_TYPE:
        $path .= 'elibrary/all';
        break;
      case ISA_EVENT_TYPE:
        $path .= 'event/all';
        if (isset($node->field_event_dates[0]['value']) && !$group) {
          $date1_timestamp = strtotime($node->field_event_dates[0]['value']);
          $date2_timestamp = strtotime($node->field_event_dates[0]['value2']);
          $time_limit = time() - (24 * 60 * 60); // 1 day in second
          $day_limit = date('d', $time_limit);
          if (($date1_timestamp < $time_limit ) && ( $date2_timestamp < $time_limit )) {
            $path = 'event/archives';
          }
        }
        break;
      case 'contexthelp':
        $path = 'help';
        break;
      case 'contexthelp_faq':
        $path = 'help_topics';
        break;
      case 'page':
        $path_alias = drupal_get_path_alias($initial_path);
        if (strpos($path_alias, 'asset/page/practice_aids') === 0) {
          $path = drupal_lookup_path('source', 'asset/page/practice_aids');
        } elseif (strpos($path_alias, 'software/page/eupl') === 0) {
          $path = drupal_lookup_path('source', 'software/page/eupl');
        } elseif (strpos($path_alias, 'software/page/virtual_forge') === 0) {
          $path = drupal_lookup_path('source', 'software/page/virtual_forge');
        } elseif (strpos($path_alias, 'software/guidelines') === 0) {
          $path = 'software/guidelines';
        } elseif (strpos($path_alias, 'software/studies') === 0) {
          $path = 'software/studies';
        }
        break;
      case 'catalogue':
        $path = 'catalogue/all';
        break;
    }
  } else {
    if ($group) {
      //specific pages
      if (strpos($initial_path, "{$group->group_type}/{$short_name}/forum") === 0) {
        $path .= "{$group->group_type}/{$short_name}/forum/all";
      } elseif (strpos($initial_path, "{$group->group_type}/{$short_name}/legaldocument") === 0) {
        $path .= "{$group->group_type}/{$short_name}/elibrary/all";
      } elseif (strpos($initial_path, "{$group->group_type}/{$short_name}/asset_assistant") === 0 ||
        strpos($initial_path, "{$group->group_type}/{$short_name}/issue") === 0) {
        $path .= "{$group->group_type}/{$short_name}/issue/all";
      } elseif (strpos($initial_path, "{$group->group_type}/{$short_name}/members") === 0) {
        $path .= "{$group->group_type}/{$short_name}/members";

        // for survey page
      } elseif (strpos($initial_path, "{$group->group_type}/{$short_name}/release") === 0) {
        $path .= "{$group->group_type}/{$short_name}/release/all";
      }
    } elseif (strpos($initial_path, "admin/infobox") === 0) {
      $path = 'admin/infobox';
    } elseif (strpos($initial_path, "admin/user/user") === 0) {
      $path = 'admin/user/user';
    } elseif (strpos($initial_path, "admin/content/taxonomy") === 0) {
      $path = 'admin/content/taxonomy';
    } elseif (strpos($initial_path, "admin/content/simplenews/users") === 0) {
      $path = 'admin/content/simplenews/users';
    } elseif (strpos($initial_path, "people/all") === 0) {
      $path = 'people/all';
    } elseif (strpos($initial_path, "people/experts") === 0) {
      $path = 'people/experts';
    } elseif (strpos($initial_path, "people/moderators") === 0) {
      $path = 'people/moderators';
    } elseif (strpos($initial_path, "people/recommended") === 0) {
      $path = 'people/recommended';
    } elseif (strpos($initial_path, "asset/experts") === 0) {
      $path = 'asset/experts';
    } else {
      global $user;
      $exploded_path = explode('/', $initial_path);
      if ($exploded_path[0] == 'user' && is_numeric($exploded_path[1])) {
        $path = "user/{$exploded_path[1]}";
      } elseif ($exploded_path[0] == 'node' && $exploded_path[1] == 'add') {
        switch ($exploded_path[2]) {
          case 'federated-forge':
            $path .= 'software/federated_forge';
            break;
          case 'project-release':
            $path .= "release/all";
            break;
          case 'project-issue':
            $path .= "issue/all";
            break;
          case ISA_NEWS_TYPE:
            if (!$group) {
              $path = 'news/news';
              break;
            }
          case ISA_BLOG_TYPE:
            if (!$group) {
              $path = 'news/blog';
              break;
            }
            $path .= 'newsandblog/all';
            break;
          case ISA_TOPIC_TYPE:
            $path .= 'forum/all';
            break;
          case ISA_WIKI_TYPE:
          case ISA_DOCUMENT_TYPE:
          case ISA_PRESENTATION_TYPE:
          case ISA_CASE_TYPE:
          case ISA_FACTSHEET_TYPE:
            $path .= 'elibrary/all';
            break;
          case ISA_EVENT_TYPE:
            $path = 'event/all';
            break;
          case 'contexthelp':
            $path = 'help';
            break;
          case 'contexthelp-faq':
            $path = 'help_topics';
            break;
          case ISA_REPOSITORY_TYPE:
            $path = 'catalogue/repository/all';
            break;
        }
      } else {
        $path = $initial_path;
      }
    }
  }

  if ($path != '') {
    $_GET['q'] = $path;
  }
  $menu_theme = "<h3>$menu_name</h3>" . theme_links($menu);
  $_GET['q'] = $initial_path;
  return $menu_theme;
}

//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
//Home buttons
/**
 * Implement of hook_block()
 * Creation of both blocks menus and buttons
 * @param string $op What kind of information to retrieve about the block or blocks
 * @param integer $delta Which block to return
 * @param array $edit If $op is 'save', the submitted form data from the configuration form.
 * @return array Depending of $op
 */
function isa_links_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['buttons_actions']['info'] = t('Buttons actions');
      $blocks['menus_left']['info'] = t('Menus left');
      $blocks['home_buttons']['info'] = t('Home buttons');
      $blocks['buttons_actions_bottom']['info'] = t('Buttons actions bottom');
      $blocks['download_button']['info'] = t('Download button');
      return $blocks;
      break;
    case 'view':
      if ($delta == 'buttons_actions') {
        $block = isa_links_create_buttons('top');
        return $block;
      } elseif ($delta == 'menus_left') {
        $block = isa_links_create_menus();
        return $block;
      } elseif ($delta == 'home_buttons') {
        $block = isa_links_hb_create_block();
        return $block;
      }elseif ($delta == 'buttons_actions_bottom') {
        $block = isa_links_create_buttons('bottom');
        return $block;
      }elseif ($delta == 'download_button') {
        $block = isa_links_download_button();
        return $block;
      }
  }
}

/**
 * Rewrite theme_links function to resolved W3C error (ul in span)
 */
function isa_links_theme_buttons($links, $attributes = array('class' => 'links'), $fragment=NULL) {
  global $language;
  $output = '';
  if (count($links) > 0) {
    $output = '<ul' . drupal_attributes($attributes) . '>';

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $class = $key;
      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $class .= ' first';
      }
      if ($i == $num_links) {
        $class .= ' last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
        && (empty($link['language']) || $link['language']->language == $language->language)) {
        $class .= ' active';
      }
      $output .= '<li' . drupal_attributes(array('class' => $class)) . '>';
      if('share-this' === $key){
	$output .= $link['title'];
      }else{
	if (isset($link['href'])) {
	  // Pass in $link as $options, they share the same keys.
	  if (isset($link['tooltips'])) {
	    $tooltips = $link['tooltips'];
	  } else {
	    $tooltips = $link['title'];
	  }
	  $link['attributes']['title'] = $tooltips;
	  if (isset($link['target'])) {
	    if (in_array($link['target'], array('_blank'))) {
	      $link['attributes']['target'] = $link['target'];
	      unset($link['target']);
	    }
	  }
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-842 
    //Wrap Button Actions links text with <span>
    $link['html'] = TRUE;
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-974
    //Link to the distribution section 
    $fragment ? $link['fragment'] = $fragment : FALSE;
	  $output .= l('<span>' . $link['title'] . '</span>', $link['href'], $link);
	} elseif (!empty($link['title']) || isset($link['label'])) {
	  // Some links are actually not links, but we wrap these in <span> for adding title and class attributes
	  if (empty($link['html'])) {
	    if (isset($link['label'])) {
	      //case of rate this link
	      $link['title'] = "<label>{$link['label']}</label>" . fivestar_widget_form($link['node']);
	    } else {
	      $link['title'] = check_plain($link['title']);
	    }
	  }
	  $span_attributes = '';
	  if (isset($link['attributes'])) {
	    $span_attributes = drupal_attributes($link['attributes']);
	  }
	  if (isset($link['label'])) {
	    //case of rate this link
	    $output .= $link['title'];
	  } else {
	    $output .= '<div' . $span_attributes . '>' . $link['title'] . '</div>';
	  }
	}
      }

      $i++;
      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }

  return $output;
}

/**
 * Return TRUE if we are not in a virtual forge
 * @return bool
 */
function isa_links_is_not_in_virtual_forge() {
  return !isa_toolbox_is_in_virtual_forge();
}