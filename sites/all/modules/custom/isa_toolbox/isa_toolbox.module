<?php

/**
 * @defgroup isa_toolbox
 * @brief Toolbox for ISA
 * 
 */
/**
 * @file
 * 
 * Modules main file
 * 
 * @ingroup isa_toolbox
 */
define('MAX_DISPLAY_FILENAME_WIDTH', 60);
define('ISA_NEWS_TYPE', 'news'); /// Name of the content type used for news
define('ISA_COMMUNITY_TYPE', 'community'); /// Name of the content type used for communities
define('ISA_SOFTWARE_TYPE', 'software'); /// Name of the content type used for software
define('ISA_ASSET_TYPE', 'asset'); /// Name of the content type used for asset
define('ISA_PROJECT_TYPE', 'project_project'); /// Name of the content type used for project
define('ISA_FEDERATED_PROJECT_TYPE', 'federated_project'); /// Name of the content type used for federated project
define('ISA_FEDERATED_FORGE_TYPE', 'federated_forge'); /// Name of the content type used for federated forge
define('ISA_TOPIC_TYPE', 'topic'); /// Name of the content type used for topic
define('ISA_ISSUE_TYPE', 'project_issue'); /// Name of the content type used for project_issue
define('ISA_DOCUMENT_TYPE', 'document'); /// Name of the content type used for document
define('ISA_CASE_TYPE', 'case'); /// Name of the content type used for case
define('ISA_EVENT_TYPE', 'event'); /// Name of the content type used for event
define('ISA_FACTSHEET_TYPE', 'factsheet'); /// Name of the content type used for factsheet
define('ISA_PROJECT_RELEASE_TYPE', 'project_release'); /// Name of the content type used for release
define('ISA_NEWSLETTER_TYPE', 'newsletter'); /// Name of the content type used for newsletter
define('ISA_BLOG_TYPE', 'blog'); /// Name of the content type used for blog
define('ISA_VIDEO_TYPE', 'video'); /// Name of the content type used for video
define('ISA_WIKI_TYPE', 'wiki'); /// Name of the content type used for wiki
define('ISA_PRESENTATION_TYPE', 'presentation'); ///Name of the content type used for presentation
define('ISA_LEGALDOCUMENT_TYPE', 'legaldocument'); ///Name of the content type used for legal document
define('ISA_ASSET_RELEASE_TYPE', 'asset_release'); ///Name of the content type used for asset release
define('ISA_REPOSITORY_TYPE', 'repository'); ///Name of the content type used for repository
define('ISA_LICENCE_TYPE', 'licence'); ///Name of the content type used for licence
define('ISA_PUBLISHER_TYPE', 'publisher'); ///Name of the content type used for publisher
define('ISA_DISTRIBUTION_TYPE', 'distribution'); ///Name of the content type used for distribution
define('ISA_CONTACT_POINT_TYPE', 'contact_point'); ///Name of the content type used for contact point
define('ISA_DOCUMENTATION_TYPE', 'documentation'); ///Name of the content type used for documentation
define('ISA_ITEM_TYPE', 'item'); ///Name of the content type used for item
// WORKFLOW RELEASE STATES ID //
define("ISA_SID_RELEASE_APPROVED", '41'); /// State id approved of asset release workflow
define("ISA_SID_RELEASE_REQUESTED", '40'); /// State id requested of asset release workflow
define("ISA_SID_RELEASE_VALIDATED", '39'); /// State id validated of asset release workflow
define("ISA_SID_RELEASE_PROPOSED", '37'); /// State id proposed of asset release workflow
define("ISA_SID_RELEASE_DRAFT", '36'); /// State id draft of asset release workflow
define("ISA_SID_ASSET_REQUEST_DELETED", '50'); ///State in request deletion of asset release workflow
// WORKFLOW NEWS STATES ID //
define("ISA_SID_NEWS_SUSPENDED", '5'); /// State id suspended of news workflow
define("ISA_SID_NEWS_VALIDATED", '4'); /// State id validated of news workflow
define("ISA_SID_NEWS_DRAFT", '3'); /// State id draft of news workflow
define("ISA_SID_NEWS_PROPOSED", '2'); /// State id proposed of news workflow
define("ISA_SID_NEWS_CREATION", '1'); /// State id creation of news workflow
define('ISA_SID_NEWS_CREATED', '21'); /// State id created of news workflow
define('ISA_SID_NEWS_REQUEST_PUBLICATION', '22'); /// State id request publication of news workflow
define('ISA_SID_NEWS_PUBLISHED', '23'); /// State id published of news workflow
// WORKFLOW COMMUNITY STATES ID //
define("ISA_SID_COMMUNITY_REJECTED", '10'); /// State id rejected of community workflow
define("ISA_SID_COMMUNITY_VALIDATED", '9'); /// State id validated of community workflow
define("ISA_SID_COMMUNITY_DRAFT", '7'); /// State id draft of community workflow
define("ISA_SID_COMMUNITY_PROPOSED", '8'); /// State id proposed of community workflow
define("ISA_SID_COMMUNITY_CREATION", '6'); /// State id creation of community workflow
// WORKFLOW ASSET RELEASE STATES ID //
define("ISA_SID_ASSET_VALIDATED", '39'); /// State id validated of asset workflow
define("ISA_SID_ASSET_DRAFT", '36'); /// State id draft of asset workflow
define("ISA_SID_ASSET_PROPOSED", '37'); /// State id proposed of asset workflow
define("ISA_SID_ASSET_CREATION", '35'); /// State id creation of asset workflow
define("ISA_SID_ASSET_ASSESSMENT", '40'); /// State id proposed of asset workflow
define("ISA_SID_ASSET_ASSESSED", '41'); /// State id creation of asset workflow
define("ISA_SID_ASSET_SUSPENDED", '38'); /// State id creation of asset workflow
define("ISA_SID_ASSET_BLACKLISTED", '52'); ///state id blacklisted of asset workflow
// WORKFLOW FEDEDERATED PROJECTS STATES ID //
define("ISA_SID_FEDPROJ_PUBLISHED", '15'); /// State id published of federated projects workflow
define("ISA_SID_FEDPROJ_CREATED", '14'); /// State id created of federated projects workflow
define("ISA_SID_FEDPROJ_CREATION", '13'); /// State id creation of federated projects workflow
// WORKFLOW LEGAL DOCUMENTS STATES ID //
define("ISA_SID_LEGALDOC_DRAFT", '33'); /// State id published of federated projects workflow
define("ISA_SID_LEGALDOC_VALIDATED", '34'); /// State id created of federated projects workflow
// WORKFLOW REPOSITORY STATES ID //
define("ISA_SID_REPOSITORY_DRAFT", '43'); // State id draft of repository workflow
define("ISA_SID_REPOSITORY_PROPOSED", '44'); // State id proposed of repository workflow
define("ISA_SID_REPOSITORY_VALIDATED", '45'); // State id validated of repository workflow
define("ISA_SID_REPOSITORY_SUSPENDED", '46'); // State id suspended of repository workflow
define("ISA_SID_REPOSITORY_REQUESTED_DELETION", '47'); // State id requested deletion of repository workflow
define("ISA_SID_REPOSITORY_POSTPONED_DELETION", '48'); // State id postponed deletion of repository workflow
define("ISA_SID_REPOSITORY_REJECTED_DELETION", '49'); // State id rejected deletion of repository workflow

define('ISA_UPDATE_VF_USERS_ROLES_TIME', '86400'); /// 24h

define('WEB_DIR_PUBLIC_ACCESS_ENABLED', 'enabled'); /// value for the web directory public access enabled
define('WEB_DIR_PUBLIC_ACCESS_DISABLED', 'disabled'); /// value for the web directory public access disabled
define('WEB_DIR_STATUS_TODO', 'todo'); /// value for the web directory public access disabled
define('WEB_DIR_STATUS_DONE', 'done'); /// value for the web directory public access disabled
define('WEB_DIR_STATUS_FAILED', 'failed'); /// value for the web directory public access disabled
define('ISA_URI_TRIM_CHARS', '/?#'); // value to trim the URI in order to avoid missing equal URIs

define('ISA_VID_PUBLISHER_TYPE', '72'); // taxonomy publisher type 
define('ISA_VID_LICENCE_TYPE', '75'); // taxonomy licence type 
define('ISA_VID_PACKAGE_TYPE', '10'); // taxonomy package type

define('ISA_RID_RELEASE_MANAGER', '17'); // role id project release manager

/**
 * Implement of hook_perm()
 */
function isa_toolbox_perm() {
    return (
            array(
                'View any keywords/tags',
                'administer ISA', // permission granted to the "administrator" role
                'Assets Assistants', // permission granted to use the asset asssistant
                'administer ISA mails', // permission granted to the "administrator" role
                'access software list', // permission granted to the "administrator" role
                'Comment form: Edit issue settings', //permission granted to the developer, administrator roles
                'View profile privacy fields', //permission granted to the administrator and moderator roles
                'manage users',
                'edit release project',
                'create release project',
            )
            );
}

/**
 * Checks to see if a user is allowed to access a community.
 * Affects community details and community quick links blocks
 * @param node $node Group node
 * @return bool Returns TRUE if user is allowed to access the community
 */
function isa_toolbox_check_community_access($node) {
    $member = og_is_group_member($node->nid);
    if ($member) {
        return TRUE;
    } else {
        $ok = $node->status;
        if ($ok)
            $ok = (!$node->og_private);
        return $ok;
    }
}

/**
 * Changes a node's taxonomy from VID - TID to an array with vocab names as key
 * and a full list of terms as value (a string, not an array)
 * @param node $node The affected node
 */
function isa_toolbox_create_taxonomy_list(&$node, $include = NULL, $linked = FALSE, $to_be_completed = FALSE) {
    if ($include == NULL) {
        $include = array(variable_get('domains_vid', NULL), variable_get('languages_vid', NULL));
    }

    $taxonomies = array();
    $taxonomies_by_id = array();
    $all_taxonomies = array_flip($include);
    if ($node->taxonomy && !empty($node->taxonomy)) {
        foreach ($node->taxonomy as $tid => $value) {
            $vocab = taxonomy_vocabulary_load($value->vid);
            if (in_array($vocab->vid, $include)) { // Check to make sure no unwanted vocabs appear in the list
                if (!isset($taxonomies[$vocab->name])) {
                    $taxonomies[$vocab->name] = array();
                    $taxonomies_by_id[$vocab->name] = array();
                }
                $term_name = isa_toolbox_get_term_name($tid);

                if ($linked) {
                    $taxonomies[$vocab->name][] = l($term_name, "taxonomy/terms/{$tid}");
                } else {
                    $taxonomies[$vocab->name][] = $term_name;
                }
                unset($all_taxonomies[$vocab->vid]);
            }
        }
        foreach ($taxonomies as $term_name => $value) {
            $taxonomies[$term_name] = implode(", ", $value);
        }
    } else {
        $taxonomies = array();
    }
    if ($to_be_completed && count($all_taxonomies) > 0) {
        foreach ($all_taxonomies as $vid => $value) {
            $voc = taxonomy_vocabulary_load($vid);
            //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-793
            //Remove 'To be completed' by an empty string when a fields is missing
            $taxonomies[$voc->name] = '';
        }
    }
    $node->taxonomy_terms = $taxonomies;
}

/**
 *
 * @param type $node 
 */
function isa_toolbox_get_user_country(&$node) {
    $country_vid = variable_get('country_vid', NULL);
    foreach ($node->taxonomy as $tid => $value) {
        if ($value->vid == $country_vid) {
            $vocab = taxonomy_vocabulary_load($value->vid);
            $node->country = isa_toolbox_get_term_name($tid);
        }
    }
}

/**
 * Returns the term's name, based on a given term ID.
 * Can be replaced by a proper Drupal function if one exists. Couldn't find one, so wrote this.
 * @param int $tid
 * @return string term name
 */
function isa_toolbox_get_term_name($tid) {
    $sql = "SELECT name FROM {term_data} WHERE tid = %d";
    $term = db_result(db_query($sql, $tid));
    return $term;
}

/**
 * Implement hook_user().
 */
function isa_toolbox_user($op, &$edit, &$account, $category = NULL) {
    switch ($op) {
        case 'load':

            $profile = content_profile_load('profile', $account->uid);
            if ($profile) {
                $picture = isa_toolbox_picture_fix($profile, 'profile_photo');
            }
            $account->picture = $picture;
        //link kudos
        case 'view':
            $account->content['userpoints']['what'] = array(
                '#type' => 'user_profile_item',
                '#title' => l(t('What are Kudos?'), isa_toolbox_get_kudos_page()),
            );
            break;
        case 'delete':
            //drupal_goto ('<front>');
            break;
    }
}

/**
 * Gets a given profile's photo and processes it using its Imagecache settings
 * @param object $profile node object
 * @param string $preset the preset that should be loaded
 * @return string picture path
 */
function isa_toolbox_picture_fix($profile, $preset = 'field_photo') {
    if (isset($profile->field_photo['0'])) {
        $path = $profile->field_photo['0']['filepath'];
    } else {
        $picture = isa_toolbox_default_imagefield('field_photo', 'profile');
        $path = $picture['filepath'];
    }
    $picture = theme_imagecache($preset, $path, $profile->field_firstname[0]['value'] . ' ' . $profile->field_lastname[0]['value']);

    //$picture['#item'] = $picture;
    //$picture = theme_imagecache_formatter_default($picture);
    //$picture = str_replace('imagecache//', 'imagecache/profile_photo/', $picture);
    return $picture;
}

/**
 * Implement hook_nodeapi().
 */
function isa_toolbox_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
    switch ($op) {
        case 'insert':
            switch ($node->type) {
                case 'profile':
                    $node->language = 'en';
                    break;
            }
        case 'presave':
            switch ($node->type) {
                case 'advertisement':
                    $node->field_image[0]['data']['alt'] = $node->title;
                    $node->field_image[0]['data']['title'] = $node->title;
                    break;
            }
            break;
        case 'load':
            switch ($node->type) {
                case 'profile':
                    $picture = isa_toolbox_picture_fix($node, 'profile_photo');
                    $node->picture = $picture;
                    break;
                case ISA_PROJECT_TYPE:
                    if ($node->field_project_common_type[0]['value'] == '1') {
                        $node->group_type = ISA_SOFTWARE_TYPE;
                    } else {
                        $node->group_type = ISA_ASSET_TYPE;
                    }
                    break;
                case ISA_COMMUNITY_TYPE:
                    $node->group_type = ISA_COMMUNITY_TYPE;
                    break;
                case ISA_FEDERATED_PROJECT_TYPE:
                    $node->group_type = 'federatedproject';
                    break;
                case ISA_REPOSITORY_TYPE:
                    $node->group_type = ISA_REPOSITORY_TYPE;
            }
            break;
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
        //Add field "Name" [field_asset_name] and  Description [field_asset_description] to search index
        case 'update index':
            if (isset($node->field_asset_name) and 0 < count($node->field_asset_name)) {
                foreach ($node->field_asset_name as $key => $value) {
                    $extra .= $value['value']['field_language_textfield_name'][0]['value'] . " ";
                }
            }
            if (isset($node->field_asset_description) and 0 < count($node->field_asset_description)) {
                foreach ($node->field_asset_description as $key => $value) {
                    $extra .= $value['value']['field_language_textarea_name'][0]['value'] . " ";
                }
            }
            return $extra;
            break;
    }
}

/**
 * Gets the current group's NID
 * @param $node : Node of which you want to know the group nid
 * @return int Current group's NID ou group NID from the given node
 */
function isa_toolbox_get_community_nid($node = NULL) {
    if ($node == NULL) {
        $node = og_get_group_context();
        if (isset($node)) {
            return $node->nid;
        } else {
            $nid = isa_og_helper_get_group_nid();
        }
    } elseif ($node->type == 'project_issue') {
        $nid = $node->project_issue['pid'];
    } elseif ($node->type == 'project_release') {
        $nid = $node->project_release['pid'];
    } else {
        if (isset($node->og_groups)) {
            $nid = array_shift(array_keys($node->og_groups));
        }
    }
    return $nid;
}

/**
 * Gets the path of the current page
 * @return array containing all path data
 */
function isa_toolbox_get_path() {
    $path = $_GET['q'];
    $path = menu_get_item($path);
    return $path;
}

/**
 * Return a complete link for a activity (example when content has changed)
 * @param type $node
 * @return String a path link 
 */
function isa_toolbox_activity_path($node) {
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
    //Forced for don�t seek the alias and write the original url
    return l($node->title, "node/" . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
}

/**
 * Implement of hook_token_values()
 */
function isa_toolbox_token_values($type, $object = NULL, $options = array()) {
    $values = array();
    $gid = NULL;

    if ($type == 'global') {
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
        //Forced for don�t seek the alias and write the original url
        $values['contact_admin_url'] = url('contact', array('absolute' => TRUE, 'alias' => TRUE));
    } elseif ($type == 'node') {
        $node = $object;
        $path = explode('/', $node->path);
        $values['isa_node_type'] = strtolower(check_plain(node_get_types('name', $node)));
        $values['isa_node_link'] = isa_toolbox_activity_path($node);
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
        //Forced for don�t seek the alias and write the original url
        $values['node_revisions_url'] = l($node->title, "node/{$node->nid}/revisions", array('absolute' => TRUE, 'alias' => TRUE));
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
        //Forced for don�t seek the alias and write the original url
        $values['isa_node_add_or_register'] = 'has created'; //by default (use in activity monitoring)
        $values['news_workflow_url'] = l($node->title, "node/{$node->nid}/workflow", array('absolute' => TRUE, 'alias' => TRUE));
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
        //Forced for don�t seek the alias and write the original url
        $values ['node-edit-url'] = l($node->title, "node/{$node->nid}/edit", array('absolute' => TRUE, 'alias' => TRUE));

        switch ($node->type) {
            case ISA_CASE_TYPE:
                switch (isa_toolbox_get_case_type($node)) {
                    case 0 : $values['isa_path_cases'] = 'elibrary/case';
                        break;
                    case 1 : $values['isa_path_cases'] = 'software/studies';
                        break;
                    case 2 : $values['isa_path_cases'] = 'software/guidelines';
                        break;
                }
            case ISA_NEWS_TYPE:
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url
                $values['news_url'] = l($node->title, "node/{$node->nid}"/* $node->path"news/{$node->nid}" */, array('absolute' => TRUE, 'alias' => TRUE));
                break;
            case ISA_CASE_TYPE:
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url	  
                $values['case_url'] = l($node->title, "node/{$node->nid}"/* $node->path"node/{$node->nid}" */, array('absolute' => TRUE, 'alias' => TRUE));
                break;
            case ISA_DOCUMENT_TYPE:
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url	  
                $values['document_url'] = l($node->title, "node/{$node->nid}"/* $node->path"node/{$node->nid}" */, array('absolute' => TRUE, 'alias' => TRUE));
                break;
            case ISA_EVENT_TYPE:
                break;
            case ISA_COMMUNITY_TYPE:
            case ISA_REPOSITORY_TYPE:
                $gid = $node->nid;
                $group = node_load($gid);
                $group->group_type = $node->type;
                $values['isa_node_type'] = $node->type;
                break;
            case ISA_PROJECT_TYPE:
                $gid = $node->nid;
                $group = node_load($gid);
                if ($group->field_project_common_type[0]['value'] == '1') {
                    $group->group_type = ISA_SOFTWARE_TYPE;
                    $values['isa_node_type'] = 'software';
                    // used in activity monitoring
                    $values['isa_node_add_or_register'] = 'has registered';
                } elseif ($node->field_project_common_type[0]['value'] == '0') {
                    $group->group_type = ISA_ASSET_TYPE;
                    $values['isa_node_type'] = 'semantic asset';
                }
                break;
            case ISA_ISSUE_TYPE:
                if (isset($node->project_issue)) {
                    $gid = $node->project_issue['pid'];
                } elseif (isset($node->pid) && is_numeric($node->pid)) {
                    $gid = $node->pid;
                }
                $values['isa_node_type'] = 'issue';
                break;
            case ISA_ASSET_RELEASE_TYPE:
            case ISA_PROJECT_RELEASE_TYPE:
                $gid = ($node->type == ISA_PROJECT_RELEASE_TYPE) ? $node->project_release['pid'] : $node->og_groups[0];
                if ($gid) {
                    $group = node_load($gid);
                    $values['dl_project_title'] = $group->title;
                } else {
                    $values['dl_project_title'] = $node->title;
                }
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url		
                $values['release_url'] = l($node->title, $node->path, array('absolute' => TRUE, 'alias' => TRUE));
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url
                $values['survey_url'] = l($node->title . " survey", "{$node->path}/survey", array('absolute' => TRUE, 'alias' => TRUE));
                $values['isa_node_type'] = 'release';
                $values['comment_deletion'] = $node->comment_deletion;
                break;
            case 'profile':
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url	  
                $values['author_linked'] = l($node->field_firstname[0]['value'] . ' ' . $node->field_lastname[0]['value'], 'people/' . $node->uid, array('absolute' => TRUE, 'alias' => TRUE));
                $values['author_firstname'] = $node->field_firstname[0]['value'];
                $values['author_lastname'] = $node->field_lastname[0]['value'];
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
                //Forced for don�t seek the alias and write the original url		
                $values['isa_long_name_linked'] = l($node->field_firstname[0]['value'] . " " . $node->field_lastname[0]['value'], "people/$node->uid", array('absolute' => TRUE, 'alias' => TRUE));
                $values['profile_company'] = $node->field_company_name[0]['value'];
                break;
            case ISA_NEWSLETTER_TYPE:
                $values ['newsletter_body'] = $node->body;
                $values ['newsletter_title'] = check_plain($node->title);
                isa_toolbox_create_taxonomy_list($node);
                $domains = taxonomy_vocabulary_load(variable_get('domains_vid', NULL));
                if ($node->taxonomy_terms[$domains->name]) {
                    $values ['newsletter_domains'] = t('Themes : ') . $node->taxonomy_terms[$domains->name];
                } else {
                    $values ['newsletter_domains'] = '';
                }
                break;
        }

        // get the gid
        if (og_is_group_post_type($node->type) || og_is_wiki_type($node->type)) {
            if ($node->og_groups) {
                $gid = array_shift(array_keys($node->og_groups));
            }
        }
        if ($gid) {
            if (!$group) {
                $group = node_load($gid);
            }
            if (isset($group->group_type)) {
                $values['isa_group_type'] = $group->group_type;
                if ($group->group_type == ISA_COMMUNITY_TYPE) {
                    $values['isa_short_name'] = $group->field_community_short_name[0]['value'];
                } else {
                    $values['isa_short_name'] = $group->project['uri'];
                }
            }

            $values['community_description'] = $group->body;
            isa_toolbox_create_taxonomy_list($group);
            $domains = taxonomy_vocabulary_load(variable_get('domains_vid', NULL));
            $languages = taxonomy_vocabulary_load(variable_get('languages_vid', NULL));
            $values['community_domains'] = $group->taxonomy_terms[$domains->name];
            $values['community_languages'] = $group->taxonomy_terms[$languages->name];
            $values['community_privacy'] = (($group->og_selective == OG_OPEN) ? 'Public' : 'Private');
            //$values['community_workflow_url'] = l($group->title, "node/{$group->nid}/workflow", array('absolute' => TRUE));
            // $values['community_overview_url'] = l($group->title, "node/" . $group->nid /* $node->path"{$node->group_type}/{$node->nid}/home" */, array('absolute' => TRUE));
            //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
            //Forced for don�t seek the alias and write the original url
            $values['community_manage_members_url'] = l($group->title, "{$path[0]}/{$path[1]}/members/edit", array('absolute' => TRUE, 'alias' => TRUE));
            //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
            //Forced for don�t seek the alias and write the original url
            $values['group_url'] = ($group->type == ISA_REPOSITORY_TYPE) ? $values['isa_node_link'] : l($group->title,
                            /* "{$group->group_type}/{$values['isa_short_name']}/home" */ "node/{$group->nid}", array('absolute' => TRUE, 'alias' => TRUE));
            $values['group_abstract'] = $group->og_description;
        }
        //ADD LCT, tocken for node autopath
        $values['isa_node_path_prefix'] = "";
        if ($node->type == ISA_ASSET_RELEASE_TYPE) {
            if (isset($values['isa_group_type']) && $values['isa_group_type'] == ISA_ASSET_TYPE) {
                $values['isa_node_path_prefix'] = "{$values['isa_group_type']}/{$values['isa_short_name']}/";
            } else {
                $values['isa_node_path_prefix'] = "catalogue/";
            }
        } else {
            if (isset($values['isa_group_type'])) {
                $values['isa_node_path_prefix'] = "{$values['isa_group_type']}/{$values['isa_short_name']}/";
            } elseif ($node->type == ISA_DOCUMENT_TYPE) {
                $values['isa_node_path_prefix'] = "elibrary/";
            }
        }
    } elseif ($type == 'workflow') {
        $node = $object;
        $sql = "SELECT h.sid, u.uid FROM {workflow_node_history} h LEFT JOIN {users} u ON h.uid = u.uid WHERE nid = %d AND h.sid = %d ORDER BY stamp DESC";
        $history_requested = db_fetch_object(db_query_range($sql, $node->nid, ISA_SID_NEWS_REQUEST_PUBLICATION, 0, 1));
        if ($history_requested->uid) {
            $profile = content_profile_load('profile', $history_requested->uid);
            $values ['request-publication-lastname'] = $profile->field_lastname[0]['value'];
            $values ['request-publication-firstname'] = $profile->field_firstname[0]['value'];
            //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
            //Forced for don�t seek the alias and write the original url
            $values ['node-edit-url'] = l($node->title, "node/{$node->nid}/edit", array('absolute' => TRUE, 'alias' => TRUE));
        }
    } elseif ($type == 'user') {
        if ($object) {
            $values ['isa_username_linked'] = theme("username", $object->uid);
            $profile = content_profile_load('profile', $object->uid);
            $values ['isa_profile_nid'] = $profile->nid;
        }
    } elseif ($type == 'comment') {
        $node = node_load($object['nid']);
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-745
        //Forced for don�t seek the alias and write the original url
        $values ['isa_comment_link'] = l($object['subject'], "node/{$node->nid}"/* $node->path */, array('absolute' => TRUE, 'alias' => TRUE, 'fragment' => 'comment-' . $object['cid']));
    }
    return $values;
}

/**
 * implementat hook_token_list()
 */
function isa_toolbox_token_list($type = 'all') {
    if ($type == 'node' || $type == 'all') {
        $tokens['ISA custom']['news_workflow_url'] = t('Node url for "news worflow"');
        $tokens['ISA custom']['node_revisions_url'] = t('Node url for "revisions"');
        $tokens['ISA custom']['community_description'] = t('Community descritpion');
        $tokens['ISA custom']['community_domains'] = t('Community themes');
        $tokens['ISA custom']['community_languages'] = t('Community languages');
        $tokens['ISA custom']['community_privacy'] = t('Community privacy');
        // $tokens['ISA custom']['community_workflow_url'] = t('Community workflow url');
        $tokens['ISA custom']['community_manage_members_url'] = t('Community manage members url');
        // $tokens['ISA custom']['community_overview_url'] = t('Community overview url');
        $tokens['ISA custom']['wiki_url'] = t('url for view the wiki');
        $tokens['ISA custom']['topic_url'] = t('url for view the topic');
        $tokens['ISA custom']['news_url'] = t('url for view the news');
        $tokens['ISA custom']['document_url'] = t('url for view the document');
        $tokens['ISA custom']['recipient-firstname'] = t("Firstname of the current user");
        //$tokens['ISA custom']['community_node type'] = t('Community node type');
        $tokens['ISA custom']['isa_group_type'] = t('Group type');
        // token project_in_vf is set in isa_workflow_community and isa_workflow_mail
        $tokens['ISA custom']['project_in_vf'] = t('Project is created in virtual forge');
        $tokens['ISA custom']['author_linked'] = t('Firstname and lastame linked to the author');
        $tokens['ISA custom']['author_firstname'] = t('Firstname of the user');
        $tokens['ISA custom']['author_lastname'] = t('Lastname of the user');
        $tokens['ISA custom']['profile_company'] = t('Company name of the user profile');
        $tokens['ISA custom']['group_url'] = t('The title of group linked to homepage');
        $tokens['ISA custom']['release_url'] = t('The title of release linked to homepage');
        $tokens['ISA custom']['newsletter_title'] = t('The newsletter title');
        $tokens['ISA custom']['newsletter_body'] = t('The newsletter body');
        $tokens['ISA custom']['newsletter_domains'] = t('Newsletter themes');
        $tokens['ISA custom']['survey_url'] = t('Survey URL');
        $tokens['ISA custom']['dl_project_title'] = t('Downloaded project title');
        $tokens['ISA custom']['request-publication-lastname'] = t('The lastname of the user who requested publication');
        $tokens['ISA custom']['request-publication-firstname'] = t('The firstname of the user who requested publication');
        $tokens['ISA custom']['node-edit-url'] = t('Node edition form url');
        $tokens['ISA custom']['isa_node_type'] = t('Node type formated');
        $tokens['ISA custom']['isa_node_add_or_register'] = t('Node action formated');
        $tokens['ISA custom']['isa_short_name'] = t('Node short name formated');
        $tokens['ISA custom']['isa_node_path_prefix'] = t('Node path prefix depending of the group context');
        $tokens['ISA custom']['isa_node_link'] = t('Link to the node or to group homepage (if on a group)');
        $tokens['ISA custom']['isa_long_name_linked'] = t('Link to user long name)');
        $tokens['ISA custom']['isa_path_cases'] = t('Part of the path for guidelines/case studies');
        $tokens['ISA custom']['group_approval_info'] = t('The addintionnal text for emails when group is approved');
        $tokens['ISA custom']['comment_deletion'] = t('the comment for the asset release deletion');
    } elseif ($type == "user" || $type == "all") {
        $tokens['ISA custom']['isa_username_linked'] = t('firstname lastname link');
        $tokens['ISA custom']['isa_profile_nid'] = t('The user profile id');
    } elseif ($type == 'comment') {
        $tokens['ISA custom']['isa_comment_link'] = t('Comment link');
    } elseif ($type = 'global') {
        $tokens['ISA custom']['contact_admin_url'] = t('Url to contact form');
    }
    return $tokens;
}

/**
 * Loads the default image of a field, based on field name and content type
 * @param string $field of the field we want the default image for
 * @param string $content_type of the content type we want the default image for
 * @return array Picture array, structured like a CCK image field
 */
function isa_toolbox_default_imagefield($field, $content_type) {
    $sql = 'SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = "%s" && type_name = "%s"';
    $result = db_result(db_query($sql, $field, $content_type));
    $data = unserialize($result);
    return $data['default_image'];
}

/**
 * Checks if a string is empty
 * @param string The string to check
 * @return bool TRUE if string is empty, FALSE otherwise
 */
function empty_string($string) {
    return (!drupal_strlen(trim($string)));
}

/**
 * Checks if a user is admin or not
 * @param object $user object to check. If empty, the current user is used
 * @return bool TRUE if user is admin, FALSE otherwise
 */
function isa_toolbox_is_omnipotent($user = NULL) {

    if (is_null($user)) {
        $user = $GLOBALS['user'];
    }
    if ($user->uid == '1') {
        return TRUE;
    }

    $omnipotent = user_access('administer ISA', $user);
    return ($omnipotent);
}

/**
 * Adds user roles to a given group to the referenced array of user objects
 * @param array $users_array Array of users objects, keyed by their uid. These objects
 *   will get an og_groups attribute, actually an array listing the roles of
 *   each user within the given group. This array is keyed by role id.
 * @param int $gid The group node id
 * @return bool FALSE if something went wrong, TRUE otherwise
 * @see og_user_roles_grant_roles()
 */
function isa_toolbox_get_users_og_roles(&$users_array, $gid) {
    if (!is_array($users_array) || !is_numeric($gid)) {
        return (FALSE);
    }

    if (empty($users_array)) {
        return (TRUE);
    }

// initialize the og_roles attribute of each user object
    foreach ($users_array as $uid => $users) {
        $users_array[$uid]->og_roles = array();
    }

// fetch the user/roles associations for the given gid
    $sql_query = sprintf(
            'SELECT ogur.uid, ogur.rid, r.name
    FROM {og_users_roles} ogur
    INNER JOIN {role} r
    ON r.rid = ogur.rid
    WHERE ogur.uid IN(%s)
    AND ogur.gid = %%d', db_placeholders(array_keys($users_array))
    );
    $sql_args = array_keys($users_array);
    array_push($sql_args, $gid);
    $result = db_query($sql_query, $sql_args);

// associate roles and users
    while ($role = db_fetch_object($result)) {
        if (isset($users_array[$role->uid])) {
            $users_array[$role->uid]->og_roles[$role->rid] = $role->name;
        }
    }

    return (TRUE);
}

/**
 * Implement of hook_menu()
 */
function isa_toolbox_menu() {
    $items = array();

    //define the path for the admin message page
    $items['admin/infobox'] = array(
        'title' => 'Admin infobox',
        'description' => 'ISA custom modules',
        'access arguments' => array('administer nodes'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('isa_toolbox_admin_infobox_page'),
        'type' => MENU_CALLBACK,
    );
// Defines the menu for the ISA custom modules configuration
    $items['admin/isa'] = array(
        'title' => 'ISA',
        'description' => 'ISA custom modules',
        'access arguments' => array('administer ISA'),
        'page callback' => 'system_admin_menu_block_page',
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'weight' => 50,
    );
//define the menu for manage isa mails
    $items['admin/isa/mail'] = array(
        'title' => 'Template Mails',
        'description' => 'Manage the template mails from ISA custom modules',
        'access arguments' => array('administer ISA mails'),
        'page callback' => 'system_admin_menu_block_page',
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'weight' => 0,
    );
    //define the menu for software list
    $items['software/all'] = array(
        'title' => 'Software',
        'description' => 'Software List',
        'access arguments' => array('access software list'),
        'page callback' => 'isa_toolbox_get_software_page',
        'weight' => -48,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'primary-links',
    );
    //define the menu for "My Page"
    $items['people/mypage'] = array(
        'title' => 'My Page',
        'description' => 'My Page',
        'access callback' => 'isa_toolbox_my_page_access',
        'page callback' => 'isa_toolbox_my_page',
        'weight' => -49,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'primary-links',
    );
    //define the menu for isa homepage
    $items['homepage'] = array(
        'title' => 'Home',
        'access arguments' => array('access content'),
        'page callback' => 'isa_toolbox_get_homepage',
        'weight' => -100,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'primary-links',
    );
    //define the path for manage the static texts in ISA
    $items['admin/isa/isa_static_texts'] = array(
        'title' => 'Manage static texts',
        'description' => 'Manage the static texts of ISA',
        'access arguments' => array('administer nodes'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('isa_toolbox_static_texts_form'),
        'weight' => 0,
            //'type' => MENU_LOCAL_TASK,
    );
    //define the path for manage template mail of simple news module
    $items['admin/isa/mail/newsletters'] = array(
        'title' => 'Newsletters',
        'description' => 'Manage template mail for newsletters',
        'access arguments' => array('administer ISA mails'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('isa_toolbox_newsletters_template_mail'),
        'weight' => 0,
            //'type' => MENU_LOCAL_TASK,
    );
    //define the path for manage template mail for all mails
    $items['admin/isa/mail/all_emails'] = array(
        'title' => 'All mails',
        'description' => 'Manage templates mails',
        'access arguments' => array('administer ISA mails'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('isa_toolbox_all_mails_template_mail'),
        'weight' => 0,
            //'type' => MENU_LOCAL_TASK,
    );
    //define the path for the subscriptions page (to display subscriptions options in a popup
    $items['node/%/subscribe'] = array(
        'title' => 'Subscriptions',
        'description' => 'Subscriptions options for current page',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('subscriptions_ui_node_form', 1),
        'access callback' => 'isa_toolbox_subscribe',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
    );

    $items['community/%/home'] = array(
        'title' => 'Community',
        'page callback' => 'empty_page',
        'access callback' => TRUE,
    );
    $items['asset/%/home'] = array(
        'title' => 'Semantic asset',
        'page callback' => 'empty_page',
        'access callback' => TRUE,
    );
    $items['software/%/home'] = array(
        'title' => 'Software project',
        'page callback' => 'empty_page',
        'access callback' => TRUE,
    );
    //define the path for the export page
    $items['asset_release/exportADMS/%'] = array(
        'title' => 'Export ADMS',
        'description' => 'ISA custom modules',
        //'access arguments' => array('administer nodes'),
        'access callback' => TRUE,
        'page callback' => 'isa_toolbox_admin_export_page',
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );
    //define the path for the export page
    $items['catalogue/repository/%/rdf'] = array(
        'title' => 'Export ADMS',
        'description' => 'ISA custom modules',
        //'access arguments' => array('administer nodes'),
        'access callback' => TRUE,
        'page callback' => 'isa_toolbox_admin_export_page_alias',
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );
    //define the path for the export page
    $items['catalogue/asset_release/%/rdf'] = array(
        'title' => 'Export ADMS',
        'description' => 'ISA custom modules',
        //'access arguments' => array('administer nodes'),
        'access callback' => TRUE,
        'page callback' => 'isa_toolbox_admin_export_page_alias',
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );
    //define the path for the export page
    $items['asset/%/rdf'] = array(
        'title' => 'Export ADMS',
        'description' => 'ISA custom modules',
        //'access arguments' => array('administer nodes'),
        'access callback' => TRUE,
        'page callback' => 'isa_toolbox_admin_export_page_alias',
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );
    //define the path for the export page
    $items['asset/%/asset_release/%/rdf'] = array(
        'title' => 'Export ADMS',
        'description' => 'ISA custom modules',
        //'access arguments' => array('administer nodes'),
        'access callback' => TRUE,
        'page callback' => 'isa_toolbox_admin_export_page_alias',
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 *
 * @param <type> $node :current node
 * @return <boolean> True if the subscribe link should be accessible
 */
function isa_toolbox_subscribe($node) {
    // don't display the "Subscribe" link for license wizard wiki pages
    $path_alias = explode('/', $node->path);
    if ($path_alias[1] == 'license-wizard')
        return FALSE;

    if (is_numeric($node)) {
        $node = node_load($node);
    }

    $group_types = array(ISA_COMMUNITY_TYPE, ISA_PROJECT_TYPE);
    $is_group = in_array($node->type, $group_types);

    if (!$is_group && subscriptions_content_type_is_blocked($node->type) && !user_access('subscribe to all content types')) {
        return FALSE;
    }

    if ($is_group) {
        if (!og_is_group_member($node->nid) && !isa_toolbox_is_omnipotent()) {
            return FALSE;
        }
    } else {
        $gid = isa_toolbox_get_community_nid($node);
        //if we are in a group the user must be a member to subscribe to content
        if ($gid) {
            if (!og_is_group_member($gid)) {
                return FALSE;
            }
        } else {
            if ($node->_workflow && $node->_workflow != ISA_SID_NEWS_VALIDATED) {
                return FALSE;
            }
        }
    }
    return TRUE;
}

/**
 *
 * @return type 
 */
function empty_page() {
    return ' ';
}

/**
 *
 * @global object $user 
 */
function isa_toolbox_my_page() {
    global $user;
    drupal_goto('people/' . $user->uid);
}

/**
 *
 * @global object $user
 * @return type 
 */
function isa_toolbox_my_page_access() {
    global $user;
    return ($user->uid != 0);
}

/**
 *
 * @return type 
 */
function isa_toolbox_all_mails_template_mail() {
    $form['prefix_subject_mail_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix of mails subject'),
        '#default_value' => variable_get("prefix_subject_mail_title", ""),
        '#description' => t('The prefix of all mails subject.')
    );

    $form['footer_mail_body'] = array(
        '#type' => 'textarea',
        '#title' => t('Footer of the mails body'),
        '#default_value' => variable_get("footer_mail_body", "The [site-name] Team"),
        '#description' => t('he footer of all mails body')
    );
    return system_settings_form($form);
}

/**
 * @ingroup forms
 * 
 * @return type 
 */
function isa_toolbox_newsletters_template_mail() {
    $form['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('node'), TRUE, FALSE),
    );
    $form['newsletters'] = array(
        '#type' => 'fieldset',
        '#title' => t('Newsletters'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['newsletters']['newsletters_mail_body'] = array(
        '#type' => 'textarea',
        '#title' => t('Mail body'),
        '#default_value' => variable_get("newsletters_mail_body", "..."),
        '#description' => t('The body of the message sent to member when newsletter is created')
    );
    $form['newsletters']['newsletters_mail_footer'] = array(
        '#type' => 'textarea',
        '#title' => t('Mail footer'),
        '#default_value' => variable_get("newsletters_mail_footer", "..."),
        '#description' => t('The footer of the message sent to member when newsletter is created')
    );
    return system_settings_form($form);
}

function isa_toolbox_get_homepage() {
    return ' ';
}

/**
 * @ingroup forms
 * @return type 
 */
function isa_toolbox_static_texts_form() {
    $form = array();

    $form['header_block'] = array(
        '#type' => 'fieldset',
        '#title' => t('Header blocks'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    //Text for the header block in asset list
    $form['header_block']['header_block_assets_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('Assets list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_assets_list']['header_block_assets_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_assets_list_title", "title..."),
        '#description' => t('Title for the header block in assets list')
    );
    $form['header_block']['header_block_assets_list']['header_block_assets_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_assets_list_description", "general description..."),
        '#description' => t('General description for the header block in assets list')
    );
    // Text for the header block in e-Library list
    $form['header_block']['header_block_elibrary_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('E-Library list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_elibrary_list']['header_block_elibrary_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_elibrary_list_title", "Title..."),
        '#description' => t('Title for the header block in e-Library list')
    );
    $form['header_block']['header_block_elibrary_list']['header_block_elibrary_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_elibrary_list_description", "General description..."),
        '#description' => t('General description for the header block in e-Library list')
    );

    $form['software_related_projects'] = array(
        '#type' => 'fieldset',
        '#title' => t('Software homepage: related projects block'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['software_related_projects']['related_projects_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Related projects block information'),
        '#default_value' => variable_get("related_projects_information", "description..."),
        '#description' => t('Information for the related projects block from software homepage'),
    );
    // Text for the header block in events calendar
    $form['header_block']['header_block_events_calendar'] = array(
        '#type' => 'fieldset',
        '#title' => t('Events calendar'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_events_calendar']['header_block_events_calendar_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_events_calendar_title", "Title..."),
        '#description' => t('Title for the header block in the events calendar')
    );
    $form['header_block']['header_block_events_calendar']['header_block_events_calendar_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_events_calendar_description", "General description..."),
        '#description' => t('General description for the header block in the events calendar')
    );
    // Text for the header block in "My Page"
    $form['header_block']['header_block_my_page'] = array(
        '#type' => 'fieldset',
        '#title' => t('My Page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_my_page']['header_block_my_page_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_my_page_title", "Title..."),
        '#description' => t('Title for the header block in "My Page"')
    );
    $form['header_block']['header_block_my_page']['header_block_my_page_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_my_page_description", "General description..."),
        '#description' => t('General description for the header block in the events calendar')
    );
    // Text for the header block in "Administration pages"
    $form['header_block']['header_block_admin'] = array(
        '#type' => 'fieldset',
        '#title' => t('Administration page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_admin']['header_block_admin_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_admin_title", "Title..."),
        '#description' => t('Title for the header block in "Administration pages"')
    );
    $form['header_block']['header_block_admin']['header_block_admin_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_admin_description", "General description..."),
        '#description' => t('General description for the header block in "Administration pages"')
    );
    // Text for the header block in "Information pages"
    $form['header_block']['header_block_information'] = array(
        '#type' => 'fieldset',
        '#title' => t('Information page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_information']['header_block_information_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_information_title", "Title..."),
        '#description' => t('Title for the header block in "Information pages"')
    );
    $form['header_block']['header_block_information']['header_block_information_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_information_description", "General description..."),
        '#description' => t('General description for the header block in "Information pages"')
    );
    // Text for the header block in "User Profile"
    $form['header_block']['header_block_user_profile'] = array(
        '#type' => 'fieldset',
        '#title' => t('User Profile'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_user_profile']['header_block_user_profile_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_user_profile_title", "Title..."),
        '#description' => t('Title for the header block in the events calendar')
    );
    $form['header_block']['header_block_user_profile']['header_block_user_profile_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_user_profile_description", "General description..."),
        '#description' => t('General description for the header block in the events calendar')
    );
    // Text for the header block in newslettersview
    $form['header_block']['header_block_newsletters_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('Newsletters list page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_newsletters_list']['header_block_' . ISA_NEWSLETTER_TYPE . 's_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get('header_block_' . ISA_NEWSLETTER_TYPE . 's_list_title', "Title..."),
        '#description' => t('Title for the header block in the newsletters list page')
    );
    $form['header_block']['header_block_newsletters_list']['header_block_' . ISA_NEWSLETTER_TYPE . 's_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get('header_block_' . ISA_NEWSLETTER_TYPE . 's_list_description', 'General description...'),
        '#description' => t('General description for the header block in the newsletters list page')
    );

    // Text for anonymous validation for download release
    $form['anonymous_download_page'] = array(
        '#type' => 'fieldset',
        '#title' => t('Anonymous download release'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['anonymous_download_page']['anonymous_validation_page_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Page title'),
        '#default_value' => variable_get('anonymous_validation_page_title', "Title..."),
        '#description' => t('')
    );
    $form['anonymous_download_page']['anonymous_validation_page_login_desciption'] = array(
        '#type' => 'textarea',
        '#title' => t('Description login'),
        '#default_value' => variable_get('anonymous_validation_page_login_desciption', 'General description...'),
        '#description' => t('The text that is displayed before link to login')
    );
    $form['anonymous_download_page']['anonymous_validation_page_login_link_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Link title to login'),
        '#default_value' => variable_get('anonymous_validation_page_login_link_title', "Login"),
        '#description' => t('The title of the link to login on joinup'),
        '#maxlength' => 256,
    );
    $form['anonymous_download_page']['anonymous_validation_page_download_desciption'] = array(
        '#type' => 'textarea',
        '#title' => t('Description download'),
        '#default_value' => variable_get('anonymous_validation_page_download_desciption', 'General description...'),
        '#description' => t('The text that is displayed before link download release')
    );
    $form['anonymous_download_page']['anonymous_validation_page_download_link_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Link title to download release'),
        '#default_value' => variable_get('anonymous_validation_page_download_link_title', "Download"),
        '#description' => t('The title of the link to download release'),
        '#maxlength' => 256,
    );
    $form['anonymous_download_page']['anonymous_validation_page_not_allowed_desciption'] = array(
        '#type' => 'textarea',
        '#title' => t('Description download not allowed for anonymous'),
        '#default_value' => variable_get('anonymous_validation_page_not_allowed_desciption', 'General description...'),
        '#description' => t('The text that is displayed if the release download is not allowed for anonymous.')
    );
    // Surveys introduction text
    $form['surveys'] = array(
        '#type' => 'fieldset',
        '#title' => t('Surveys'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['surveys']['surveys_introduction_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Surveys introduction text'),
        '#default_value' => variable_get("surveys_introduction_text", "Introduction text..."),
        '#description' => t('Introduction text written before surveys questions')
    );
    //General texts
    $form['general'] = array(
        '#type' => 'fieldset',
        '#title' => t('General'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['general']['anonymous_connect'] = array(
        '#type' => 'textarea',
        '#title' => t('Anonymous (need to connect) text'),
        '#default_value' => variable_get("anonymous_connect_text", "You should connect to display this page"),
        '#description' => t('Introduction text written for recommended pages if the user is anonymous')
    );
    // Text for the header block in people list
    $form['header_block']['header_block_people_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('People list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_people_list']['header_block_people_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_people_list_title", "Title..."),
        '#description' => t('Title for the header block in people list')
    );
    $form['header_block']['header_block_people_list']['header_block_people_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_people_list_description", "General description..."),
        '#description' => t('General description for the header block in people list'),
    );

    // Text for the header block in news list
    $form['header_block']['header_block_news_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('News list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_news_list']['header_block_news_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_news_list_title", "Title..."),
        '#description' => t('Title for the header block in news list')
    );
    $form['header_block']['header_block_news_list']['header_block_news_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_news_list_description", "General description..."),
        '#description' => t('General description for the header block in news list'),
    );

    // Text for the header block in communities list
    $form['header_block']['header_block_communities_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('Communities list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_communities_list']['header_block_communities_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_communities_list_title", "Title..."),
        '#description' => t('Title for the header block in communities list')
    );
    $form['header_block']['header_block_communities_list']['header_block_communities_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_communities_list_description", "General description..."),
        '#description' => t('General description for the header block in communities list'),
    );

    // Text for the header block in software list
    $form['header_block']['header_block_software_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('Software list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_software_list']['header_block_software_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_software_list_title", "Title..."),
        '#description' => t('Title for the header block in software list')
    );
    $form['header_block']['header_block_software_list']['header_block_software_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_software_list_description", "General description..."),
        '#description' => t('General description for the header block in software list'),
    );

    // Text for the header block in homepage (site mission)
    $form['header_block']['header_block_homepage'] = array(
        '#type' => 'fieldset',
        '#title' => t('Homepage'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_homepage']['header_block_homepage_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_homepage_title", "Welcome"),
        '#description' => t('Title for the header block in homepage')
    );
    $form['header_block']['header_block_homepage']['site_mission'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("site_mission", "Welcome to the new programme improving electronic cooperation among public administrations in EU Member States..."),
        '#description' => t('General description for the header block in homepage'),
    );
    // on popup request membershit
    $form['membership_benefits'] = array(
        '#type' => 'fieldset',
        '#title' => t('Text on popup for request membership'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['membership_benefits']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('node'), TRUE, FALSE),
    );
    $form['membership_benefits']['membership_benefits_text_community'] = array(
        '#type' => 'textarea',
        '#title' => t('Text for a community'),
        '#default_value' => variable_get("membership_benefits_text_community", "As a member, you will be able to post community related content, such as news or documents, participate in forum discussions and subscribe to community mailing lists. As a member, you will also be automatically subscribed to all community related notifications. You can later unsuscribe at any time under the My Page - Subscriptions page. As member of a software or semantic asset project, the facilitator will be able to grant you further rights (e.g. developer right)."),
        '#description' => t('Text displayed in the pop-up window when a user click on "request membership" in a community'),
    );
    $form['membership_benefits']['membership_benefits_text_project'] = array(
        '#type' => 'textarea',
        '#title' => t('Text for a project'),
        '#default_value' => variable_get("membership_benefits_text_project", "As a member, you will be able to post community related content, such as news or documents, participate in forum discussions and subscribe to community mailing lists. As a member, you will also be automatically subscribed to all community related notifications. You can later unsuscribe at any time under the My Page - Subscriptions page. As member of a software or semantic asset project, the facilitator will be able to grant you further rights (e.g. developer right)."),
        '#description' => t('Text displayed in the pop-up window when a user click on "request membership" in a project (Asset or Software)'),
    );
    // help text on the comfirm delete form for a group
    $form['group_delete_confirm'] = array(
        '#type' => 'fieldset',
        '#title' => t('Text on the confirm delete page of group'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_delete_confirm']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_delete_confirm']['group_delete_confirm_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_delete_confirm_information", "<p>If you move all posts from a project (asset or software) to a community, all releases and issues will be deleted.<br/>If you need more information, you can contact administrator by the <a href=\"[contact_admin_url]\">contact form</a></p>"),
        '#description' => t('Text displayed in the confirm delete form of a group.'),
    );
    // help text on the comfirm delete form for a group
    $form['subscription_introduction'] = array(
        '#type' => 'fieldset',
        '#title' => t('Text on the subscription page of a user'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );

    $form['subscription_introduction']['subscription_introduction_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("subscription_introduction_text", 'On Joinup, you can subscribe to content (e.g. a wiki page) and groups (e.g. a community) and receive notifications via e-mail of any changes.'),
        '#description' => t(''),
    );


    // Text for the header block in catalogue list
    $form['header_block']['header_block_catalogue_list'] = array(
        '#type' => 'fieldset',
        '#title' => t('Catalogue list'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_catalogue_list']['header_block_catalogue_list_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_catalogue_list_title", "Title..."),
        '#description' => t('Title for the header block in catalogue')
    );
    $form['header_block']['header_block_catalogue_list']['header_block_catalogue_list_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_catalogue_list_description", "General description..."),
        '#description' => t('General description for the header block in catalogue'),
    );


    // Text for the header block in the search page
    $form['header_block']['header_block_search_page'] = array(
        '#type' => 'fieldset',
        '#title' => t('Search page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['header_block']['header_block_search_page']['header_block_search_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get("header_block_search_title", "Title..."),
        '#description' => t('Title for the header block in search page')
    );
    $form['header_block']['header_block_search_page']['header_block_search_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => variable_get("header_block_search_description", "General description..."),
        '#description' => t('General description for the header block in search page'),
    );


    // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-732
    // legal disclaimer on published asset description metadata (read mode)
    $form['group_federated_asset_release_disclaimer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Disclaimer at page bottom of an Asset Release'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_federated_asset_release_disclaimer']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_federated_asset_release_disclaimer']['group_federated_asset_release_disclaimer_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_federated_asset_release_disclaimer_information", "<p><strong>Disclaimer</strong><br />The description metadata about this asset release is federated and thus just referenced by the [site-name] platform. Information such as the owner, publisher, and usage rights are only given as an indication. For an authoritative answer, it is imperative to verify the repository of origin, as indicated.</p>"),
        '#description' => t('Text of the Legal Disclaimer displayed at the page bottom of a published Asset Release.'),
    );


    // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-733
    // contributor agreement for contributed metadata ("Propose your federated repository" and "Propose your asset release", edit mode)
    $form['group_propose_contributed_metadata_agreement'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contributor Agreement for "Propose your federated repository" and "Propose your asset release"'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_propose_contributed_metadata_agreement']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_propose_contributed_metadata_agreement']['group_propose_contributed_metadata_agreement_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_propose_contributed_metadata_agreement_information", "<p><strong>Contributor agreement</strong></p><p>By submitting this form you contribute description metadata and agree to the below contributor agreement. Please read it carefully.</p><ul><li>You hereby grant the European Union a perpetual, non-exclusive, royaltyfree, world-wide right and licence under any Contributor copyrights in the submitted asset to publish this asset as part of the [site-name] platform under the licence specified by you and stored into the system.</li><li>You hereby assert that you were given the occasion to enter the licensing information and the meta-information tags related to that licenses and accepts that the [site-name] platform may add or change corresponding tags to the asset and its licenses.</li><li>You acknowledge that acceptance into the [site-name] platform is conditioned on the provision of correct licensing information. In case of missing or misleading licensing information related to copyrights and patents the European Commission MAY retract the asset from the [site-name] platform.</li><li>You vouch that you have all rights necessary to license your contribution to this wiki and to the [site-name] platform in a way that does not violate copyright, patent, and trademark rights, contractual obligations, or libel and export control regulations.</li></ul>"),
        '#description' => t('Text of the Contributor Agreement displayed at the page bottom of the "Propose your federated repository" and "Propose your asset release" forms.'),
    );

    // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-377
    // text in the yellow box of the advance search  
    // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-726
    // In issue ISAICP-726 remove the yellow box
    $form['group_advanced_search_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Explanation text in the Advanced Search (Solr) page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_advanced_search_text']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_advanced_search_text']['group_advanced_search_text_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_advanced_search_text_information", "<div>Click on an item for this filter is applied (the number in brackets corresponds to the number of elements of the current selection meeting this criterion for sorting).<br />Each time you select a filter, it adds to the previously selected filters.</div>"),
    );

    // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-709
    // header text in the asset projects list
    $form['group_asset_projects_list_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Title and explanation text in the search form in Asset projects list page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_asset_projects_list_text']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_asset_projects_list_text']['group_asset_projects_list_text_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_asset_projects_list_text_information", "<p>&nbsp;</p><h2 style=\"font-size: 18px; line-height: 25px; \">Find and Reuse Semantic Assets</h2><p>[site-name] is the platform hosted by the European Commission to support and promote metadata management. [site-name] offers a set of services to promote semantic interoperability in Europe.</p>"),
    );

    $form['group_federated_repositories_list_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Title and explanation text in the search form in Federated Repositories list page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_federated_repositories_list_text']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_federated_repositories_list_text']['group_federated_repositories_list_text_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_federated_repositories_list_text_information", FALSE),
    );

    $form['group_asset_releases_list_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Title and explanation text in the search form in Catalogue of Assets page'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['group_asset_releases_list_text']['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', array('global'), TRUE, FALSE),
    );
    $form['group_asset_releases_list_text']['group_asset_releases_list_text_information'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#default_value' => variable_get("group_asset_releases_list_text_information", FALSE),
    );
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
    //Add advertising text configuration form
    $form['advertising_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Home advertising text'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['advertising_text']['advertising_text_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Advertising title'),
        '#default_value' => variable_get('advertising_text_title', ""),
        '#description' => t('')
    );
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-841
    //Add site header title configuration form
    $form['site_header_title'] = array(
        '#type' => 'fieldset',
        '#title' => t('Global header title'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['site_header_title']['global_site_header'] = array(
        '#type' => 'textfield',
        '#title' => t('Global header title'),
        '#default_value' => variable_get('global_site_header', ""),
        '#description' => t('')
    );
	
    return system_settings_form($form);
}

/**
 * @ingroup forms
 * @return type 
 */
function isa_toolbox_get_software_page() {
    drupal_set_title(t('Find Software'));
    return ' ';
}

/**
 * Simple debug function, based on drupal_set_message, which ensures the message
 * has been seen.
 * @param string/object $args stuff to print_r
 * @param string $message additionnal message to distinguish debug messages
 */
function dsk($args, $message = '') {
    static $krumo_included = FALSE;
    if (!$krumo_included) {
        $krumo_included = include_once(drupal_get_path('module', 'devel') . '/krumo/class.krumo.php');
    }
    if (!$krumo_included) {
        return;
    }
    $final_message = $message . ' :' . krumo_ob($args);
    drupal_set_message($final_message);
}

/**
 * Gets the user's mail address
 * @param int $uid uid of the user you want to know the mail address
 * @return string The user's mail address
 */
function isa_toolbox_get_mail_address_from_user($uid) {
    return db_result(db_query("SELECT mail FROM {users} WHERE uid = '%d'", $uid));
}

/**
 * return users by roles id
 *
 * @param numeric $rid the role id
 * @return array users
 */
function isa_toolbox_get_users_by_roles($rid) {
    if (!is_array($rid)) {
        $rid = array(0 => $rid);
    }
    foreach ($rid as $key => $value) {
        $sql = 'SELECT *
      FROM {users} a
      LEFT JOIN {users_roles} b ON (a.uid = b.uid)
      WHERE b.rid =%d';
        $res = db_query($sql, $value);
        while ($row = db_fetch_object($res)) {
            $users[$row->uid] = $row;
        }
    }
    if (isset($users)) {
        return $users;
    } else {
        return NULL;
    }
}

/** Return users by roles id and for a virtual forge
 *
 * @param numeric $rid role id
 * @param string/numeric $vf_tid the term id or term name of virtual forge
 * @return array users
 */
function isa_toolbox_get_users_by_vf_roles($rid, $vf_tid) {
    if (!is_array($rid)) {
        $rid = array(0 => $rid);
    }

    if (is_numeric($vf_tid)) {
        $term = taxonomy_get_term($vf_tid);
        $vf_name = $term->name;
    } else {
        $vf_name = $vf_tid;
    }
    foreach ($rid as $key => $value) {
        $sql = 'SELECT *
      FROM {users} a
      LEFT JOIN %s_users_roles b ON (a.uid = b.uid)
      WHERE b.rid =%d';
        $res = db_query($sql, $vf_name, $value);
        while ($row = db_fetch_object($res)) {
            $users[$row->uid] = $row;
        }
    }
    if (isset($users)) {
        return $users;
    } else {
        return NULL;
    }
}

/**
 * Count number of post of a user
 * @param Int $uid user id
 * @return Int
 */
function isa_toolbox_get_users_topics_count($uid) {
    $query = "SELECT count( 'nid' ) AS cptpost
  FROM `node`
  WHERE `type` LIKE '%s'
  AND `uid` = %d ";
    $res = db_query($query, $uid, ISA_TOPIC_TYPE);
    return $res->cptpost;
}

/**
 * Returns a list of users belonging to a given group and having a given role
 * @param int $gid Group ID
 * @param string $role Role name
 * @return array list of users (contains UID and mail address)
 */
function isa_toolbox_get_users_by_og_roles($gid, $role_id) {
    $list_users = array();
    //$role_id = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", $role));
    $sql = 'SELECT a.uid, a.mail
          FROM {users} a
          LEFT JOIN {og_users_roles} b
          ON (a.uid = b.uid)
          WHERE b.rid = %d AND b.gid = %d';
    $res = db_query($sql, $role_id, $gid);
    while ($row = db_fetch_object($res)) {
        $list_users[$row->uid] = $row;
    }
    return $list_users;
}

/**
 * Sets title / body fields and a token tree for each given form field.
 * Used for building mailing template forms
 * @param array $form_fields Array of all form fields
 * @param string $token_type Type of token. Defaults to 'all'
 * @return array Form array
 */
function isa_toolbox_get_form_template_message($form_fields, $token_type = 'all') {
    if (!is_array($token_type)) {
        $token_type = array($token_type);
    }
    $form['token_list'] = array(
        '#type' => 'item',
        '#value' => theme('token_tree', $token_type, TRUE, FALSE),
    );

    foreach ($form_fields as $id => $field) {
//fildset
        $form [$field['name']] = array(
            '#type' => 'fieldset',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#title' => $field['fieldset_title']
        );
//title
        isset($field['default_title']) ? $default_title = $field['default_title'] : $default_title = 'title...';
        isset($field['default_body']) ? $default_body = $field['default_body'] : $default_body = 'body...';

        $form[$field['name']]['notifications'][$field['name'] . '_mail_title'] = array(
            '#type' => 'textfield',
            '#title' => $field['title_title'],
            '#default_value' => variable_get($field['name'] . "_mail_title", $default_title),
            '#description' => $field['description_title']
        );
//body
        $form[$field['name']]['notifications'][$field['name'] . '_mail_body'] = array(
            '#type' => 'textarea',
            '#title' => $field['title_body'],
            '#default_value' => variable_get($field['name'] . "_mail_body", $default_body),
            '#description' => $field['description_body']
        );
    }
    return $form;
}

/**
 * Implement of hook_link_alter
 */
function isa_toolbox_link_alter(&$links, $node, $comment = NULL) {
// remove the reply link on topic comment
    if (isset($comment) && $node->type == 'topic') {
        unset($links['comment_reply']);
        $links['comment_delete']['attributes'] = array('class' => 'popups-form', 'title' => t('Delete this comment'));
    }

    //remove the comment edit link of a comment for everyone exept the comment author & administrator
    global $user;
    if (isset($comment) && $user->uid != $comment->uid && !isa_toolbox_is_omnipotent()) {
        unset($links['comment_delete']);
    }
}

/**
 * Returns role ID and name for a given role ID
 * @param int $rid Role ID
 * @return array Array containing rid (Role ID) and name
 */
function isa_toolbox_get_role_by_rid($rid) {
    $role = db_result(db_query('SELECT r.name FROM {role} r WHERE r.rid=%d', $rid));
    return array('rid' => $rid, 'name' => $role);
}

/**
 * Implement of hook_views_query_alter
 */
function isa_toolbox_views_query_alter(&$view, &$query) {
    if (isset($view->query->table_queue['node_users_node_data_field_photo'])) {
        $view->query->table_queue['node_users_node_data_field_photo']['join']->type = 'INNER';
    }
    if (isset($view->query->table_queue['node_counter'])) {
// SGS
//    $view->query->table_queue['node_counter']['join']->type = 'INNER';
    }
    if (isset($view->query->table_queue['node_users_heartbeat_activity_node_data_field_photo'])) {
        $view->query->table_queue['node_users_heartbeat_activity_node_data_field_photo']['join']->type = 'INNER';
    }
    if ($view->name == 'Comment_moderated' && $view->current_display == 'block_2') {
        global $user;
        $groups = array();
        // Get all GIDs of groups of which the current user is admin
        foreach ($user->og_groups as $group) {
            if ($group['is_admin'] == 1)
                $groups[] = $group['nid'];
        }
        $count = count($groups);
        // Get where clauses (select blabla from blabla WHERE)
        $where = $query->where[0];
        $txt = 'node_comments__og_ancestry.group_nid IN (';

        // Fill the IN () part with placeholders (eg. IN (%d, %d, %d))
        for ($i = 0; $i < $count; $i++) {
            $txt .= '%d';
            if ($i < ($count - 1))
                $txt .= ', ';
        }

        $txt .= ')';
        // Add the text with placeholders to the WHERE clauses
        $where['clauses'][] = $txt;

        // Add the GIDs to the WHERE clause
        foreach ($groups as $gid)
            $where['args'][] = $gid;

        // Replace the first WHERE clause with the one we created
        $query->where[0] = $where;
    }
    // remove the current project to the related projects (CCK in project form)
    if ($view->name == 'CCK_using_by') {
        $gid = variable_get('current_group', isa_toolbox_get_community_nid());
        if (is_numeric($gid)) {
            $query->where[0]['clauses'][] = "node.nid != {$gid}";
        }
    }
    // for view AllNews_view add to query the news who are validated
    if ($view->name == 'AllNews_view' && ($view->current_display == 'page_1' || $view->current_display == 'feed_1' || $view->current_display == 'page_5' || $view->current_display == 'feed_5')) {
        // displays only blog, and news who are validated
        $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_NEWS_VALIDATED);
        $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_NEWS_PUBLISHED);
        $view->query->add_where('workflow_node', "node.type = '%s'", ISA_BLOG_TYPE);
        $view->query->set_where_group('OR', 'workflow_node');
        $view->query->add_table('workflow_node');
    }
    // for view elibrary add to query the cases and document who are validated
    if ($view->name == 'elibrary_view' && ($view->current_display == 'page_1' || $view->current_display == 'feed_1' || $view->current_display == 'page_6' || $view->current_display == 'feed_6')) {
        $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_NEWS_VALIDATED);
        $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_NEWS_PUBLISHED);
        $view->query->add_where('workflow_node', "node.type = '%s'", ISA_FACTSHEET_TYPE);
        $view->query->add_where('workflow_node', "node.type = '%s'", ISA_VIDEO_TYPE);
        $view->query->set_where_group('OR', 'workflow_node');
        $view->query->add_table('workflow_node');
    }
    // for view elibrary in group add to query the legal documents who are validated
    if ($view->name == 'Wiki_listall' && ($view->current_display == 'page_2' || $view->current_display == 'page_3')) {
        if (user_access('administer nodes')) {
            $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_LEGALDOC_DRAFT);
        }
        $view->query->add_where('workflow_node', "workflow_node.sid = '%s'", ISA_SID_LEGALDOC_VALIDATED);
        $view->query->add_where('workflow_node', "node.type <> '%s'", ISA_LEGALDOCUMENT_TYPE);
        $view->query->set_where_group('OR', 'workflow_node');
        $view->query->add_table('workflow_node');
    }

    // for view add to query the project issue and release
    if ($view->name == 'activities_group') {
        $view->query->add_where('0', "heartbeat_activity.`nid`
    IN (select nid from project_release_nodes where pid = %d)", (int) $view->query->where[0]['args'][0]);
        $view->query->set_where_group('OR', '0');

        $view->query->add_where('0', "heartbeat_activity.`nid`
    IN (select nid from project_issues where pid = %d)", (int) $view->query->where[0]['args'][0]);
        $view->query->set_where_group('OR', '0');

        $view->query->add_where('0', "heartbeat_activity.`nid`
    IN (select nid from og_ancestry where group_nid = %d)", (int) $view->query->where[0]['args'][0]);
        $view->query->set_where_group('OR', '0');
    }
    if ($view->name == 'isa_activity_user') {
        global $user;
        $view->query->set_where_group('AND', '0');
        $view->query->add_where('0', "heartbeat_activity.language = '%s'", $user->language);
    }
    // get the federated projects linked to a federated forge, based on the URI
    // replace INNER JOIN by LEFT JOIN project_project, federated forge ins't a project
    if ($view->name == 'Softwares_list' &&
            ( $view->current_display == 'block_4' ||
            $view->current_display == 'page_2' ||
            $view->current_display == 'page_4' ||
            $view->current_display == 'page_5' ||
            $view->current_display == 'page_6')) {
        $query->table_queue['project_projects']['join']->type = 'LEFT';
    }
    if ($view->name == 'People_List') {
        //Unconfirmed accounts should not appear in the 'People' list
        $query->where[0]['clauses'][] = 'users.access <> 0';
    }
    //for all view to get recommended list
    if (($view->name == 'People_List' && $view->current_display == 'page_4') ||
            ($view->name == 'AllNews_view' && ($view->current_display == 'page_5' || $view->current_display == 'feed_5')) ||
            ($view->name == 'Softwares_list' && ($view->current_display == 'page_5' || $view->current_display == 'feed_4')) ||
            ($view->name == 'Assets_list' && ($view->current_display == 'page_3' || $view->current_display == 'feed_2')) ||
            ($view->name == 'Communities_list' && ($view->current_display == 'page_3' || $view->current_display == 'feed_3')) ||
            ($view->name == 'event_browser' && ($view->current_display == 'page_2' || $view->current_display == 'feed_3' || $view->current_display == 'block_3')) ||
            ($view->name == 'elibrary_view' && ($view->current_display == 'page_6' || $view->current_display == 'feed_6' ))) {
        global $user;
        $profile = NULL;
        if (isset($user->node_profile)) {
            $profile = $user->node_profile;
        } else {
            $profile = content_profile_load('profile', $user->uid);
        }

        //limit nodes with the $profuser profile term of vocabulary 'domains'
        $term = taxonomy_node_get_terms_by_vocabulary($profile, variable_get('domains_vid', 27));
        $term_list = array_keys($term);

        if (count($term_list) > 0) {
            $term_placeholders = implode(',', array_fill(0, count($term_list), "%d"));
            switch ($view->name) {
                case 'People_List':
                    if ($view->current_display == 'page_4') {
                        $view->query->add_where('0', "term_data_node.tid in ($term_placeholders)", $term_list);
                    }
                    break;
                case 'Softwares_list':
                case 'Assets_list':
                case 'Communities_list':
                case 'AllNews_view':
                case 'event_browser':
                case 'elibrary_view':
                    $view->query->add_where('0', "term_data_node.tid in ($term_placeholders)", $term_list);
                    break;
            }
        }
    }
    if ($view->name == 'user_latest_content') {

        global $user;
        $profile = NULL;
        if (isset($user->node_profile)) {
            $profile = $user->node_profile;
        } else {
            $profile = content_profile_load('profile', $user->uid);
        }
        //limit nodes with the user profile term of vocabulary 'domains'
        $term = taxonomy_node_get_terms_by_vocabulary($profile, variable_get('domains_vid', 27));
        $term_list = array_keys($term);
        if (count($term_list) > 0) {
            $term_placeholders = implode(',', array_fill(0, count($term_list), "'%s'"));
            $view->query->add_where('0', "term_data_node.tid in ($term_placeholders)", $term_list);
        }
        //limit nodes with workflow states validated
        $view->query->add_where('workflow_node', "workflow_node.sid NOT IN ('%s','%s','%s','%s','%s')", ISA_SID_NEWS_DRAFT, ISA_SID_NEWS_PROPOSED, ISA_SID_COMMUNITY_DRAFT, ISA_SID_COMMUNITY_PROPOSED, ISA_SID_FEDPROJ_CREATED);
        $view->query->add_where('workflow_node', "node.type NOT IN ('%s','%s','%s','%s','%s','%s')", ISA_NEWS_TYPE, ISA_PROJECT_TYPE, ISA_COMMUNITY_TYPE, ISA_DOCUMENT_TYPE, ISA_EVENT_TYPE, ISA_CASE_TYPE, ISA_FEDERATED_PROJECT_TYPE);
        $view->query->set_where_group('OR', 'workflow_node');
        $view->query->add_table('workflow_node');
    }

    if ($view->name == 'items' && $view->current_display == 'block_3') {
        $query->where[0]['clauses'][] = sprintf("(node.type IN ('%s', '%s') AND workflow_node.sid NOT IN ('%s','%s'))", ISA_DOCUMENT_TYPE, ISA_CASE_TYPE, ISA_SID_NEWS_DRAFT, ISA_SID_NEWS_PROPOSED);
        $view->query->set_where_group('OR', '0');
        $view->query->add_table('workflow_node');
    }

    if ($view->name == 'user_community_and_project') {
        $path = explode('/', drupal_get_normal_path($_GET['q']));
        $uid = $path[1];
        $join = new views_join;
        $join->construct('og_uid', 'node', 'nid', 'nid');
        $view->query->add_relationship('og_uid', $join, 'node');
        $view->query->add_where('og_uid', "og_uid.uid = '%d'", $uid);
    }

    if ($view->name == 'People_List') {
        $join = new views_join;
        $join->construct('term_node', 'node', 'nid', 'nid', 'node.vid = term_node.vid');
        $view->query->add_relationship('term_node', $join, 'node');
        $join = new views_join;
        $join->construct('term_data', 'term_node', 'tid', 'tid', 'term_data.vid = ' . variable_get('country_vid', 26), 'INNER');
        $view->query->add_relationship('term_data', $join, 'term_node');
        $view->query->add_field('term_data', 'name');
    }
    //Asset releases view in catalogue : display only if it is the current.
    //change the query for the 'only current' search for asset release
    if ($view->name == 'Catalogue' && $view->current_display == 'page_1') {
        if (isset($_GET['current_checkbox'])) {
            $view->query->add_field('node_data_field_asset_node_reference_node', 'field_asset_node_relationship_value');
            $view->query->table_queue['node_data_field_asset_node_reference_node']['join']->left_field = 'nid';
            $view->query->table_queue['node_data_field_asset_node_reference_node']['join']->field = 'nid';
            // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-798
            // the filter "Show the current version only" should show also assets for which the property "current version" is not set (NULL)
            // Added with OR the cases where there is not a "current_version" relationship (value is not 1 or is NULL)
            // valid results are:
            //    -those with value NULL (i.e. no relationship)
            //    -those with related nid not NULL but value not 1 (i.e. a relationship diferent from "current_version").
            //      To avoid for duplicates, the concatenation of related nid-value is forced to a single result
            // add join relation, will aid in selecting only relations that own to the node current revision
            $join = new views_join;
            $join->construct('content_field_asset_node_reference', 'node', 'nid', 'nid', 'content_field_asset_node_reference.vid = node.vid AND content_field_asset_node_reference.field_asset_node_reference_item_id=node_data_field_asset_node_reference_node.vid');
            $view->query->add_relationship('content_field_asset_node_reference', $join, 'node');

            $__node_where_1 = '(node_data_field_asset_node_reference_node.field_asset_node_relationship_value IS NULL AND node_data_field_asset_node_reference_node.field_asset_node_reference_node_nid IS NULL) ' .
                    'OR ' .
                    '(node_data_field_asset_node_reference_node.field_asset_node_relationship_value IS NOT NULL ' .
                    'AND (node.nid=content_field_asset_node_reference.nid AND node.vid=content_field_asset_node_reference.vid) ' .
                    'AND (SELECT COUNT(node_reference.field_asset_node_relationship_value) FROM content_type_asset_node_reference AS node_reference LEFT JOIN content_field_asset_node_reference ref ON (ref.field_asset_node_reference_item_id=node_reference.vid) WHERE ref.nid=node.nid AND ref.vid=node.vid AND node_reference.nid=node_data_field_asset_node_reference_node.nid AND node_reference.field_asset_node_reference_node_nid IS NOT NULL AND node_reference.field_asset_node_relationship_value=1)=0 ' .
                    "AND CONCAT(IFNULL(node_data_field_asset_node_reference_node.field_asset_node_reference_node_nid,node_data_field_asset_node_reference_node.vid),'-',node_data_field_asset_node_reference_node.field_asset_node_relationship_value) = (SELECT MIN(CONCAT(IFNULL(node_reference.field_asset_node_reference_node_nid,node_reference.vid),'-',node_reference.field_asset_node_relationship_value)) FROM content_type_asset_node_reference AS node_reference LEFT JOIN content_field_asset_node_reference ref ON (ref.field_asset_node_reference_item_id=node_reference.vid) WHERE ref.nid=node.nid AND ref.vid=node.vid AND node_reference.nid=node_data_field_asset_node_reference_node.nid AND node_reference.field_asset_node_relationship_value IS NOT NULL))";
            $__node_where_2 = '(node.nid = node_data_field_asset_node_reference_node.field_asset_node_reference_node_nid) ' .
                    'AND (node_data_field_asset_node_reference_node.field_asset_node_relationship_value = 1) ' .
                    'AND (node.nid=content_field_asset_node_reference.nid AND node.vid=content_field_asset_node_reference.vid) ';
            $__node_where = "($__node_where_1) OR ($__node_where_2)";
            $view->query->add_where('node', $__node_where);
            //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
            //Search by text and language on the fields [Node module form name, field_asset_name, Node module form body, field_asset_description]
        }
		//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
			//move out the current version condition  
        
		if ( isset($_GET['field_language_textfield_lang_value']) and !empty($_GET['field_language_textfield_lang_value']) ) { //Search by language
                $method = array(
                    $view->query,
                    'add_where'
                );
				//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
				//Split string
				$search_keys = preg_split('/\W+/u', $_GET['keys'],NULL, PREG_SPLIT_NO_EMPTY);
                //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
                //Fix search with no words
                if(count($search_keys)>0){
                    if ('en' == $_GET['field_language_textfield_lang_value']) {//Search by english
                        //Remove view language  filter
                        $arg_position = 0;
                        for ($i = 0; $i < 3; $i++) {
                            $arg_position +=substr_count($view->query->where[0]['clauses'][$i], '%s');
                        }
                        unset($view->query->where[0]['clauses'][3]);
                        unset($view->query->where[0]['args'][$arg_position]);
                        //Add search conditions
                        $params = array();
                        $search_in_node_title = "";
                        if(isset($search_keys) and !empty($search_keys)){
                            foreach ($search_keys as $key => $value) {
                                $search_in_node_title .= "node.title LIKE '%%%s%%' OR ";
                                $params[] = $value;
                            }
                        }else{
                            $search_in_node_title .= " 1=1 ";
                        }
                        $search_in_node_title = rtrim($search_in_node_title, "OR ");

                        $search_in_node_body = "";
                        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
                        //Convert characters 
                        if(isset($search_keys) and !empty($search_keys)){
                            foreach ($search_keys as $key => $value) {
                                $aux_eng = htmlentities($value,ENT_QUOTES,"UTF-8");
                                $search_in_node_body .= "node_revisions.body LIKE '%%%s%%' OR ";
                                //$params[] = $value;
                                $params[] = $aux_eng;
                            }
                        }else{
                             $search_in_node_body .= " 1=1 ";
                        }
                        $search_in_node_body = rtrim($search_in_node_body, "OR ");
                        $args = array(
                            0,
                            "($search_in_node_title) OR ($search_in_node_body)"
                        );
                        $args = array_merge($args, $params);
                        call_user_func_array($method, $args);
                    } else {//Search by other languages
                        //Add joins for name text search
                        $join = new views_join;
                        $join->construct('content_type_language_textfield', 'flexifield_items_node_data_field_asset_name', 'item_id', 'vid', array(), 'LEFT');
                        $view->query->add_relationship('content_type_language_textfield_alias', $join, 'flexifield_items_node_data_field_asset_name');
                        //Add joins for language body search
                        $join = new views_join;
                        $join->construct('content_field_asset_description', 'node', 'vid', 'vid', array(), 'LEFT');
                        $view->query->add_relationship('node_data_field_asset_description', $join, 'node');
                        $join = new views_join;
                        $join->construct('flexifield_items', 'node_data_field_asset_description', 'field_asset_description_item_id', 'item_id', array(), 'LEFT');
                        $view->query->add_relationship('flexifield_items_node_data_field_asset_description', $join, 'node_data_field_asset_description');
                        $join = new views_join;
                        $join->construct('content_field_language_textfield_lang', 'flexifield_items_node_data_field_asset_description', 'item_id', 'vid', array(), 'LEFT');
                        $view->query->add_relationship('content_type_language_textarea_alias', $join, 'flexifield_items_node_data_field_asset_description');
                        //Add joins for body search
                        $join = new views_join;
                        $join->construct('content_type_language_textarea', 'flexifield_items_node_data_field_asset_description', 'item_id', 'vid', array(), 'LEFT');
                        $view->query->add_relationship('flexifield_items_node_data_field_asset_description_node_data_field_language_textfield_lang', $join, 'flexifield_items_node_data_field_asset_description');
                        //Add search conditions
                        $params = array();
                        $params[] = $_GET['field_language_textfield_lang_value'];
                        $search_by_name = "flexifield_items_node_data_field_asset_name_node_data_field_language_textfield_lang.field_language_textfield_lang_value='%s' AND (";
                        if(isset($search_keys) and !empty($search_keys)){
                            foreach ($search_keys as $key => $value) {
                                $search_by_name .= "
                                  content_type_language_textfield_alias.field_language_textfield_name_value LIKE '%%%s%%' OR ";
                                $params[] = $value;
                            }
                        }else{
                            $search_by_name .= " 1=1 ";
                        }
                        $search_by_name = rtrim($search_by_name, "OR ");
                        $search_by_name .= ")";
                        $params[] = $_GET['field_language_textfield_lang_value'];
                        $search_by_body = ' content_type_language_textarea_alias.field_language_textfield_lang_value="%s" AND (';
                        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
                        //Convert characters
                         if(isset($search_keys) and !empty($search_keys)){
                            foreach ($search_keys as $key => $value) {
                                $aux = htmlentities($value,ENT_QUOTES,"UTF-8");
                                $search_by_body .= "
                                  flexifield_items_node_data_field_asset_description_node_data_field_language_textfield_lang.field_language_textarea_name_value LIKE '%%%s%%' OR ";
                                //$params[] = $value;
                                $params[] = $aux;
                            }
                        }else{
                            $search_by_body .= " 1=1 ";
                        }
                        $search_by_body = rtrim($search_by_body, "OR ");
                        $search_by_body .= ")";
                        $args = array(
                            0,
                            "($search_by_name OR $search_by_body)"
                        );
                        $args = array_merge($args, $params);
                        call_user_func_array($method, $args);
                    } 
                }else{
                    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
                    //Fix search with no words
                    if('en' == $_GET['field_language_textfield_lang_value']){
                        unset($view->query->where[0]['clauses'][1]);
                        unset($view->query->where[0]['args'][1]);
                    }
                }
                
        }
        
    }
}

/**
 * Protects email addresses by changing @ to [at]
 * and . to [dot]
 * @param string $email The email address to protect
 * @return string Protected email address
 */
function isa_toolbox_protect_email($email) {
    $email = str_replace('@', '[at]', $email);
    $email = str_replace('.', '[dot]', $email);
    return $email;
}

/**
 *  Implement of hook_views_pre_render
 *
 * @param <type> $view
 *
 * @uses isa_toolbox_get_community_nid () , isa_toolbox_get_term_name () , og_is_group_member ()
 */
function isa_toolbox_views_pre_render(&$view) {
    // Check if the view is the wiki list
    switch ($view->name) {
        case 'Softwares_list':
            foreach ($view->result as $key => $result) {
                if ($result->node_type != 'federated_project') {
                    $result->og_og_description = '<div class="field field-unknown">' . $result->post_count . ' ' . t('posts') . ' | ';
                    if ($result->member_count > 1) {
                        $result->og_og_description .= $result->member_count . ' ' . t('members') . '</div>';
                    } else {
                        $result->og_og_description .= $result->member_count . ' ' . t('member') . '</div>';
                    }
                    $view->result[$key] = $result;
                }
            }
            //if ($view->current_display == 'page_2')
            //  $view->display_handler->set_option('header', drupal_get_form('isa_sort_form_get_views_sort_form',
            //                                                               'softwares'));
            break;

        case 'Forges_list':
            $sql = 'SELECT count(*) as q FROM {content_type_federated_project} ctfp WHERE ctfp.field_fed_project_forge_nid = %d';
            foreach ($view->result as $key => $result) {
                $q = db_result(db_query($sql, $result->nid));
                $result->node_comment_statistics_comment_count = $q;
                $view->result[$key] = $result;
            }
            break;

        case 'People_List' :
            $header = $view->display_handler->get_option('header') . isa_blocks_people_letter_links();
            $view->display_handler->set_option('header', $header);
            break;
        case 'Community_members' :
        case 'Asset_members':
        case 'Software_members':
            if ($view->current_display == 'page') {
                $view->display_handler->set_option('header', isa_toolbox_letters_links_members());
            }
            break;
        case 'Catalogue' :
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-808
        //Show the title by language, show default title in english
            if (isset($_GET['field_language_textfield_lang_value']) &&  $_GET['field_language_textfield_lang_value'] != 'en' && !empty($_GET['field_language_textfield_lang_value'])) {
                foreach ($view->result as $key => $result) {
                    unset($result->node_title);
                }
            }
            break;
        case 'AllNews_view'  :
        	if ($view->name == 'AllNews_view' && $view->current_display == 'page_1')
         		drupal_set_title('Find news');
        	break;
        	
    }
}

/**
 * Create the letters links for the members list
 */
function isa_toolbox_letters_links_members() {
    $letter = array();
    if (arg(3) != 'add' && arg(3) != 'edit' && arg(1) != 'denied') {
        $args = $_GET;
        unset($args['q']);
        for ($i = 65; $i < 91; $i++) {
            $letter_upper = chr($i);
            $letter_lower = chr($i + 26 + 6);
            $url = arg(0) . '/' . arg(1) . '/' . arg(2) . '/' . $letter_lower;
            $letter[] = array(
                "title" => $letter_upper,
                "href" => $url,
                "html" => "true",
                'query' => $args,
                "attributes" => array("class" => "members-letter"));
        }
        $letter[] = array('title' => '|');
        $letter[] = array(
            "title" => 'All',
            "href" => arg(0) . '/' . arg(1) . '/' . arg(2),
            "html" => "true",
            "attributes" => array("class" => "members-letter"));
        $links = "<div class='alpha-sort'>" . theme("links", $letter) . "</div>";
    }
    return $links;
}

/**
 * Implement of hook_views_pre_build
 * @param <type> $view
 */
function isa_toolbox_views_pre_build(&$view) {
    // set args 'term_id' in virtual forges
    if (($view->name == 'Softwares_list' || $view->name == 'Assets_list' || $view->name == 'groups_lists')) {
        if (variable_get('isa_vf_access_tid_virtual_forge', NULL) != 0) {
            $view->args = array(0 => variable_get('isa_vf_access_tid_virtual_forge', NULL));
        }
    }
}

/**
 * @global object $user the current user
 * @param array $profile : the profile
 * @param string $field : the field to check visibility
 * @return boolean TRUE if the field must be displayed, FALSE if must be hidden
 */
function isa_toolbox_check_visibility($profile, $field) {
    global $user;
    // return true if the user is moderator or administrator or on his profile
    if (user_access('View profile privacy fields') || $user->uid == $profile->uid) {
    	return TRUE;
    }
    //Get the value of the filed to check
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-834
    switch ($field) {
        case 'email' : $field_value = $profile->field_email_visibility;
            break;
        case 'profile' : $field_value = $profile->field_profile_visibility;
            break;
        case 'telephone' : $field_value = $profile->field_telephone_visibility;
            break;
        case 'company' : $field_value = $profile->field_company_visibility;
            break;
        case 'country' : $field_value = $profile->field_country_visibility;
            break;
        case 'keywords' : $field_value = $profile->field_keywords_visibility;
            break;
        case 'facebook' : $field_value = $profile->field_facebook_visibility;
            break;
        case 'twitter' : $field_value = $profile->field_twitter_visibility;      					 
            break;
        case 'linkedin' : $field_value = $profile->field_linkedin_visibility;
            break;
        case 'professional_profile' : $field_value = $profile->field_professional_p_visibility;
            break;
            
    }
    //Check the value of field : must be displayed or not
    if (!isset($field_value)) {
        return FALSE;
    }
    switch ($field_value[0]['value']) {
        case 0: return FALSE;
        case 1: return ($user->uid != 0);
        case 2: return TRUE;
    }
}

/**
 * modify the 'Assigned select list regarding the connected user and permission
 * @param $form : the assigned list of this form will be modified
 * @param $pid : the id of the software
 */
function isa_toolbox_get_assignable_members($pid) {
    if (is_numeric($pid)) {
        $software = node_load($pid);
        $assignable_users = array();
        $assignable_users [0] = 'Unassign';
        if (user_access('assign and be assigned project issues') || og_is_group_admin($software)) {
            $users = db_query(og_list_users_sql(), $pid);
            while ($user = mysqli_fetch_array($users)) {
                $assignable_users[$user['uid']] = strip_tags(theme('username', $user['uid']));
            }
        } else {
            global $user;
            if (og_is_group_member($pid, NULL)) {
                $assignable_users[$user->uid] = strip_tags(theme('username', $user->uid));
            }
        }
    }
    return $assignable_users;
}

/**
 * Return the nid of the last release created
 *
 * @param integer $pid the nid of the project
 * @return integer nid the nid of the last relase
 */
function isa_toolbox_get_last_release($pid) {
    if (is_numeric($pid)) {
        $project = node_load($pid);
        if ($project->group_type == ISA_SOFTWARE_TYPE) {
            $sql = "SELECT n.nid
              FROM {node} n
              LEFT JOIN {project_release_nodes} prn
              ON n.nid = prn.nid
              LEFT JOIN {workflow_node} wn
              ON wn.nid = n.nid
              WHERE prn.pid = %d
              ORDER BY n.created DESC";

            $nid = db_result(db_query_range($sql, $pid, ISA_SID_RELEASE_APPROVED, 0, 1));
            return $nid;
        } elseif ($project->group_type == ISA_ASSET_TYPE) {
            $sql = 'SELECT asset_release.nid FROM {content_type_asset_release} as asset_release
              INNER JOIN {og_ancestry} ON asset_release.nid = og_ancestry.nid
              LEFT JOIN {content_type_asset_node_reference} AS node_reference ON node_reference.nid = asset_release.nid
                AND node_reference.field_asset_node_reference_node_nid = asset_release.nid AND node_reference.field_asset_node_relationship_value = 1
                AND node_reference.vid = (SELECT MAX(node_reference2.vid) FROM {content_type_asset_node_reference} AS node_reference2 WHERE node_reference2.nid = asset_release.nid AND node_reference2.field_asset_node_relationship_value = 1)
              LEFT JOIN {workflow_node} wn ON wn.nid = asset_release.nid
              WHERE og_ancestry.group_nid = %d AND wn.sid IN (%s)
              AND asset_release.vid = (SELECT MAX(vid) FROM {content_type_asset_release} AS release2 
              WHERE release2.nid = asset_release.nid) 
              ORDER BY node_reference.field_asset_node_relationship_value DESC, asset_release.nid DESC';

            $sids = implode(',', array(ISA_SID_ASSET_ASSESSED, ISA_SID_ASSET_ASSESSMENT, ISA_SID_ASSET_VALIDATED));
            $nid = db_result(db_query($sql, $pid, $sids));
            return $nid;
        }
    }
}

/**
 * Implement of hook_cron
 */
function isa_toolbox_cron() {
    ////////////////////////////////
    // UPDATE USER_ROLES SUBSITES //
    ////////////////////////////////
    $cron_last = variable_get('isa_toolbox_cron_last', 0);
    $time = time();
    // update users_roles subsites every ISA_UPDATE_VF_USERS_ROLES_TIME
    if (($time - $cron_last) > ISA_UPDATE_VF_USERS_ROLES_TIME || isset($_GET['run'])) {
        variable_set('isa_toolbox_cron_last', time());
        // don't execute update user_roles when cron is started by a subsite
        if (!isa_toolbox_is_in_virtual_forge()) {
            // get the name of table users_roles for isa ( in case when table prefix is used , don't delete datas from this table)
            $sql = "SHOW TABLES LIKE '{users_roles}'";
            $isa_table = db_result(db_query($sql));

            $sql = "SHOW TABLES LIKE '%_users_roles'";
            $querry = db_query($sql);

            while ($result = db_fetch_array($querry)) {
                $table = array_shift($result);
                //in case when table prefix is used (for db isa), don't delete datas from this table
                // don't delete datas from og_users_roles
                if ($table != 'og_users_roles' && $table != $isa_table) {
                    $tables[] = $table;

                    // delete datas for moderator and administrators role
                    $sql = "DELETE FROM %s WHERE %s.rid IN ('%d','%d')";
                    $result_delete = db_query($sql, $table, $table, variable_get('moderator_rid', NULL), variable_get('administrator_rid'));
                    if ($result_delete != 1) {
                        drupal_set_message(t("Error when delete data from $table."));
                    }

                    //update datas from isa users_roles to subsite users_role (only for moderator and administrator roles)
                    $sql = "INSERT INTO %s (uid, rid)
        SELECT uid, rid
        FROM {users_roles} ur
        WHERE ur.rid = '%d'
        OR ur.rid = '%d'";
                    $result_insert = db_query($sql, $table, variable_get('moderator_rid', NULL), variable_get('administrator_rid'));
                    if ($result_insert != 1) {
                        drupal_set_message(t("Error when insert data in $table."));
                    }
                }
            }
        }
    }
}

/**
 * This function return the tid of the current virtual forge,
 * FALSE if isn't in virtual forge
 *
 * @return integer tid or FALSE
 */
function isa_toolbox_is_in_virtual_forge() {
    if (variable_get('isa_vf_access_tid_virtual_forge', -1) == 0) {
        return FALSE;
    } elseif (variable_get('isa_vf_access_tid_virtual_forge', -1) > 0) {
        return variable_get('isa_vf_access_tid_virtual_forge', -1);
    } else {
        return FALSE;
    }
}

/**
 * This function add table in query
 *
 * @param object $query the current view query
 * @param string $name table name
 */
function isa_toolbox_query_add_table(&$query, $name) {
    $join = new views_join();
    $join->construct($name, 'node', 'nid', 'nid');
    $table = array(
        'table' => $name,
        'num' => 1,
        'alias' => $name,
        'join' => $join,
        'relationship' => 'node'
    );

    $query->table_queue[$name] = $table;
    $query->tables['node'][$name] = array('count' => 1, 'alias' => $name);
}

/**
 * Implement of hook_menu_alter
 */
function isa_toolbox_menu_alter(&$items) {
    //change access arguments and access callback of admin/user/user/create for add permission
    $items['admin/user/user/list']['access arguments'] = '';
    $items['admin/user/user/list']['access callback'] = 'isa_toolbox_access_admin_user';
    $items['admin/user/user']['access arguments'] = '';
    $items['admin/user/user']['access callback'] = 'isa_toolbox_access_admin_user';
    $items['admin/help/user']['access arguments'] = '';
    $items['admin/help/user']['access callback'] = 'isa_toolbox_access_admin_user';
    // We want to ensure an anonymous user will not be able to view the "Edit" and "Revisions" menus,
    // especially for the license wizard wikis
    $items['node/%node/delete']['type'] = MENU_LOCAL_TASK;
    $items['node/%node/delete']['access callback'] = 'isa_toolbox_menu_access_node_delete';
    $items['node/%node/delete']['access arguments'] = array(1);
    $items['node/%node/edit']['access callback'] = 'isa_toolbox_menu_access_node_edit';
    $items['node/%node/edit']['access arguments'] = array(1);
    $items['node/%node/revisions']['access callback'] = 'isa_toolbox_menu_access_node_revisions';
    $items['node/%node/revisions']['access arguments'] = array(1);
    $items['node/add/project-release/%']['access callback'] = 'isa_toolbox_menu_access_node_add_release';
    /* Alter menus for the menu on the left */
    if (!user_access('administer taxonomy')) {
        unset($items['admin/content/taxonomy/list']);
    }
}

/**
 *
 * @global object $user
 * @param type $op
 * @param type $node
 * @param type $account
 * @return type 
 */
function isa_toolbox_menu_access_node_add_release($op, $node, $account) {
    global $user;
    $pid = variable_get('current_group', isa_toolbox_get_community_nid());
    if ($pid) {
        $project = node_load($pid);
        return ($user->uid == $project->uid || user_access('create release project') || isa_toolbox_is_omnipotent());
    }
    return FALSE;
}

/**
 * Access callback for nodes "Delete" menu
 * @param object $node the node given as an access argument
 * @return boolean permission or not permission
 */
function isa_toolbox_menu_access_node_delete($node) {
    global $user;
    if (!isset($user->uid) || $user->uid == 0) {
        return FALSE;
    } elseif ($node->type == ISA_REPOSITORY_TYPE) {
        if ($node->_workflow != ISA_SID_REPOSITORY_DRAFT && $node->_workflow != ISA_SID_REPOSITORY_REQUESTED_DELETION && $node->_workflow != ISA_SID_REPOSITORY_POSTPONED_DELETION) {
            //A repository cannot be deleted if it is not in draft and not in requested/postponed deletion
            return isa_toolbox_is_omnipotent($user);
        } else {
            if ($node->_workflow != ISA_SID_REPOSITORY_DRAFT) {
                //in other states, only moderator can delete it
                return user_access('access publishing options');
            }
        }
    } elseif ($node->type == ISA_ASSET_RELEASE_TYPE) {
        //An asset release cannot be deleted if it not in draft
        if ($node->_workflow != ISA_SID_ASSET_DRAFT) {
            //in other states, only moderator can delete it
            return user_access('access publishing options');
        }
    }
    return node_access('delete', $node);
}

/**
 * This function is aimed to authorise the asset owner to accede to the "edit" options within
 * an asset project
 * @param object $node the node given as an access argument
 * @return boolean permission or not permission
 */
function isa_toolbox_menu_access_node_edit($node, $user = NULL) {
    // If the user is not set, we get the current logged in
    // Note: it is usefull if we want to get the same authorisation as the author of a node 
    // within a project
    if (empty($user)) {
        $user = $GLOBALS['user'];
    }
    $op = 'update';
    if (!isset($user->uid) || $user->uid == 0) {
        return FALSE;
    }
    switch ($node->type) {
        // when project release is in maturity state, bypass permission "administer project" and check access grants.
        // see node_access(),project_release_access() 
        case ISA_ASSET_RELEASE_TYPE:
            // If we are within a project, we can grant the same permissions to the project owner 
            // as the author
            if (!empty($node->og_groups)) {
                $project = node_load($node->project_release['pid']);
                if ($project->uid == $user->uid && $user->uid != $node->uid) {
                    $author = user_load($node->uid);
                    // If we are the project owner we "steal" the asset owner rights
                    return isa_toolbox_menu_access_node_edit($node, $author);
                }
            }
            // There is not break here we have to continue
            //case ISA_LEGALDOCUMENT_TYPE: 
            $grants = array();
            foreach (node_access_grants($op, $account) as $realm => $gids) {
                foreach ($gids as $gid) {
                    $grants[] = "(gid = {$gid} AND realm = '{$realm}')";
                }
            }
            $grants_sql = '';
            if (count($grants)) {
                $grants_sql = 'AND (' . implode(' OR ', $grants) . ')';
            }

            $sql = "SELECT 1 FROM {node_access} WHERE (nid = 0 OR nid = %d) " .
                    "{$grants_sql} AND grant_update >= 1";
            $result = db_query_range($sql, $node->nid, 0, 1);
            $res = (bool) db_result($result);
            return $res;
            break;
        // JIRA 455 https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-455
        // Members cannot undo their signature.
        // The project owner or facilitator has no control over the signatures
        // We kept the administrator just in case
        case ISA_LEGALDOCUMENT_TYPE:
            return FALSE || isa_toolbox_is_omnipotent($user);
      case ISA_PROJECT_RELEASE_TYPE:
          return _isa_toolbox_menu_access_node_edit_project_release_type($node);
        default:
            if (empty($node->og_groups))
                return node_access('update', $node);
            return og_menu_access_node_edit($node);
    }
}

/**
 * Permission of edit project release (only for the node author or if the user have the role of release manager)
 * ISAICP-362
 * @param $node
 * @return bool
 */
function _isa_toolbox_menu_access_node_edit_project_release_type($node){
  global $user;
  $group_nid = isa_og_helper_get_group_nid();
  if($group_nid){
    $group_node = node_load($group_nid);
    $group_user_roles = og_user_roles_get_roles_by_group($group_nid, $user->uid);
    if($group_node->uid == $user->uid || $user->uid == 1 || in_array(ISA_RID_RELEASE_MANAGER, $group_user_roles)){
       //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-362  
       //Give project owner temporal release manager role
      $group_node->uid == $user->uid ? $user->roles[ISA_RID_RELEASE_MANAGER] = db_result(db_query('SELECT name FROM role WHERE rid=%d', ISA_RID_RELEASE_MANAGER)) : FALSE;
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback for nodes "Revisions" menu
 * @param object $node the node given as an access argument
 * @return boolean permission or not permission
 */
function isa_toolbox_menu_access_node_revisions($node) {
    global $user;
    if (!isset($user->uid) || $user->uid == 0)
        return FALSE;
    return diff_node_revision_access($node);
}

/**
 * access callback of admin/user/user/create
 * @see isa_toolbox_menu_alter ()
 */
function isa_toolbox_access_admin_user() {
    return user_access('administer users') || user_access('manage users');
}

/** Implement of hook_user_operations
 *
 * implement this hook for add the permission "manage users" for edit users roles
 * in page /admin/user/user/list
 */
function isa_toolbox_user_operations($form_state = array()) {
    $operations = array();
    if (!user_access('administer permissions') && user_access('manage users')) {
        $roles = user_roles(TRUE);
        if (isa_toolbox_is_in_virtual_forge()) {
            $vf_admin_rid = variable_get('vf_admin_rid', NULL);
            if ($vf_admin_rid) {
                $add_roles['add_role-' . $vf_admin_rid] = $roles[$vf_admin_rid];
                $remove_roles['remove_role-' . $vf_admin_rid] = $roles[$vf_admin_rid];
            }
        } else {
            $moderator_rid = variable_get('moderator_rid', NULL);
            if ($moderator_rid) {
                $add_roles['add_role-' . $moderator_rid] = $roles[$moderator_rid];
                $remove_roles['remove_role-' . $moderator_rid] = $roles[$moderator_rid];
                ;
            }
            $cp_manager = variable_get('clearing_process_manager_rid', NULL);
            if ($cp_manager) {
                $add_roles['add_role-' . $cp_manager] = $roles[$cp_manager];
                $remove_roles['remove_role-' . $cp_manager] = $roles[$cp_manager];
                ;
            }
        }
        $role_operations = array(
            t('Add a role to the selected users') => array(
                'label' => $add_roles,
            ),
            t('Remove a role from the selected users') => array(
                'label' => $remove_roles,
            ),
        );
        $operations += $role_operations;
    }
    // If the form has been posted, we need to insert the proper data for
    // role editing if necessary.
    if (!empty($form_state['submitted'])) {
        $operation_rid = explode('-', $form_state['values']['operation']);
        $operation = $operation_rid[0];
        if ($operation == 'add_role' || $operation == 'remove_role') {
            $rid = $operation_rid[1];
            if (!user_access('administer permissions') && user_access('manage users')) {
                $operations[$form_state['values']['operation']] = array(
                    'callback' => 'user_multiple_role_edit',
                    'callback arguments' => array($operation, $rid),
                );
            } else {
                watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);
                return;
            }
        }
    }
    return $operations;
}

/**
 * Return the number of federated projects published in a federated forge
 *
 * @param integer $nid the nid of the federated forge
 * @return integer $nb_fed_proj the number of published federated projects
 */
function isa_toolbox_get_federated_projects_count_from_federated_forge($nid) {
    $sql = "SELECT COUNT(*)
          FROM {content_type_federated_project} ctfp
          INNER JOIN {workflow_node} wn ON wn.nid = ctfp.nid
          INNER JOIN {node} n ON n.nid = ctfp.nid
          WHERE ctfp.field_fed_project_forge_nid = '%d'
          AND wn.sid = '%d'
          AND ((n.tnid = 0 OR n.tnid = n.nid AND n.language LIKE 'en') OR (n.tnid != 0 AND n.tnid != n.nid AND n.language LIKE 'en') OR (n.tnid = 0 OR n.tnid = n.nid AND n.language NOT LIKE 'en' AND 'en' NOT IN (select language from node nf where nf.tnid=n.nid)))";
    // last sql condition: is original node in english, or translated node in english, or original node (if there is no translated english node)
    return db_result(db_query($sql, $nid, ISA_SID_FEDPROJ_PUBLISHED));
}

/**
 * Return the list of all links to translations available for a node
 *
 * @param integer $nid the nid of the node
 * @return array $translations the list of links
 */
function isa_toolbox_get_translations_list($nid) {
    global $language;
    $translations = array();
    $node = node_load($nid);
    $t_translation = translation_node_get_translations($node->tnid);
    if ($t_translation) {
        foreach ($t_translation as $lg => $value) {
            if ($node->language != $lg) {
                $language_name = locale_language_name($lg);
                $path = 'node/' . $value->nid;
                $path = drupal_get_path_alias($path, $lg);
                $node_translation = l($value->title, $path, array(language => ''));
                $translations[$language_name] = $node_translation;
            }
        }
    }
    return $translations;
}

/**
 * Implement of hook_initv
 *
 */
function isa_toolbox_init() {
    $path = explode('/', $_GET['q']);
    if ($path[0] == 'node') {
        $node = menu_get_object();
        // redirect url /profile/username to /people/uid
        if ($node->type == 'profile') {
            drupal_goto('people/' . $node->uid);
        }
        //redirect old case studies & guidelines pages to new.
    }
	// ISAICP-869 - Necessary improvement on Joinup URLs to avoid 404 paths and make them 'smarter'	
	if ( arg(0) == 'community' ) {
		$nid = db_result(db_query("SELECT nid FROM content_type_community WHERE field_community_short_name_value='%s'", arg(1)));		
	}
	if ( arg(0) == 'software' || arg(0) == 'asset' ){		
		$nid = db_result(db_query("SELECT nid FROM project_projects WHERE uri='%s'", arg(1)));		
	}
	if (isset($nid) && is_null(arg(2))){	
		drupal_goto(arg(0) . '/' . arg(1) . '/description', NULL, NULL, 301);		
	}
	
	if (isset($nid)) {
		$opt = arg(count($path) -1);
		if ( $opt == "newsandblog" || $opt == "release" || $opt == "elibrary" || $opt == "forum" || $opt == "event" 
			|| $opt == "community" || $opt == "asset" || $opt == "software" || $opt == "issue") {		
			drupal_goto($_GET['q'] . '/all', NULL, NULL, 301);
		}
	}
		
	
    $gid = isa_toolbox_get_community_nid();
    if ($gid) {
        global $conf;
        $conf['current_group'] = $gid;
    }
    global $user;
    $profile = content_profile_load('profile', $user->uid);
    if ($profile) {
        $user->node_profile = $profile;
    }


    drupal_add_js('function destroyWYSIWYG(){
    for(var instanceName in CKEDITOR.instances) {
        CKEDITOR.instances[instanceName].destroy();
    }
    
    return false;
}', 'inline');

    drupal_add_js("function addEventToAddEntryButton(){Drupal.behaviors.destroyWYSIWYG_FIX = function(context) {
$('#edit-field-content-field-content-add-more').click(function(){destroyWYSIWYG()})
                                                 .mousedown(function(){destroyWYSIWYG()})
                                                 .keypress(function(){destroyWYSIWYG()});
};}", 'inline');


    drupal_add_js(drupal_get_path('module', 'isa_toolbox') . '/customize_field.js', 'module', 'header', FALSE, TRUE, FALSE);
    //add toogle before asset release translated field and alternative field
    drupal_add_js('jQuery(document).ready(function () { retheme_field("asset_release_define","Translated Asset release name","#edit-field-asset-name-items"); });', 'inline');
    //add toogle before asset release description
    drupal_add_js('jQuery(document).ready(function () { retheme_field("asset_release_description_define","Translated Asset release description","#edit-field-asset-description-items"); });', 'inline');
    //add toogle before distribution translated name
    drupal_add_js('jQuery(document).ready(function () { retheme_field("distribution_name_define","Translated Distribution name","#edit-field-distribution-name-items"); });', 'inline');
    //add toogle before distribution description
    drupal_add_js('jQuery(document).ready(function () { retheme_field("distribution_description_define","Translated Distribution description","#edit-field-distribution-description-items"); });', 'inline');
    //add toogle before repository translated name
    drupal_add_js('jQuery(document).ready(function () { retheme_field("repository_name_define","Translated Repository name","#edit-field-repository-name-items"); });', 'inline');
    //add toggle before repository description
    drupal_add_js('jQuery(document).ready(function () { retheme_field("repository_description_define","Translated Repository description","#edit-field-repository-description-items"); });', 'inline');
    //add toggle before licence translated name
    drupal_add_js('jQuery(document).ready(function () { retheme_field("licence_name_define","Translated Licence name","#edit-field-licence-name-items"); });', 'inline');
    //add toggle before licence translated description
    drupal_add_js('jQuery(document).ready(function () { retheme_field("licence_description_define","Translated Licence description","#edit-field-licence-description-items"); });', 'inline');
    //add toggle before translated documentation name
    drupal_add_js('jQuery(document).ready(function () { retheme_field("documentation_name_define","Translated Documentation name","#edit-field-documentation-title-items"); });', 'inline');
    //add toggle before translated item label
    drupal_add_js('jQuery(document).ready(function () { retheme_field("item_label_define","Translated Item label","#edit-field-item-label-items"); });', 'inline');
    //add toggle before field item description
    drupal_add_js('jQuery(document).ready(function () { retheme_field("item_description_define","Translated Item description","#edit-field-item-description-items"); });', 'inline');
    //add toggle before field item publisher name
    drupal_add_js('jQuery(document).ready(function () { retheme_field("item_publisher_define","Translated publisher name","#edit-field-publisher-name-items"); });', 'inline');
}

/**
 * Return the path to the 'What are Kudos?' page
 *
 * @return string path to page
 */
function isa_toolbox_get_kudos_page() {
    $sql = "SELECT nid FROM {node} WHERE title = '%s'";
    $nid = db_result(db_query($sql, 'What are Kudos?'));
    $path = 'node/' . $nid;
    return $path;
}

/**
 * Return a formatted date with user timezone
 *
 * @param date $date the date to format
 * @param string $timezone user timezone (optional)
 * @return string $date formatted date
 */
function isa_toolbox_get_timezone_date($date, $timezone = NULL) {
    if ($timezone == NULL)
        $timezone = date_default_timezone_name(TRUE);
    $type = DATE_DATETIME;
    $date = date_make_date($date, 'UTC', $type);
    date_timezone_set($date, timezone_open($timezone));
    $date = date_format_date($date, 'custom', 'd F Y - g:ia');
    $date .= " (" . $timezone . " time)";
    return $date;
}

/**
 * Return the original node of a translated node
 * @param object $node the translated node
 * @return object $node the original node
 */
function isa_toolbox_get_original_node($node) {
    $tnid = $node->tnid;
    if ($tnid == 0)
        $tnid = $node->nid;
    $node = node_load($tnid);
    return $node;
}

/**
 * Implement of hook_rules_condition_info()
 */
function isa_toolbox_rules_condition_info() {
    return array(
        'isa_toolbox_condition_is_group_public' => array(
            'label' => t('Group is public'),
            'arguments' => array(
                'group' => array(
                    'type' => 'node',
                    'label' => t('Group'),
                ),
            ),
            'help' => t('Evaluates to TRUE if the group is public.'),
            'module' => 'ISA Toolbox',
        ),
        'isa_toolbox_condition_is_software' => array(
            'label' => t('Group is software'),
            'arguments' => array(
                'group' => array(
                    'type' => 'node',
                    'label' => t('Group'),
                ),
            ),
            'help' => t('Evaluates to TRUE if the group is a software.'),
            'module' => 'ISA Toolbox',
        ),
        'isa_toolbox_condition_is_asset' => array(
            'label' => t('Group is asset'),
            'arguments' => array(
                'group' => array(
                    'type' => 'node',
                    'label' => t('Group'),
                ),
            ),
            'help' => t('Evaluates to TRUE if the group is an asset.'),
            'module' => 'ISA Toolbox',
        ),
    );
}

/**
 * Condition that determines if the group is public or private
 */
function isa_toolbox_condition_is_group_public($node, $settings) {
    return ($node->og_selective == OG_OPEN);
}

/**
 *
 * @param type $node
 * @param type $settings
 * @return type 
 */
function isa_toolbox_condition_is_software($node, $settings) {
    return ($node->group_type == ISA_SOFTWARE_TYPE);
}

/**
 *
 * @param type $node
 * @param type $settings
 * @return type 
 */
function isa_toolbox_condition_is_asset($node, $settings) {
    return ($node->group_type == ISA_ASSET_TYPE);
}

/**
 * Implement of hook_views_api().
 */
function isa_toolbox_views_api() {
    return array(
        'api' => 2.0,
        'path' => drupal_get_path('module', 'isa_toolbox') . '/includes',
    );
}

/**
 * Get a view title from a menu item
 * @param array $menu_item use menu_get_item
 * @return string the view title
 */
function isa_toolbox_get_view_title($menu_item) {
    if (count($menu_item['page_arguments']) != 2) {
        return '';
    }
    $sql = "SELECT vd.display_options
    FROM views_view vv
    INNER JOIN views_display vd ON vv.vid = vd.vid
    WHERE vv.name = '%s'
    AND vd.id = '%s'";
    $view = unserialize(db_result(db_query($sql, (is_string($menu_item['page_arguments'][0])) ? $menu_item['page_arguments'][0] : $menu_item['page_arguments'][0]->name, $menu_item['page_arguments'][1])));
    return $view['title'];
}

/**
 *
 * @param type $file_size
 * @return string 
 */
function isa_toolbox_get_size_formatted($file_size) {
    if ($file_size >= 1073741824) {
        $file_size = round($file_size / 1073741824 * 100) / 100 . " GB";
    } elseif ($file_size >= 1048576) {
        $file_size = round($file_size / 1048576 * 100) / 100 . " MB";
    } elseif ($file_size >= 1024) {
        $file_size = round($file_size / 1024 * 100) / 100 . " KB";
    } else {
        $file_size = $file_size . " B";
    }
    return $file_size;
}

/**
 * Return true if the node is a licese-wizard wiki page
 * 
 * @param object $node the node
 * @return boolean 
 */
function isa_toolbox_is_license_wizard_wiki($node) {
    $path_alias = explode('/', $node->path);
    return ($path_alias[1] == 'license-wizard');
}

/**
 * return true if the node concern a sofware or a asset
 */
function isa_toolbox_alias_from_oss_or_asset($node) {
    $path_alias = drupal_get_path_alias(drupal_lookup_path('source', $node->path));
    $alias = arg(2, $path_alias);
    return $alias;
}

/**
 *  Implement of hook_og_access_grants_alter
 * 
 * Remove permission to view a group for any user roles when the group isn't private and for legal documents
 * Workflow module manages this permission
 * 
 * @see og_access_node_access_records
 */
function isa_toolbox_og_access_grants_alter(&$grants, $node) {
    if ($node->type == ISA_LEGALDOCUMENT_TYPE) {
        foreach ($grants as $id => $value) {
            if ($value['realm'] == 'og_admin') {
                $grants[$id]['grant_update'] = FALSE;
            }
            if ($value['realm'] == 'og_public') {
                $grants[$id]['grant_view'] = FALSE;
            }
            if ($value['realm'] == 'og_subscriber' && $node->workflow == ISA_SID_LEGALDOC_DRAFT) {
                $grants[$id]['grant_view'] = FALSE;
            }
        }
    }
    if (og_is_group_type($node->type)) {
        if (!$node->og_private) {
            foreach ($grants as $id => $value) {
                if ($value['realm'] == 'og_public') {
                    unset($grants[$id]);
                }
            }
            $grants[] = array(
                'realm' => 'og_subscriber',
                'gid' => $node->nid,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 0,
            );
        }
    }
}

/**
 *
 * @param type $email
 * @return type 
 */
function isa_toolbox_valid_email_adress($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) && preg_match('#@[^\.]+(\.[^\.]+)+#', $email);
}

/**
 * Get the human name of content type
 *
 * @param object $node the node
 * @return string the human name of content type. NULL if $type is not found
 */
function isa_toolbox_get_node_type_name($node) {
    if ($node->type == ISA_PROJECT_TYPE) {
        if (isset($node->group_type)) {
            if ($node->group_type == ISA_ASSET_TYPE) {
            	//https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-815
            	//added 'project' to the name
                return 'semantic asset project';
            } else {
                return $node->group_type;
            }
        }
    }
    $all_type = node_get_types();
    if (isset($all_type[$node->type]->name)) {
        return $all_type[$node->type]->name;
    }

    return NULL;
}

/**
 * Implementation of hook_js_alter 
 * 
 * 
 * @param array $javascript 
 * 
 * @see joinup_preprocess_page ()
 */
function isa_toolbox_js_alter($javascript) {
    // replace original teaser.js by a custom teaser.js
    if (isset($javascript['module']['misc/teaser.js'])) {
        $javascript['module'][drupal_get_path('module', 'isa_toolbox') . '/includes/teaser.js'] = $javascript['module']['misc/teaser.js'];
        unset($javascript['module']['misc/teaser.js']);
    }
}

function isa_toolbox_admin_infobox_page() {

    $form['message_status'] = array(
        '#type' => 'radios',
        '#title' => t('Message status'),
        '#default_value' => variable_get('message_status', 0),
        '#options' => array(t('Visible'), t('Hidden')),
        '#description' => t('When set to "Visible", the message is displayed on all the pages of the site'),
    );

    $form['message_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Message to display'),
        '#default_value' => variable_get('message_text', ''),
        '#description' => t('Message to show visitors')
    );
    $form = system_settings_form($form);
    $form['#submit'][] = "isa_toolbox_admin_infobox_page_submit";

    return $form;
}

function isa_toolbox_admin_infobox_page_submit() {
    cache_clear_all("*", "cache_page", TRUE);
}

/**
 *
 * create and download the export file of a repository/asset/asset_release
 * 
 * @param $name node alias name (from title) in url alias of the contenttype to export
 * @return file download dialog
 */
function isa_toolbox_admin_export_page_alias($name) {
  // strip trailing '/rdf' from URL
  if (false!==($pos=strrpos($_GET['q'],'/rdf'))) {
    $alias = substr($_GET['q'],0,$pos);
    // if an asset project (not asset_release that belongs to an asset project), append "/description" to get the true node path alias
    if ('asset/'==substr($alias,0,6) && false===strpos($alias,'/asset_release/')) {
      $alias .= '/description';
    }
    // search for the non-alias path (node/<nid>)
    if ($path = drupal_lookup_path('source',$alias)) {
      // load the node
      $node = menu_get_object('node', 1, $path);
      isa_toolbox_admin_export_page($node);
    } else {
      return t('Error in RDF export URL: Could not find any content with the URL "@a"', array('@a'=>$alias));
    }
  } else {
    return t('Error in RDF export URL. The URL "@a" does not end in "/rdf"', array('@a'=>$_GET['q']));
  }
}

/**
 *
 * create and download the export file of a repository/asset/asset_release
 * 
 * @param $nid  nid of the contenttype to export
 * @return file download dialog
 */
function isa_toolbox_admin_export_page($nid) {
    //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-705
    //Increase php timeout for repositories with a lot of related nodes
    set_time_limit(180);
    if (is_object($nid)) {
      $node = $nid;
      $nid = $node->nid;
    } else {
      $node = node_load($nid);
    }
    //create the file
    $file = "sites/default/files/adms_export/exportADMS_{$nid}";
    if (!$fp = fopen("{$file}.rdf", 'w+')) {
        return 'Impossible to create the temporary file. Please contact the site administrator';
    }
    Logger::configure(retrieveLogConfiguration("{$file}.log", FALSE));
    $logger = Logger::getLogger('isa_toolbox');
    try {
        $output = '';
        //export of drupal node
        $adapter = \Adapters\AdapterFactory::getAdapter('drupal');
        $data = $adapter->load($nid);
        $adapter = \Adapters\AdapterFactory::getAdapter();
        
        $adapter->export($data, $output);
        //$logger->info("End of the treatment for the repository '{$repository->title}'");
        //https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-705
        //Error exporting with & in urls, remove the htmlspecialchars_decode function
        $result = $output;
        fputs($fp, $result);
        fclose($fp);
        header('Content-type: text/xml');
        die($result);
    } catch (\Exception $e) {
        $logger->fatal($e->getMessage());
        return $e->getMessage();
    }
}

/**
 *
 * Return a web directory configuration
 * 
 * @param type id of the web directory or an array of conditions to match against in the database query
 * @return type 
 */
function isa_toolbox_get_web_directory($param) {
    if ($param && !empty($param)) {
        $single = FALSE;
        if (is_numeric($param)) {
            $single = TRUE;
            $cond = 'wd.web_id = %d';
            $arguments[] = $param;
        } elseif (is_array($param)) {
            // Turn the conditions into a query.
            foreach ($param as $key => $value) {
                $cond[] = 'wd.' . db_escape_table($key) . " = '%s'";
                $arguments[] = $value;
            }
            $cond = implode(' AND ', $cond);
        }
        $sql = "SELECT * FROM {web_directories} wd WHERE $cond";
        $result = db_query($sql, $arguments);
        $wd = array();
        while ($row = db_fetch_object($result)) {
            $wd[] = $row;
        }
        if ($single) {
            return $wd[0];
        } else {
            return $wd;
        }
    } else {
        return FALSE;
    }
}

/**
 * This function is rendering the size of a file in a human readable format
 * @param int size the size of the file in bytes
 * @return string the size formated
 */
function _isa_toolbox_render_file_size($size) {
    $unit = array(t('B'), t('KB'), t('MB'), t('GB'), t('TB'), t('PB'));
    $i = floor(log($size, 1024));
    $byte_size = $size / pow(1024, $i);

    if ($byte_size == floor($byte_size))
        return $byte_size . ' ' . $unit[$i];

    preg_match('/^[0-9]+\.[0-9]{2}/', $byte_size, $matches);
    return $matches[0] . ' ' . $unit[$i];
}

function isa_toolbox_form_search_form_alter(&$form) {
    if ($form['module']['#value'] == 'apachesolr_search') {
        // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-377
        // text in the yellow box of the advance search
        $text = variable_get('group_advanced_search_text_information', FALSE);
        if ($text) {
            $form['#prefix'] = '<div class="view-header">' . token_replace($text, 'global') . '</div>' . $form['#prefix'];
        }
        // https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-726
        // In issue ISAICP-726 remove the yellow box, so we developed in issue ISAICP-377 is removed   
    }
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see isa_toolbox_field_formatter_info
 * @see theme_isa_toolbox_formatter_flexifield_identifier
 * @see theme_isa_toolbox_formatter_flexifield_language
 */
function isa_toolbox_theme() {
    return array(
        'isa_toolbox_formatter_flexifield_language' => array(
            'arguments' => array('element' => NULL),
        ),
        'isa_toolbox_formatter_flexifield_identifier' => array(
            'arguments' => array('element' => NULL),
        ),
        'isa_toolbox_formatter_filefield_anonymous_download' => array(
            'arguments' => array('element' => NULL),
        ),
        'isa_toolbox_formatter_node_reference_teaser' => array(
            'arguments' => array('element' => NULL),
        ),
    );
}

/**
 * Implements hook_field_formatter_info().
 *
 * Add a new formatter for the flexifield language and flexified identifier.
 */
function isa_toolbox_field_formatter_info() {
    $new_formatter['flexifield_language'] = array(
        'label' => t('Flexifield language'),
        'field types' => array('flexifield'),
        'module' => 'isa_toolbox',
    );
    $new_formatter['flexifield_identifier'] = array(
        'label' => t('Flexifield identifier'),
        'field types' => array('flexifield'),
        'module' => 'isa_toolbox',
    );
    $new_formatter['filefield_anonymous_download'] = array(
        'label' => t('Anonymous download'),
        'field types' => array('filefield'),
        'module' => 'isa_toolbox',
    );
    $new_formatter['node_reference_teaser'] = array(
        'label' => t('Short Teaser'),
        'field types' => array('nodereference'),
        'module' => 'isa_toolbox',
    );
    return $new_formatter;
}

/**
 * Show an node shorter than the existing teaser
 * @param type $element 
 */
function theme_isa_toolbox_formatter_node_reference_teaser($element) {
    if ($element['#item']['nid'] == NULL)
        return;

    return l($element['#item']['safe']['title'], "node/{$element['#item']['nid']}");
}

/**
 * Theme function for flexifield language.
 * 
 * @see isa_toolbox_theme
 */
function theme_isa_toolbox_formatter_flexifield_language($element) {
    $item = $element['#item'];
    $type = $item['type'];
    if ($type != 'language_textfield' && $type != 'language_textarea') {
        return theme_flexifield_formatter_default($element);
    }
    // When we display traductions into a view
    $lang_filter = $_GET['field_language_textfield_lang_value'];
    if ($_GET['q'] == 'catalogue/all' || isset($lang_filter)) {
        if ($item['value']['field_' . $type . '_lang'][0]['value'] == $lang_filter) {
            $value = $item['value']['field_' . $type . '_name'][0]['value'];
            return $value;
        }
        return '';
    }
    $type_css = str_replace('_', '-', $type);
    $value = $item['value']['field_' . $type . '_name'][0]['value'];
    return "<div class='field-$type_css'>$value</div>";
}

/**
 * Theme function for flexifield identifier.
 * 
 * @see isa_toolbox_theme
 */
function theme_isa_toolbox_formatter_flexifield_identifier($element) {
    $item = $element['#item'];
    $type = $item['type'];
    if ($type != 'identifier') {
        return theme_flexifield_formatter_default($element);
    }

    $return = array();
    foreach ($item['value'] as $key => $value) {
        if (isset($value['0']['value']) && !empty($value['0']['value'])) {
            $return[] = $value['0']['value'];
        }
    }
    return implode(' - ', $return);
}

/**
 * Theme function for file anonymous download.
 *
 * @see isa_toolbox_theme
 */
function theme_isa_toolbox_formatter_filefield_anonymous_download($element) {
    global $user;
    $file = $element['#item'];

    // Views may call this function with a NULL value, return an empty string.
    if (empty($file['fid'])) {
        return '';
    }

    $path = $file['filepath'];
    $class = '';
    //anonymous download
    if (isset($user->roles[1])) {
        //Retrieve the assset release nid
        $sql = "SELECT nid FROM {content_field_asset_distribution} WHERE field_asset_distribution_nid = %d";
        $asset_release_nid = db_result(db_query($sql, $element['#node']->nid));
        if ($asset_release_nid) {
            $path = "anonymous_validation/{$asset_release_nid}/{$file['fid']}";
            $class = 'popups';
        }
    }
    $url = file_create_url($path);
    $icon = theme('filefield_icon', $file);
    $options = array(
        'attributes' => array(
            'type' => $file['filemime'] . '; length=' . $file['filesize'],
            'class' => $class,
        ),
    );

    // Use the description as the link text if available.
    if (empty($file['data']['description'])) {
        $link_text = $file['filename'];
    } else {
        $link_text = $file['data']['description'];
        $options['attributes']['title'] = $file['filename'];
    }

    /** modified SGS : cut filename if it's too long */
    if (strlen($link_text) > MAX_DISPLAY_FILENAME_WIDTH) {
        $link_text = substr($link_text, 0, MAX_DISPLAY_FILENAME_WIDTH);
        $link_text .= '...';
    }
    return '<div class="filefield-file">' . $icon . l($link_text, $url, $options) . '</div>';
}

/**
 * Return the type of the case
 * @param <node> $node
 * @return <int> 0 : general case study, 1 : Open source case study, 2 : Guideline
 */
function isa_toolbox_get_case_type($node) {
    $terms = taxonomy_node_get_terms($node);
    $term_case = taxonomy_get_term(variable_get('case_open_source_tid', NULL));
    $term_guideline = taxonomy_get_term(variable_get('case_guideline_tid', NULL));
    if (in_array($term_case, $terms)) {
        return 1;
    }
    if (in_array($term_guideline, $terms)) {
        return 2;
    }
    return 0;
}

/**
 * Implementation of hook_filefield_icon_sets().
 * Define a list of icon sets and directories that contain the icons.
 */
function isa_toolbox_filefield_icon_sets() {
    return array(
        'joinup' => drupal_get_path('theme', 'joinup') . '/images/icons/document',
    );
}

/**
 * Return a node with the uri as argument
 * @param <uri> $uri
 * @param <contenttype> $contenttype
 * @return <nid> if exist or false
 */
function isa_toolbox_get_node_id_by_uri($uri, $contenttype) {
    $query = "SELECT content_field_id_uri.nid 
  FROM content_field_id_uri 
    INNER JOIN node USING (nid) 
  WHERE field_id_uri_value = '{$uri}' AND type = '{$contenttype}' 
  ORDER BY content_field_id_uri.vid";

    $term = db_fetch_array(db_query($query));
    if (count($term) > 0) {
        return $term['nid'];
    }
    return false;
}

/**
 * Return the tid of a term in function of this fieldsterm and is taxonomy vid
 * @param <uri> $uri
 * @param <vid> $vid
 * @return <node> if exist or false
 */
function isa_toolbox_get_tid_byuri($uri, $vid) {
    $query = "SELECT tid from term_fields_term 
  WHERE taxonomy_uri_value = '{$uri}' AND vid='{$vid}' ORDER BY tid";

    $res = db_query($query);
    $term = db_fetch_array($res);

    if (count($term) > 0) {
        return $term['tid'];
    }
    return false;
}

/**
 * Return the uri of a term by its tid
 * @param <tid> $uri
 * @return <uri> if exist or false
 */
function isa_toolbox_get_uri_bytid($tid) {

    $query = "SELECT taxonomy_uri_value from term_fields_term  WHERE tid = '{$tid}'  ORDER BY tid";

    $res = db_query($query);
    $term = db_fetch_array($res);

    if (count($term) > 0) {
        return $term['taxonomy_uri_value'];
    }
    return false;
}

function isa_toolbox_get_lang_code_byuri($uri) {
    $query = "SELECT language FROM languages WHERE domain = '{$uri}'";

    $res = db_query($query);
    $term = db_fetch_array($res);

    if (count($term) > 0) {
        return $term['language'];
    }
    return FALSE;
}

/**
 * This function is returning the absolute path of Joinup regarding its node id
 * @param integer $nid
 * @return the path if exists otherwise NULL
 */
function isa_toolbox_get_URI_from_path($nid) {
    $query = "SELECT dst FROM {url_alias} WHERE src = '%s';";

    $test = sprintf($query, "node/{$nid}");
    $results = db_query($query, "node/{$nid}");
    while ($result = db_fetch_object($results)) {
        return "{$GLOBALS['base_url']}/{$result->dst}";
    }
    return NULL;
}

/**
 * This method is getting the language from the URL and the 'lang' parameter
 * it is used for the flexifield on the ADMS part of the application
 * @return string the language (default is 'en')
 */
function isa_toolbox_get_lang_in_url() {
    if ($_GET['lang']) {
        return $_GET['lang'];
    } else if (preg_match('#^.*/lang=(.*)$#', $_GET['q'], $match)) {
        return $match[1];
    }
    return 'en';
}

/**
 * Removes attributes in the given node if they are not "filled", i.e.
 * the checked attributes should be arrays with at least one component
 * which contains at least one component with the given key name for each attribute
 * This function helps when comparing two nodes for attributes, cleaning node attributes which are empty but may be different in structure
 * @param stdClass $node the given node, can be modified inside this function
 * @param string $attribute_keys array of pairs atribute-name => search-key to check for in the node
 * @return void
 */
function _isa_toolbox_trim_empty_node_attribute(&$node, $attribute_keys) {
    if (is_array($attribute_keys) && count($attribute_keys)) {
        foreach ($attribute_keys as $attribute => $search_key) {
            $__t = & $node->$attribute;    // will not work using directly $node->$attribute
            if (!(is_array($__t) && isset($__t[0]) && is_array($__t[0]) && isset($__t[0][$search_key]) && !empty($__t[0][$search_key]))) {
                unset($node->$attribute);
            }
        }
    }
}

/**
 * This method is comparing two nodes in order to determine if they are different or not
 * by default, it takes the 'title', the 'type', the 'body', the 'taxonomy', 
 * and all the cck fields 'field_%'
 * To add the author, dates... use the array additionalParameters
 * @param stdClass $node1
 * @param stdClass $node2
 * @param array $additionalParameters an array of additional parameters
 * @return boolean TRUE if the nodes are equal regarding 
 */
function _isa_toolbox_equal_node($node1, $node2, $additionalParameters = array()) {
    $fieldNames = array('title', 'type', 'description', 'taxonomy');
    // We don't need to do it on all variables as they have the same type
    $attributes1 = array_keys(get_object_vars($node1));
    $attributes2 = array_keys(get_object_vars($node2));
    $attributes = $attributes1 + $attributes2; // union of attributes present either in the existing or the imported nodes
    $fieldNames = array_merge($fieldNames, array_filter($attributes, function ($item) {
                        return preg_match('#^field_.*#', $item);
                    }), $additionalParameters);

    // add or remove fields for comparison, depending on the node type
    $fieldNames = array_unique($fieldNames);
    switch ($node1->type) {
        case 'repository':
            $fieldNames[] = 'body';
            $fieldNames[] = 'created';
            break;
        case 'asset_release':
            if (false !== ($_idx = array_keys($fieldNames, 'field_asset_node_reference'))) {
                unset($fieldNames[$_idx[0]]);
            }
            $fieldNames[] = 'body';
            $fieldNames[] = 'created';
            $_attributes = array(
                'field_asset_identifier' => 'type',
                'field_asset_version' => 'type',
                'field_asset_version_note' => 'type',
                'field_language_multiple' => 'value',
                'field_metadata_language_multiple' => 'value',
                'field_asset_temporal_coverage' => 'value',
            );
            _isa_toolbox_trim_empty_node_attribute($node1, $_attributes);
            _isa_toolbox_trim_empty_node_attribute($node2, $_attributes);
            break;
        case 'distribution':
            $fieldNames[] = 'body';
            $fieldNames[] = 'created';
            $_attributes = array(
                'field_distribution_access_url' => 'fid',
                'field_distribution_access_url1' => 'url',
            );
            _isa_toolbox_trim_empty_node_attribute($node1, $_attributes);
            _isa_toolbox_trim_empty_node_attribute($node2, $_attributes);
            break;
        case 'licence':
            $fieldNames[] = 'body';
            break;
        case 'documentation':
            if (false !== ($_idx = array_keys($fieldNames, 'field_documentation_name'))) {
                unset($fieldNames[$_idx[0]]);
            }
            if (false !== ($_idx = array_keys($fieldNames, 'taxonomy'))) {
                unset($fieldNames[$_idx[0]]);
            }
            $_attributes = array(
                'field_documentation_access_url' => 'fid',
                'field_documentation_access_url1' => 'url',
            );
            _isa_toolbox_trim_empty_node_attribute($node1, $_attributes);
            _isa_toolbox_trim_empty_node_attribute($node2, $_attributes);
            break;
        case 'contact_point':
            if (false !== ($_idx = array_search('taxonomy', $fieldNames))) {
                unset($fieldNames[$_idx]);
            }
            if (is_array($node2->field_contact_point_address)) {
                foreach ($node2->field_contact_point_address as $k => $_addr) {
                    unset($node2->field_contact_point_address[$k]['type']);
                    $node2->field_contact_point_address[$k]['format'] = null;
                }
            }
            break;
        case 'item':
            if (false !== ($_idx = array_keys($fieldNames, 'taxonomy'))) {
                unset($fieldNames[$_idx[0]]);
            }
            $fieldNames[] = 'body';
            break;
    }

    // I compare field per field
    foreach ($fieldNames as $field) {
        if (is_array($node1->$field) && is_array($node2->$field)) {
            // In case the field has been initialised but with empty values
            if (count($node1->$field) == 0) {
                if (!_isa_toolbox_has_value($node2->$field)) {
                    break;
                }
            }
            // In case the field has been initialised but with empty values
            if (count($node2->$field) == 0) {
                if (!_isa_toolbox_has_value($node1->$field)) {
                    break;
                }
            }
            // First, we sort the table by keys
            if (key($node1->$field) !== NULL && key($node2->$field) !== NULL) {
                ksort($node1->$field);
                ksort($node2->$field);
            } else {
                ksort($node1->$field);
                ksort($node2->$field);
            }
        }

        // Reformatting the array of the keywords taxonomy for the correct compare and thus avoid the false changes detection
        $keywords_vid = variable_get('keywords_vid', 28);
        $keywords = array();
        if ($field == 'taxonomy') {
            foreach ($node1->$field as $tid => $object) {
                unset($object->v_weight_unused);
                $node1->taxonomy[$tid] = $object;
                if ($object->vid == $keywords_vid) {
                    $keywords[] = $object->name;
                    unset($node1->taxonomy[$tid]);
                    $keyword_exists = TRUE;
                }
            }
            if (isset($keyword_exists)) {
                asort($keywords);
                $node1->taxonomy = array('tags' => array($keywords_vid => implode(',', $keywords))) + $node1->taxonomy;
            }
        }

        if ($node1->$field != $node2->$field) {
            return FALSE;
        }
    }
    return TRUE;
}

/**
 * This method is checking if the table has values 
 * @param type $array the table to check
 * @return type true if the method has values otherwise false
 */
function _isa_toolbox_has_value($array) {
    // We don't mind the keys
    foreach ($array as $value) {
        if (is_array($value)) {
            return _isa_toolbox_has_value($value);
        } else {
            if (isset($value)) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

/**
 * Check for valid URI with RFC3986
 * @param type $uri
 * @return type true if uri is valid otherwise false
 */
function _isa_toolbox_valid_uri($uri) {
    require_once( drupal_get_path('module', 'isa_toolbox') . '/includes/RFC3986URI.php');
    try {
        new RFC3986URI($uri);
    } catch (Exception $e) {
        return FALSE;
    }

    return TRUE;
}
/**
 * Implement of hook_preprocess()
 */
function isa_toolbox_preprocess(&$vars, $hook){
    if('page' == $hook){
        //Configure page title for certain simple search pages
        if('catalogue' == arg(0) and 'all' == arg(1)){//Federated Reposotories
            $vars['title'] = token_replace(variable_get('group_asset_releases_list_text_information', FALSE), 'global');
        }
        if('asset' == arg(0) and 'all' == arg(1)){//Find and Reuse Semantic Assets
            $vars['title'] = token_replace(variable_get('group_asset_projects_list_text_information', FALSE), 'global');
        }
        if('catalogue' == arg(0) and 'repository' == arg(1)){//Semantic Assets
            $vars['title'] = token_replace(variable_get('group_federated_repositories_list_text_information', FALSE), 'global');
        }
        //Set layout for Welcome pages of community and project_project node types
        if('community' == arg(0) and 'home' == arg(2)){
            $vars['title'] = "<div class='subtitle-box'><span></span><h3><strong>". t('Community') ."</strong></h3></div>";
        }
        if('asset' == arg(0) and 'home' == arg(2)){
            $vars['title'] = "<div class='subtitle-box'><span></span><h3><strong>". t('Semantic') ."</strong> ". t('asset') . "</h3></div>";
        }
        if('software' == arg(0) and 'home' == arg(2)){
            $vars['title'] = "<div class='subtitle-box'><span></span><h3><strong>". t('Software') ."</strong> ". t('project') . "</h3></div>";
        }
    }
}   

/**
*
*
*/

function isa_toolbox_redirect_goto($redirect = NULL) {
 drupal_goto($redirect['redirect_url'], NULL, NULL, $redirect['type']);
} 

/*
Parse text to return it to html format and display correctly in the titles of the blocks on the right of the page
*/
function isa_toolbox_parse_titles($text){

	//$subject = t('Available translations');
	$subject = $text;
	$subject = explode(' ', $subject);
	if(count($subject)){
		$sw = 0;
		foreach($subject as $s){
			if($sw++==0){
				$str .= '<strong>'.$s.' </strong>';
			} else {
				$str .= $s;
			}
		}
	}
	return '<div class="subtitle-box">
                                <span></span>
                                <h3>'. $str . '</h3></div>';

}
