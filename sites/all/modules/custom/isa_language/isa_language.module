<?php
/**
 * @defgroup isa_language
 * @brief multilingual handling for ISA
 * @file 
 * Modules main file
 * @ingroup isa_language
 */

/**
 * Implement hook_perm ()
 * @return type 
 */
function isa_language_perm() {
  return array('translate content except author');
}

/**
 * Implement hook_enable()
 */
function isa_language_enable() {
  $module_name = 'isa_language';
  $weight = 2;
  db_query('UPDATE {system} SET weight = %d WHERE name = \'%s\'', $weight, $module_name);
  db_query("UPDATE {url_alias} SET language = ''");
}

/**
 * Implement hook_nodeapi
 *
 * @param type $node
 * @param type $op
 * @param type $a3
 * @param type $a4 
 */
function isa_language_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      // remove language attribute to the url alias
      db_query("UPDATE {url_alias} SET language = '' WHERE src = 'node/%s'", $node->nid);
      break;
  }
}

/**
 * Implement hook_view_query_alter
 * 
 * @param type $view
 * @param type $query 
 */
function isa_language_views_query_alter(&$view, &$query) {
  $node = NULL;
  if (isset($view->args[0])) {
    $node = node_load($view->args[0]);
  }

  if ($node && $node->tnid != 0) {
    if ($view->name == 'items' && $view->current_display == 'block_1') {
      $view->args[0] = $node->tnid;
      $query->where[0]['args'][0] = $node->tnid;
    }

    if ($view->name == 'Software_members' && $view->current_display == 'block_1') {
      $view->args[0] = $node->tnid;
      $query->where[0]['args'][0] = $node->tnid;
    }

    if ($view->name == 'isa_issue_project') {
      $view->args[0] = $node->tnid;
      $query->where[0]['args'][3] = $node->tnid;
    }

    if ($view->name == 'software_related_projects'
            && ($view->current_display == 'block_6' || $view->current_display == 'block_5')) {
      $view->args[0] = $node->tnid;
      $query->where[0]['args'][0] = $node->tnid;
      $query->where[0]['args'][3] = $node->tnid;
    }
  }
}

/**
 * Implement hook_menu_alter()
 */
function isa_language_menu_alter(&$items) {
  $items['node/%node/translate']['page callback'] = 'isa_language_translation_node_overview';
  $items['node/%node/translate']['access callback'] = 'isa_language_translation_tab_access';
}

/**
 *
 * @param type $node
 * @return type 
 */
function isa_language_translation_node_overview($node) {
  if ($node->tnid) {
    // Already part of a set, grab that set.
    $tnid = $node->tnid;
    $translations = translation_node_get_translations($node->tnid);
  }
  else {
    // We have no translation source nid, this could be a new set, emulate that.
    $tnid = $node->nid;
    $translations = array($node->language => $node);
  }

  $header = array(t('Language'), t('Title'), t('Status'), t('Operations'));

  foreach (language_list () as $language) {
    $options = array();
    $language_name = $language->name;
    if (isset($translations[$language->language])) {
      // Existing translation in the translation set: display status.
      // We load the full node to check whether the user can edit it.
      $translation_node = node_load($translations[$language->language]->nid);
      $title = l($translation_node->title, 'node/' . $translation_node->nid);
      if (node_access('update', $translation_node)) {
        $options[] = l(t('edit'), "node/$translation_node->nid/edit");
      }
      $status = $translation_node->status ? t('Published') : t('Not published');
      $status .= $translation_node->translate ? ' - <span class="marker">' . t('outdated') . '</span>' : '';
      if ($translation_node->nid == $tnid) {
        $language_name = t('<strong>@language_name</strong> (source)', array('@language_name' => $language_name));
      }
    }
    else {
      // No such translation in the set yet: help user to create it.
      $title = t('n/a');
      // Added group type and source node nid to the core-implemented links
      $type_arg = '';
      if (isset($node->group_type)) {
        if ($node->group_type == 'software')
          $type_arg = 'OSS';
        elseif ($node->group_type == 'asset')
          $type_arg = 'asset';
        $type_arg = '&type=' . $type_arg;
      }
      if (node_access('create', $node)) {
        $options[] = l(t('add translation'),
                        'node/add/' . str_replace('_', '-', $node->type),
                        array('query' => "translation=$tnid"
                            . "&language=$language->language"
                            . $type_arg));
      }
      $status = t('Not translated');
    }
    $rows[] = array($language_name, $title, $status, implode(" | ", $options));
  }

  drupal_set_title(t('Translations of %title', array('%title' => $node->title)));
  return theme('table', $header, $rows);
}

/**
 * Menu access callback.
 *
 * Only display translation tab for node types, which have translation enabled
 * and where the current node is not language neutral (which should span
 * all languages).
 */
function isa_language_translation_tab_access($node) {
  global $user;
  $is_author = $user->uid == $node->uid;
  $workflow_validated = TRUE;
  if (($node->type == ISA_PROJECT_TYPE) && ($node->_workflow != ISA_SID_COMMUNITY_VALIDATED))
    $workflow_validated = FALSE;
  return!empty($node->language) && translation_supported_type($node->type) && node_access('view', $node)
  && $workflow_validated && ($is_author || user_access('translate content except author'));
}

/**
 *
 * @param type $code
 * @return type 
 */
function isa_language_get_language_native_from_language_code($code) {
  $sql = "SELECT native
          FROM languages l
          WHERE l.language = '%s'";
  return db_result(db_query($sql, $code));
}
