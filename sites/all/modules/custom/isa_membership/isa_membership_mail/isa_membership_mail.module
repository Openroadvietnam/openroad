<?php

/**
 * @defgroup isa_membership_mail
 * @brief Module for send email for membership
 * @file 
 * Modules main file
 * @ingroup isa_membership_mail
 */

/**
 * Implement of hook_action_info().
 */
function isa_membership_mail_action_info() {
  return array(
    'isa_membership_mail_notify_community_facilitators' => array(
      'type' => 'node',
      'description' => t('Notify all facilitators of a community for membership'),
      'hooks' => array('any' => TRUE),
      'configurable' => FALSE
    ),
    'isa_membership_mail_notify_community_member' => array(
      'type' => 'node',
      'description' => t('Notify members of a community for membership'),
      'hooks' => array('any' => TRUE),
      'configurable' => FALSE
    ),
  );
}


/**
 * function for notify member of a communiy
 */
function isa_membership_mail_notify_community_member(&$object, $context = array()) {
  //send mail only when community is validated
  if ($object->_workflow == ISA_SID_COMMUNITY_VALIDATED ) {
    $node = $object;
    $params['message'] = "";
    $params['nid'] = $node->nid;
    $params['uid'] = $context_user->uid;
    $context_user = $context['user'];
    $user_mail = $context_user->mail;
    switch ($context['op']) {

// --- a user join an open community ---
      case 'user insert':
        global $user;
        if ($context_user->uid == $user->uid) {  // user join a community
        // when user request membership he is added to a community
        // no mail for moderate community
          if ($node->og_selective == OG_OPEN) {
            //$params['subject'] = variable_get("member_join_community_to_member_mail_title", "title...");
            $key = 'member_join_community_to_member';
          }
        }
        else { // user is added to a community

         // $params['subject'] = variable_get("add_member_community_to_member_mail_title", "title...");
          $key = 'add_member_community_to_member';
        }
        break;

// --- a request membership is approve ---
      case 'user approve':
        $key = 'community_request_approve_to_member';
        break;

// --- a request membership is denied ---
      case 'user deny':
        $key = 'community_request_deny_to_member';
        break;

// --- a user leave a community ---
      case 'user delete':
        global $user;
        $path = explode('/', drupal_get_normal_path($_GET['q']));
        if ($context_user->uid == $user->uid) { //user leave community
          $key = 'member_leave_community_to_member';
        }
        else{ //user is removed from a community
          // when user request membership is denied, he's removed from a community
          // no mail when request membership is denied
          if ($path[1] !='deny' ) {
            $key = "remove_member_community_to_member";
          }
        }
        break;
    }

// --- send email ---
    $resul_mail = NULL;
    if (isset ($context_user)&& isset ($key)) {
      $params['subject'] = variable_get($key . "_mail_title", "title...");
      $resul_mail = drupal_mail('isa_membership_mail', $key, $user_mail, NULL, $params, $from, TRUE);
    }
    if ($resul_mail != NULL) {
      drupal_set_message('A notification has been sent to member');
    }
  }
}

/**
 * Implement of function for notify facilitators of a communiy
 */
function isa_membership_mail_notify_community_facilitators(&$object, $context = array()) {
  //send mail only when community is validate
  if ($object->_workflow == ISA_SID_COMMUNITY_VALIDATED) {
    $node = $object;
    $params['message'] = "";
    $params['nid'] = $node->nid;
    $params['uid'] = $node->uid;
    $list_facilitators = isa_toolbox_get_users_by_og_roles($node->nid, variable_get("facilitator_rid", NULL));
    $resul_mail = NULL;
    switch ($context['op']) {

// a user send a request membership
      case 'user request':
        $params['subject'] = variable_get("community_request_membership_to_facilitators_mail_title", "title...");
        foreach ($list_facilitators as $uid => $facilitator) {
          $resul_mail = drupal_mail('isa_membership_mail', 'community_request_membership_to_facilitators', $facilitator->mail, NULL, $params, $from, TRUE);
        }
        break;
    }
    if ($resul_mail != NULL) {
      drupal_set_message('A notification has been sent to facilitators');
    }    
  }
}


/**
 * Implement hook_mail().
 */
function isa_membership_mail_mail($key, &$message, $params) {

  $node = node_load($params['nid']);
  
  // replace token for subject
  $params['subject'] = token_replace($params['subject'], 'node', $node);
  // replace token for node
  $body_token_converted = token_replace(variable_get("{$key}_mail_body", "message..."), 'node', $node);

  //replace token with sender profile
  global $user;
  $profile_node = content_profile_load('profile', $user->uid);
  $body_token_converted = token_replace($body_token_converted, 'node', $profile_node);
  
  $message['subject'] = $params['subject'];
  $message['body'] = "<html>\n" .
    "<head>\n" .
    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n" .
    "</head>\n" .
    "<body>" . $body_token_converted . "</body>\n" .
    "</html>\n";
  $message['From'] = variable_get('site_mail', ini_get('sendmail_from'));
  $message['headers'] = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8;',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal',
    'From' => variable_get('site_mail', ini_get('sendmail_from')),
  );

}

/**
 * Implement hook_menu().
 */
function isa_membership_mail_menu() {
  $items['admin/isa/mail/og_membership_template_messages'] = array(
    'title' => t('OG membership'),
    'description' => t('Change OG membership template messages.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isa_membership_mail_template_message'),
    'access arguments' => array('administer ISA mails'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 *
 * @return type 
 */
function isa_membership_mail_template_message() {
  $form_fields = array(
    array(
      'name'              => 'community_request_membership_to_facilitators',
      'title_title'       => t('User request a membership title'),
      'title_body'        => t('User request a membership body'),
      'description_title' => t('The subject of the message sent to facilitators when a user request a membership to a group.'),
      'description_body'  => t('The body of the message sent to facilitators when a user request a membership to a group.'),
      'fieldset_title'    => t('Mail for facilitators when a user requests membership to group')
    ),
    array(
      'name'              => 'community_request_deny_to_member',
      'title_title'       => t('Membership is denied title'),
      'title_body'        => t('Membership is denied body'),
      'description_title' => t('The subject of the message sent to member when his request membership is denied.'),
      'description_body'  => t('The body of the message sent to member when his request membership is denied.'),
      'fieldset_title'    => t('Mail for member when his request membership is denied')
    ),
    array(
      'name'              => 'community_request_approve_to_member',
      'title_title'       => t('Membership is approved title'),
      'title_body'        => t('Membership is approved body'),
      'description_title' => t('The subject of the message sent to member when his request membership is approved.'),
      'description_body'  => t('The body of the message sent to member when his request membership is approved.'),
      'fieldset_title'    => t('Mail for member when his request membership is approved')
    ),
    array(
      'name'              => 'member_leave_community_to_member',
      'title_title'       => t('User leave a community title'),
      'title_body'        => t('User leave a community body'),
      'description_title' => t('The subject of the message sent to member when he\'s leave a group.'),
      'description_body'  => t('The body of the message sent to member when he\'s leave a group.'),
      'fieldset_title'    => t("Mail for member when he's leave a group")
    ),
    array(
      'name'              => 'remove_member_community_to_member',
      'title_title'       => t('User is removed from community title'),
      'title_body'        => t('User is removed from community body'),
      'description_title' => t('The subject of the message sent to member when he\'s removed from a group .'),
      'description_body'  => t('The body of the message sent to member when he\'s removed from a group.'),
      'fieldset_title'    => t('Mail for member when he\'s removed from a group')
    ),
    array(
      'name'              => 'add_member_community_to_member',
      'title_title'       => t('User is added to community title'),
      'title_body'        => t('User is added to community body'),
      'description_title' => t('The subject of the message sent to member when the user is added to a group.'),
      'description_body'  => t('The body of the message sent to member when the user is added to a group.'),
      'fieldset_title'    => t("Mail for member when he's added to a group"),
    ),
    array(
      'name'              => 'member_join_community_to_member',
      'title_title'       => t('User join a community title'),
      'title_body'        => t('User join a community body'),
      'description_title' => t('The subject of the message sent to facilitators when a user join a group.'),
      'description_body'  => t('The body of the message sent to facilitators when a user join a group.'),
      'fieldset_title'    => t("Mail for member when he join a group")
    )
  );
  $form = isa_toolbox_get_form_template_message($form_fields, 'node');

  return system_settings_form($form);
}

/**
 *Implement of hook_form_alter
 *
 * @param <type> $form
 * @param <type> $form_state
 * @param <type> $form_id
 */
function isa_membership_mail_form_alter(&$form, &$form_state, $form_id) {
  // remove the field Additional details of og confirm subscribe form
  if ('og_confirm_subscribe' == $form_id) {
    unset($form['request']);
  }
}