<?php

/**
 * @defgroup isa_membership
 * @brief Module for manage user from a community
 * @file 
 * Modules main file
 * @ingroup isa_membership
 */

define('ISA_MAX_USERS_LIST', 50); ///< Max number of users to display in a list (e.g. community/%/members/edit)
/// Filters when retrieving roles within groups
define('NO_FILTER_CONTEXT', -1); ///< No role filtering
define('ADD_MEMBER_CONTEXT', 0); ///< Roles useful when adding members
define('REMOVE_MEMBER_CONTEXT', 1); ///< Roles useful when deleting/editing members

/**
 * Implement of hook_perm().
 */
function isa_membership_perm() {
  return (
  array(
      'community add members', // permission granted to "facilitator" roles
      'community remove members', // permission granted to "facilitator" roles
      'community assign facilitator role', // permission granted to "facilitator" roles
      'community approve membership', // permission granted to to "facilitator" roles
  )
  );
}

/**
 * Implement of hook_menu().
 */
function isa_membership_menu() {
  $items['community/%/members/add'] = array(
      'title' => 'Add users to the community',
      'access callback' => 'isa_membership_access_community_members_add',
      'page callback' => 'isa_membership_community_members_add',
      'page arguments' => array(1),
  );
  $items['community/%/members/edit'] = array(
      'title' => 'Add users to the community',
      'access callback' => 'isa_membership_access_community_members_edit',
      'page callback' => 'isa_membership_community_members_edit',
      'page arguments' => array(1),
  );
  $items['software/%/members/add'] = array(
      'title' => 'Add users to the OSS project',
      'access callback' => 'isa_membership_access_community_members_add',
      'page callback' => 'isa_membership_community_members_add',
      'page arguments' => array(1),
  );
  $items['software/%/members/edit'] = array(
      'title' => 'Add users to the OSS project',
      'access callback' => 'isa_membership_access_community_members_edit',
      'page callback' => 'isa_membership_community_members_edit',
      'page arguments' => array(1),
  );
  $items['asset/%/members/add'] = array(
      'title' => 'Add users to the asset',
      'access callback' => 'isa_membership_access_community_members_add',
      'page callback' => 'isa_membership_community_members_add',
      'page arguments' => array(1),
  );
  $items['asset/%/members/edit'] = array(
      'title' => 'Add users to the asset',
      'access callback' => 'isa_membership_access_community_members_edit',
      'page callback' => 'isa_membership_community_members_edit',
      'page arguments' => array(1),
  );


  return ($items);
}

/**
 */
function isa_membership_access_community_members_add() {
  $community_nid = variable_get('current_group', isa_toolbox_get_community_nid());
  // actually, this function can also accept a community node as first parameter
  if (is_numeric($community_nid)) {
    $community_node = node_load(array('nid' => $community_nid));
  }
//  elseif (is_object($community_nid)) {
//    $community_node = $community_nid;
//    $community_nid = $community_node->nid;
//  }
  else {
    return (FALSE);
  }

  $groups_type = array(ISA_COMMUNITY_TYPE, ISA_SOFTWARE_TYPE, ISA_ASSET_TYPE);
  if (!$community_node || !in_array($community_node->group_type, $groups_type)) {
    drupal_set_message(t('The required community does not exist.'), 'error');
    return (FALSE);
  }
  return (
  isa_toolbox_is_omnipotent() ||
  user_access("community add members")
  );
}

/**
 */
function isa_membership_access_community_members_edit() {
  $community_nid = variable_get('current_group', isa_toolbox_get_community_nid());
  // actually, this function can also accept a community node as first parameter
  if (is_numeric($community_nid)) {
    $community_node = node_load(array('nid' => $community_nid));
  }
//  elseif (is_object($community_nid)) {
//    $community_node = $community_nid;
//    $community_nid = $community_node->nid;
//  }
  else {
    return (FALSE);
  }

  $groups_type = array(ISA_COMMUNITY_TYPE, ISA_SOFTWARE_TYPE, ISA_ASSET_TYPE);
  if (!$community_node || !in_array($community_node->group_type, $groups_type)) {
    drupal_set_message(t('The required community does not exist.'), 'error');
    return (FALSE);
  }
  return (
  isa_toolbox_is_omnipotent() ||
  user_access('community remove members') ||
  user_access('community assign facilitator role') ||
  user_access('community approve membership')
  );
}

/**
 * Handles the generation of the community/%node/members/add page
 * @param community_nid Nid of the community the user wishes to add members to
 */
function isa_membership_community_members_add() {
  $community_nid = variable_get('current_group', isa_toolbox_get_community_nid());
  // actually, this function can also accept a community node as first parameter
//  if (is_numeric($community_nid)) {
  $community_node = node_load(array('nid' => $community_nid));
//  }
//  elseif (is_object($community_nid)) {
//    $community_node = $community_nid;
//    $community_nid = $community_node->nid;
//  }
//  if (!$community_node || $community_node->type != ISA_COMMUNITY_TYPE) {
//    drupal_not_found();
//    return;
//  }
  $type = $community_node->group_type;
  drupal_set_title(t('Add new members to the ":title" ', array(':title' => $community_node->title)) . $type);

  $sql_query = isa_membership_community_candidate_users_sql();
  $query_result = pager_query($sql_query, ISA_MAX_USERS_LIST, 0, NULL, $community_nid, $_GET['lastname'], $_GET['firstname'], $_GET['mail']);
  $candidates = isa_membership_candidate_users_organical_groups($query_result);

  if (!count($candidates)) {
    $output .= t("There is no candidate users for this {$type}.");
  }
  else {
    $pager = theme('pager', NULL, ISA_MAX_USERS_LIST, 0);
    $output .= $pager;
    $output .= drupal_get_form('isa_membership_community_members_add_form', $community_node, $candidates);
    $output .= $pager;
  }
  return ($output);
}

/**
 * Handles the generation of the community/%node/members/edit page
 * @param $community_nid Nid of the community the user wishes to edit
 */
function isa_membership_community_members_edit() {
  $community_nid = variable_get('current_group', isa_toolbox_get_community_nid());
  // actually, this function can also accept a community node as first parameter
//  if (is_numeric($community_nid)) {
  $community_node = node_load(array('nid' => $community_nid));
//  }
//  elseif (is_object($community_nid)) {
//    $community_node = $community_nid;
//    $community_nid = $community_node->nid;
//  }
//  if (!$community_node || $community_node->type != ISA_COMMUNITY_TYPE) {
//    drupal_not_found();
//    return;
//  }
  $type = $community_node->group_type;
  drupal_set_title(t('Manage members of the ":title" ', array(':title' => $community_node->title)) . $type);

  // get the community subscribers, along with their og roles
  $sql = isa_membership_community_users_sql($community_nid);
  $subscribers_resource = pager_query($sql, ISA_MAX_USERS_LIST, 0, NULL, $community_nid, $_GET['lastname'], $_GET['firstname'], $_GET['mail']);

  $subscribers = array();
  while ($subscriber = db_fetch_object($subscribers_resource)) {

    $subscribers[$subscriber->uid] = $subscriber;
  }
  isa_toolbox_get_users_og_roles($subscribers, $community_nid);

  if (!count($subscribers)) {
    $output .= t("There is no member in this {$type}.");
  }
  else {
    $pager = theme('pager', NULL, ISA_MAX_USERS_LIST, 0);

    $output .= $pager;
    $output .= drupal_get_form('isa_membership_community_members_edit_form', $community_node, $subscribers);
    $output .= $pager;
  }

  return ($output);
}

/**
 * @return A SQL query to select the candidate users for the given community
 */
function isa_membership_community_candidate_users_sql() {
  // base variables needed to handle the job
  //
  // return user who are not in the group
  $base_sql_query =
          'SELECT DISTINCT field_firstname_value AS firstname, field_lastname_value AS lastname, u.uid, u.name, u.mail, u.status
     FROM {users} u
     LEFT JOIN {node} node_users ON u.uid = node_users.uid AND node_users.type = \'profile\'
     LEFT JOIN {content_type_profile} profile ON node_users.vid = profile.vid AND node_users.nid = profile.nid
     WHERE u.uid <> 0
     AND u.status = 1
     AND u.uid NOT IN(
       SELECT og_uid.uid
       FROM {og_uid}
       WHERE og_uid.nid = %d
     )';

  //Add filters to query
  $base_sql_query .= ' AND UPPER(field_lastname_value) LIKE UPPER("%s%") ';
  $base_sql_query .= ' AND UPPER(field_firstname_value) LIKE UPPER("%s%") ';
  $base_sql_query .= ' AND UPPER(mail) LIKE UPPER("%s%%") ';

  //Sort query
  $base_sql_query .= ' ORDER BY lastname, firstname';

  return ($base_sql_query);
}

/**
 * @param $community_nid The node id of a community
 * @return A SQL query to select the candidate users in the given community
 */
function isa_membership_community_users_sql($community_nid) {

  $base_sql_query =
          'SELECT field_firstname_value AS firstname, field_lastname_value AS lastname, u.uid, u.name, u.mail, u.status, u.picture, ou.*
     FROM {og_uid} ou
     INNER JOIN {users} u ON ou.uid = u.uid
     LEFT JOIN {node} node_users ON u.uid = node_users.uid AND node_users.type = \'profile\'
     LEFT JOIN {content_type_profile} profile ON node_users.vid = profile.vid AND node_users.nid = profile.nid
     WHERE u.uid <> 0
     AND ou.nid = %d
     AND u.status > 0 ';

  //Add filters to query
  $base_sql_query .= ' AND field_lastname_value LIKE "%s%" ';
  $base_sql_query .= ' AND field_firstname_value LIKE "%s%" ';
  $base_sql_query .= ' AND u.mail LIKE "%s%" ';


  if (isset($_GET['ogur_rid']) && $_GET['ogur_rid'] == 'Facilitator') {
    $users = isa_highlight_get_facilitators($community_nid);
    $str_roles = implode(",", $users);
    $base_sql_query .= ' AND u.uid IN (' . $str_roles . ')';
  }
  if (isset($_GET['ogur_rid']) && $_GET['ogur_rid'] == 'Manager') {
    $community = node_load($community_nid);
    $base_sql_query .= ' AND u.uid = ' . $community->uid;
  }
  if (isset($_GET['ogur_rid']) && $_GET['ogur_rid'] == 'Developer') {
    $users = isa_toolbox_get_users_by_og_roles($community_nid, variable_get("developer_rid", 9));
    $str_roles = implode(",", array_keys($users));
    $base_sql_query .= ' AND u.uid IN (' . $str_roles . ')';
  }

  //Sort query
  $base_sql_query .= ' ORDER BY lastname, firstname';
  return ($base_sql_query);
}

/**
 * @param $query_result resource Result from a SQL query
 * @return array Formatted options for a form
 */
function isa_membership_candidate_users_organical_groups($query_result) {
  if (!$query_result) {
    drupal_set_message(t('Failed to get candidate users for this group'), 'error');
    return (FALSE);
  }
  else {
    // fetch every candidate
    $candidate_users = array();
    while ($candidate_user = db_fetch_object($query_result)) {
      $candidate_users[$candidate_user->uid] = $candidate_user;
    }

    // try to associate users with their profile informations
    $candidate_users = isa_membership_get_profile_fields_for_users($candidate_users);

    // generate the formatted options
    $candidate_users_options = array();
    foreach ($candidate_users as $candidate_user) {
      $candidate_users_options[$candidate_user->uid] = sprintf(
                      '%s <%s> %s',
                      empty_string($candidate_user->fullname) ? $candidate_user->name : $candidate_user->fullname,
                      $candidate_user->mail,
                      $candidate_user->status ? '' : t('[blocked]')
      );
    }
    return ($candidate_users_options);
  }
}

/**
 * @return the form used in the community/%node/members/edit page
 * @param $form_state The current state of the form
 * @param $community_node community node being edited
 * @param $users Users to display in the form
 */
function isa_membership_community_members_add_form($form_state, $community_node, $users) {
  $form = array();
  $form['#node'] = $community_node;
  $form['#id'] = 'isa-community-members-add';

  // we need to know the assignable roles within the group
  $roles = isa_membership_assignable_community_roles($community_node, ADD_MEMBER_CONTEXT);

  // we store the assignable roles
  $form['#assignable_roles'] = $roles;

  // header of the form
  $header_roles = array();
  foreach ($roles as $role_info) {
    $header_roles[] = $role_info['label'];
  }
  $form['#header_roles'] = $header_roles;

  // we'll need a list of all roles but the default to help the javascript functions
  foreach ($roles as $role_info) {
    if ($role_info['value'] != 'default_role') {
      $extra_roles[] = $role_info['value'];
    }
  }
  $javascript_array = sprintf('Array(%s)', implode(",", $extra_roles));
  // SGS : bug javascript when there are only 1 role, (Array (rid)).length  = rid...
  if (count($extra_roles) == 1) {
    $javascript_array = sprintf("Array('%s')", implode(",", $extra_roles));
  }
  drupal_add_js(drupal_get_path('module', 'isa_membership') . '/add_group_members.js');

  $form['user_roles'] = array('#tree' => TRUE);
  // for each user, we add her name and options for her roles
  foreach ($users as $uid => $user_string) {
    $user_obj = (object) (array('uid' => $uid, 'name' => strip_tags($user_string)));
    $user_string = theme('username', $user_obj, array('max_length' => 35));
    $form['user_roles'][$uid]['user'] = array('#value' => $user_string);

    $form['user_roles'][$uid]['roles'] = array(
        '#type' => 'checkboxes',
        '#parents' => array('user_roles', $uid),
    );
    foreach ($roles as $role_info) {
      $role_value = $role_info['value'];
      // we generate each radio button individually just to sort them as we want
      $form['user_roles'][$uid]['roles'][$role_value] = array(
          '#type' => 'checkbox',
          '#title' => '',
          '#default_value' => FALSE,
          '#parents' => array('user_roles', $uid, 'roles', $role_value),
          '#spawned' => TRUE,
      );

      // we add some Javascript that will maintain the consistency of the checkboxes set
      if ($role_value != 'default_role') {

        $js_onclick = sprintf('javascript:ensureUserIsCheked(%d, this);', $uid);
      }
      else {
        $js_onclick = sprintf('javascript:ensureUserHasNoRole(%d, %s, this);', $uid, $javascript_array);
      }

      $form['user_roles'][$uid]['roles'][$role_value]['#attributes'] = array('onclick' => $js_onclick);
    }
  }

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add these users'),
  );

  // redirect path is: current path without its last part
  if (!isset($_GET['destination'])) {
    $redirect_url = explode('/', $_GET['q']);
    array_pop($redirect_url);
    $redirect_url = implode('/', $redirect_url);
    $form['#redirect'] = array($redirect_url);
  }
  return ($form);
}

/**
 */
function isa_membership_get_profile_fields_for_users($users_array) {
  if (empty($users_array)) {
    return ($users_array);
  }
  if (!module_exists('content_profile')) {
    return ($users_array);
  }
  else {
    // get uid list
    $uid_list = join(', ', array_keys($users_array));
    // ensure this id list is not dangerous before inserting it in a SQL query
    if (!preg_match('/^[0-9, ]+$/', $uid_list)) {
      return ($elseusers_array);
    }
    $firstname_field = 'field_firstname_value';
    $lastname_field = 'field_lastname_value';
    $profile_table = 'content_type_profile';

    $query_result = db_query("
    SELECT n.uid, p.%s AS firstname, p.%s AS lastname
    FROM {node} n, {%s} p
    WHERE n.nid = p.nid
    AND n.uid IN(%s)",
                    $firstname_field,
                    $lastname_field,
                    $profile_table,
                    $uid_list
    );

    while ($profile_data = db_fetch_object($query_result)) {
      $current_uid = $profile_data->uid;
      if (is_object($users_array[$current_uid])) {
        $users_array[$current_uid]->firstname = $profile_data->firstname;
        $users_array[$current_uid]->lastname = $profile_data->lastname;
        $users_array[$current_uid]->fullname = '';
      }

      if (!empty_string($profile_data->firstname) && !empty_string($profile_data->lastname)) {
        $users_array[$current_uid]->fullname = sprintf('%s %s', $profile_data->firstname, $profile_data->lastname);
      }
    }
    return $users_array;
  }
}

/**
 * @return the form used in the community/%node/members/edit page
 * @param $form_state The current state of the form
 * @param $community_node community node being edited
 * @param $users Users to display in the form
 */
function isa_membership_community_members_edit_form($form_state, $community_node, $users) {
  $form = array();
  $form['#node'] = $community_node;
  $form['#id'] = 'isa-community-members-edit';

  // we need: the default group role, and respectively existing and assignable roles within the group
  $default_user_rid = variable_get('og_user_roles_default_role', -1);
  $all_roles = isa_membership_assignable_community_roles($community_node, NO_FILTER_CONTEXT);
  $assignable_roles = isa_membership_assignable_community_roles($community_node, REMOVE_MEMBER_CONTEXT);

  // we store the assignable roles
  $form['#assignable_roles'] = $assignable_roles;

  // header of the form
  $header_roles = array();
  foreach ($all_roles as $role_info) {
    $header_roles[] = $role_info['label'];
  }
  $form['#header_roles'] = $header_roles;

  // we'll need a list of all roles but the default to help the javascript functions
  foreach ($assignable_roles as $role_info) {
    if ($role_info['value'] != 'default_role') {
      $extra_roles[] = $role_info['value'];
    }
  }
  $javascript_array = sprintf('Array(%s)', implode(',', $extra_roles));
  // SGS : bug javascript when there are only 1 role, (Array (rid)).length  = rid...
  if (count($extra_roles) == 1) {
    $javascript_array = sprintf("Array('%s')", implode(",", $extra_roles));
  }
  drupal_add_js(drupal_get_path('module', 'isa_membership') . '/add_group_members.js');

  $form['user_roles'] = array('#tree' => TRUE);
  // for each user, we add her name and checkboxes for her roles
  foreach ($users as $uid => $user_object) {
    // name of the user
    $user_string = theme('username', $user_object, array('max_length' => 35));
    if (!$user_object->is_active) {
      if (user_access('community approve membership') || isa_toolbox_is_omnipotent()) {
        $link_args = array('query' => array('destination' => $_GET['q']));
        $approve_link = l(t('approve'), sprintf('og/approve/%d/%d/%s', $community_node->nid, $uid, og_get_token($community_node->nid)), $link_args);
        $deny_link = l(t('deny'), sprintf('og/deny/%d/%d/%s', $community_node->nid, $uid, og_get_token($community_node->nid)), $link_args);
        $user_string .= sprintf('<br /> %s %s or %s ', t('Membership:'), $approve_link, $deny_link);
      }
    }
    $form['user_roles'][$uid]['user'] = array('#value' => $user_string);

    // displayed role of the user
    $user_roles = $user_object->og_roles;
    if (array_key_exists($default_user_rid, $user_roles)) {
      $user_roles['default_role'] = $user_roles[$default_user_rid];
      unset($user_roles[$default_user_rid]);
    }

    // keeping the  track of editable users will help to handle the form submission
    $form['#editable_users'][$uid]['initial_roles'] = $user_roles;

    $form['user_roles'][$uid]['roles'] = array(
        '#type' => 'checkboxes',
        '#parents' => array('user_roles', $uid),
    );

    foreach ($all_roles as $role_info) {
      $rid = $role_info['value'];
      $role_column_disabled = !isa_membership_is_role_assignable($rid, $assignable_roles);

      //SGS
      if (!$user_object->is_active) {
        $user_row_disabled = TRUE;
      }
      else {
        $user_row_disabled = FALSE;
      }
      if ($community_node->uid == $user_object->uid) {
        $user_row_disabled = TRUE;
        $is_owner = TRUE;
      }
      else {
        $is_owner = FALSE;
      }



      if (!$user_row_disabled && !$role_column_disabled) {
        // Drupal does not check whether the submitted values were enabled or not.
        // Thus, we store the allowed roles for each editable user.
        $form['#editable_users'][$uid]['allowed_roles'][] = $rid;
      }

      // we generate each checkbox individually in order to disable each one
      // individually
      // see http://drupal.org/node/68740#comment-268897 for details
      $form['user_roles'][$uid]['roles'][$rid] = array(
          '#type' => 'checkbox',
          '#title' => '',
          '#return_value' => TRUE,
          '#default_value' => array_key_exists($rid, $user_roles) || $is_owner,
          '#parents' => array('user_roles', $uid, 'roles', $rid),
          '#spawned' => TRUE,
          '#disabled' => ($role_column_disabled || $user_row_disabled),
      );

      // we add some Javascript that will maintain the consistency of the checkboxes set
      if ($rid != 'default_role') {
        $js_onclick = sprintf('javascript:ensureUserIsCheked(%d, this);', $uid);
      }
      else {
        $js_onclick = sprintf('javascript:ensureUserHasNoRole(%d, %s, this);', $uid, $javascript_array);
      }

      $form['user_roles'][$uid]['roles'][$rid]['#attributes'] = array('onclick' => $js_onclick);
    }
  }
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply these changes'),
  );

  // redirect path is: current path without its last part
  if (!isset($_GET['destination'])) {
    $redirect_url = explode('/', $_GET['q']);
    array_pop($redirect_url);
    $redirect_url = implode('/', $redirect_url);
    $form['#redirect'] = array($redirect_url);
  }

  return ($form);
}

/**
 * @param $community_node A community node
 * @param $context (Optional) Context the roles will be used within. Defaults to NO_FILTER_CONTEXT.
 * @return the assignable roles within a given community when adding a user
 * @see isa_membership_is_role_assignable()
 * @see isa_membership_access_community_members_add()
 */
function isa_membership_assignable_community_roles($community_node, $context = NO_FILTER_CONTEXT) {
  // get the roles available within the given community
  $roles = og_user_roles_get_group_roles($community_node->type);

  // get several useful role ids
  // group admin role is facilitator role
  $default_admin_rid = variable_get('og_user_roles_default_admin_role', -1);

  /* strip off known roles if needed */
  if ($context != NO_FILTER_CONTEXT) {
    $omnipotent = isa_toolbox_is_omnipotent();

    if (!$omnipotent && !user_access('community assign facilitator role')) {
      if ($default_admin_rid != -1) {
        unset($roles[$default_admin_rid]);
      }
    }
  }
  // Generate the complete, ordered roles list
  $roles_list = array();

  // Default role
  $default_user_rid = og_user_roles_get_group_default_role($community_node->nid);

  if (isset($roles[$default_user_rid])) {
    if (!($context == REMOVE_MEMBER_CONTEXT && !user_access('community remove members')) || isa_toolbox_is_omnipotent()) {
      $roles_list[] = array('value' => 'default_role', 'label' => $roles[$default_user_rid]);
    }
    unset($roles[$default_user_rid]);
  }

  $roles_list_end = array();

  // Group Facilitator role
  if (isset($roles[$default_admin_rid])) {
    $roles_list_end[] = array('value' => $default_admin_rid, 'label' => $roles[$default_admin_rid]);

    unset($roles[$default_admin_rid]);
  }

  // Other roles
  foreach ($roles as $value => $label) {
    $roles_list[] = array('value' => $value, 'label' => $label);
  }
  foreach ($roles_list_end as $info) {
    $roles_list[] = $info;
  }
  return ($roles_list);
}

/**
 */
function isa_membership_community_members_add_form_submit($form, &$form_state) {
  $subscribed_users = 0;

  foreach ($form_state['values']['user_roles'] as $user_id => $role_id) {
    $role_id = $role_id['roles'];
    // $role_id is now an array where keys are role ids and values are TRUE or FALSE
    // we always ignore the 'not_a_member' role
    if (array_key_exists('not_a_member', $role_id)) {
      unset($role_id['not_a_member']);
    }

    // Should we subscribe the user to the community?
    $should_subscribe_user = (bool) array_sum($role_id);
    if (!$should_subscribe_user) {
      continue;
    }
    // Should the new user be an admin?
    $default_admin_rid = variable_get('og_user_roles_default_admin_role', -1);
    $should_be_admin = ($default_admin_rid != -1 && array_key_exists($default_admin_rid, $role_id) && $role_id[$default_admin_rid]);

    // we now subscribe the user to the community
    og_save_subscription($form['#node']->nid, $user_id, array('is_active' => 1, 'is_admin' => $should_be_admin));
    ++$subscribed_users;

    // we also have to grant additionnal roles to the user
    foreach ($role_id as $individual_role_id => $set_role) {
      if ('default_role' != $individual_role_id) {
        if ($set_role) {
          og_user_roles_role_add($form['#node']->nid, $user_id, $individual_role_id);
        }
      }
    }
  }
  if ($subscribed_users > 0) {
    drupal_set_message(format_plural($subscribed_users, '1 user added to the group.', '@count users added to the group.'));
  }
}

/**
 */
function isa_membership_community_members_edit_form_submit($form, &$form_state) {
  // look for edited and removed users
  $edited_users = array();
  $removed_users = array();
  foreach ($form['#editable_users'] as $uid => $info) {
    // initial roles for this user
    $initial_roles = array_keys($info['initial_roles']);

    // submitted roles for this user
    $posted_roles = array();
    foreach ($form_state['values']['user_roles'][$uid]['roles'] as $rid => $checked) {
      if ($checked)
        $posted_roles[] = $rid;
    }

    $roles_removed = array_diff($initial_roles, $posted_roles);
    $roles_added = array_diff($posted_roles, $initial_roles);
    $roles_modified = array_merge($roles_removed, $roles_added);

    // checks the provided modifications are allowed
    if (count($roles_modified)) {
      // Filters out the non-allowed modifications
      $roles_modified_filtered = array();
      foreach ($roles_modified as $role_modified) {
        if (in_array($role_modified, $form['#editable_users'][$uid]['allowed_roles'])) {
          $roles_modified_filtered[$role_modified] = (bool) $form_state['values']['user_roles'][$uid]['roles'][$role_modified];
        }
      }
      $roles_modified = $roles_modified_filtered;
    }

    // does it remain something to modify for this user?
    if (!count($roles_modified)) {
      continue;
    }

    // we isolate the removed users
    if (array_key_exists('default_role', $roles_modified)) {
      $removed_users[$uid] = TRUE;
    }
    else {
      $edited_users[$uid] = $roles_modified;
    }
  }

  // Is there something to do?
  if (empty($removed_users) && empty($edited_users)) {
    drupal_set_message('No changes made.');
    return;
  }

  // useful informations for what comes next
  $nid = $form['#node']->nid;
  $default_admin_rid = variable_get('og_user_roles_default_admin_role', -1);

  // proceed to user removals
  $removed_users_count = 0;
  foreach ($removed_users as $uid => $delete) {
    og_delete_subscription($nid, $uid);
  }
  if ($removed_users_count) {
    drupal_set_message(format_plural($removed_users_count, '1 user removed.', '@count users removed.'));
  }

  // proceed to user modifications
  $changed_users_count = 0;
  foreach ($edited_users as $uid => $modified_roles) {
    foreach ($modified_roles as $rid => $added) {
      if ($added) {
        og_user_roles_role_add($nid, $uid, $rid);
      }
      else {
        og_user_roles_role_delete($nid, $uid, $rid);
      }
    }

    // fetch some additional info about this user
    $data = db_fetch_array(db_query('SELECT is_active, is_admin, created FROM {og_uid} WHERE nid = %d AND uid = %d', $nid, $uid));

    // Should the user admin state change?
    $should_be_admin = (bool) $data['is_admin'];
    if ($default_admin_rid != -1 && array_key_exists($default_admin_rid, $modified_roles)) {
      $should_be_admin = $modified_roles[$default_admin_rid];
    }

    // update the subscription record for this user
    og_save_subscription($nid, $uid, array('is_active' => $data['is_active'], 'is_admin' => $should_be_admin, 'created' => $data['created'], 'dont-send-mail' => TRUE));

    ++$changed_users_count;
  }
  if ($changed_users_count) {
    drupal_set_message(format_plural($changed_users_count, '1 user modified.', '@count users modified.'));
  }
}

/**
 * Implement of hook_theme().
 */
function isa_membership_theme() {
  return array(
      'isa_membership_community_members_add_form' => array(
          'arguments' => array('form' => array()),
          'function' => 'theme_isa_membership_community_members_add_form',
      ),
      'isa_membership_community_members_edit_form' => array(
          'arguments' => array('form' => array()),
          'function' => 'theme_isa_membership_community_members_add_form',
      ),
  );
}

/**
 * Renders the community_members_add form
 * @param $form the form to render
 * @return the formatted form
 */
function theme_isa_membership_community_members_add_form($form) {
  $header = array_merge(array(t('Username')), $form['#header_roles']);
  $rows = array();
  foreach (element_children($form['user_roles']) as $item) {
    $row = array();
    $row[] = drupal_render($form['user_roles'][$item]['user']);
    foreach (element_children($form['user_roles'][$item]['roles']) as $role) {
      $row[] = drupal_render($form['user_roles'][$item]['roles'][$role]);
    }
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return ($output);
}

/**
 * @param $rid Value to search in the user roles array
 * @param $user_roles List of user roles: a non-associative array containing
 *  arrays with two key/value pair: 'value' (role id) and 'label' (role name)
 * @return true if the given rid was found in the given list
 */
function isa_membership_is_role_assignable($rid, &$user_roles) {
  foreach ($user_roles as $role_info) {
    if ($role_info['value'] == $rid) {
      return (TRUE);
    }
  }
  return (FALSE);
}

/**
 * Implement of hook_form_alter
 * @param $form_id String representing the name of the form itself. Typically this is the name of the function that generated the form.
 * @param $form Nested array of form elements that comprise the form.
 */
function isa_membership_form_alter(&$form, $form_state, $form_id) {
  // Modification of filters form in members page (community, software, Asset)
  if (($form['#id'] == 'views-exposed-form-Community-members-page' ||
          $form['#id'] == 'views-exposed-form-Software-members-page' ||
          $form['#id'] == 'views-exposed-form-Asset-members-page')) {
    if (arg(3) != 'add') {
      $form['ogur_rid'] = array(
          '#type' => 'select',
          '#default_value' => isset($_GET['ogur_rid']) ? $_GET['ogur_rid'] : 'all',
      );
      $form['ogur_rid']['#title'] = t("Role");
      $form['ogur_rid']['#weight'] = -10;
      $form['ogur_rid']['#options'] = array(
          "All" => t('<Any>'),
          'Facilitator' => t('Facilitator'),
          'Manager' => t('Project owner'),
      );

      // Modification of filters form in members page (software, Asset)
      if (($form['#id'] == 'views-exposed-form-Software-members-page' || $form['#id'] == 'views-exposed-form-Asset-members-page')) {
        $form['ogur_rid']['#options'] = array(
            "All" => t('<Any>'),
            'Facilitator' => t('Facilitator'),
            'Manager' => t('Project owner'),
            'Developer' => t('Developer'),
            'Release manager' => t('Release manager'),
            'Contributor' => t('Contributor'),
        );
      }
    }
    if (arg(3) == 'add') {
      $form['#action'] = 'add';
    }
    if (arg(3) == 'edit') {
      $form['#action'] = 'edit';
    }
  }
  return $form;
}

/** Implement of hook_query_alter
 *  To filter members
 */
function isa_membership_views_query_alter(&$view, &$query) {
  if (($view->name == "Community_members" ||
          $view->name == "Asset_members" ||
          $view->name == "Software_members") && $view->current_display == 'page') {
    if (isset($_GET['ogur_rid']) && $_GET['ogur_rid'] != 'All') {
      $gid = isa_toolbox_get_community_nid();
      if ($_GET['ogur_rid'] == 'Facilitator') {
        $users = isa_highlight_get_facilitators($gid);
        $str_roles = implode(",", $users);
        $query->where[0]['clauses'][] = 'users.uid IN (' . $str_roles . ')';
      }
      if ($_GET['ogur_rid'] == 'Manager') {
        $community = node_load($gid);
        $query->where[0]['clauses'][] = 'users.uid = ' . $community->uid;
      }
      if ($_GET['ogur_rid'] == 'Developer') {
        $users = isa_toolbox_get_users_by_og_roles($gid, variable_get("developer_rid", 9));
        $str_roles = implode(",", array_keys($users));
        $query->where[0]['clauses'][] = 'users.uid IN (' . $str_roles . ')';
      }
      if ($_GET['ogur_rid'] == 'Release manager') {
        $users = isa_toolbox_get_users_by_og_roles($gid, variable_get("release_manager_rid", 17));
        $str_roles = implode(",", array_keys($users));
        $query->where[0]['clauses'][] = 'users.uid IN (' . $str_roles . ')';
      }
      if ($_GET['ogur_rid'] == 'Contributor') {
        $users = isa_toolbox_get_users_by_og_roles($gid, variable_get("contributor_rid", 18));
        $str_roles = implode(",", array_keys($users));
        $query->where[0]['clauses'][] = 'users.uid IN (' . $str_roles . ')';
      }
    }
    if ($query->orderby[0] == 'users_name ASC') {
      $query->orderby[0] = 'field_lastname_value ASC';
      $query->orderby[1] = 'field_firstname_value ASC';
    }
    if ($query->orderby[0] == 'users_name DESC') {
      $query->orderby[0] = 'field_lastname_value DESC';
      $query->orderby[1] = 'field_firstname_value DESC';
    }
  }
}

/**
 * Implement hook_og ()
 * 
 * @param type $op
 * @param type $gid
 * @param type $uid
 * @param type $args 
 */
function isa_membership_og($op, $gid, $uid, $args) {
  $group = node_load($gid);
  $tids = array_keys($group->nat);
  if (($op == 'user insert' && $args['is_active'] == '1' ) || ($op == 'user approve')) {
    if (!isset($args['is_moved'])) {
      $group = node_load($gid);
      if ($uid != $group->uid) {
        rules_invoke_event('isa_user_join_group', $uid, $gid);
      }
    }
    global $user;
    $author_uid = -1;
    $send_interval = _subscriptions_get_setting('send_interval', $user);
    $send_updates = _subscriptions_get_setting('send_updates', $user);
    $send_comments = _subscriptions_get_setting('send_comments', $user);
    
   
    //set the default settings for subscription for the new member of the group
    subscriptions_write_subscription('node', 'tid', $tids[0], $author_uid, $uid, $send_interval, $send_updates, $send_comments);
  }
  if ($op == 'user delete') {
    $path = explode('/', drupal_get_normal_path($_GET['q']));
    // invoke event only if the user is active and unsubscribe to the group,
    //  no when user membership is denied. There is no 'is_active' in $args so check url
    if ($path[1] != 'deny') {
      rules_invoke_event('isa_active_user_delete', $uid, $gid);
    }
    db_query("DELETE FROM {subscriptions} WHERE module = '%s' AND field = '%s' AND value = '%s' AND recipient_uid = %d", 'node', 'tid', $tids[0], $uid);
  }
}

/**
 * Implement hook_rules_event_info().
 */
function isa_membership_rules_event_info() {
  return array(
      'isa_user_join_group' => array(
          'label' => t("User join a group"),
          'help' => t("User join a group, user is added to group or user's membership is approved to group by admin"),
          'arguments' => og_rules_events_hook_og_arguments(),
          'module' => 'Isa membership',
      ),
      // if the user is an approved member and unsubscibe to the group
      // rule og_user_delete don't check if the user membership is approved
      'isa_active_user_delete' => array(
          'label' => t('Active user unsubscribes from group'),
          'arguments' => og_rules_events_hook_og_arguments(),
          'module' => 'Isa membership',
      ),
  );
}

/**
 * Implement hook_block(). Add filters
 * @param <type> $op
 * @param <type> $delta
 * @param <type> $edit
 * @return <type>
 */
function isa_membership_block($op = 'list', $delta = 0, $edit = array()) {
  $block = array();
  switch ($op) {
    case 'list':
      $block['filters_members'] = array('info' => t('Filters : Members'));
      return $block;
    case 'view':
      if ($delta === 'filters_members') {
        $block['content'] = drupal_get_form('isa_membership_members_add_filters_form');
        return $block;
      }
  }
}

/**
 * Handles the generation of the filters form (add member)
 */
function isa_membership_members_add_filters_form(&$form_state, $did = 0) {
  $form = array();

  $form["#prefix"] = '<div class="members-filters">';
  $form["#suffix"] = '</div>';
  /*
    if (arg(3) == 'edit') {
    $form['active'] = array(
    '#type'           => 'hidden',
    '#value'          => (isset($_GET['active'])) ? $_GET['active'] : '1',
    );
    $form['role'] = array(
    '#type'           => 'select',
    '#title'          => t('Role'),
    '#options'        => $roles,
    '#default_value'  => (isset($_GET['role'])) ? $_GET['role'] : '-1',
    '#weight'         => 0,
    );
    }
   */
  $form['lastname'] = array(
      '#type' => 'textfield',
      '#title' => t('Lastname'),
      '#default_value' => (isset($_GET['lastname'])) ? $_GET['lastname'] : '',
      '#size' => 15,
  );

  $form['firstname'] = array(
      '#type' => 'textfield',
      '#title' => t('Firstname'),
      '#default_value' => (isset($_GET['firstname'])) ? $_GET['firstname'] : '',
      '#size' => 15,
  );

  $form['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('Mail'),
      '#default_value' => (isset($_GET['mail'])) ? $_GET['mail'] : '',
      '#size' => 15,
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
  );

  $form['#method'] = 'get';

  return $form;
}