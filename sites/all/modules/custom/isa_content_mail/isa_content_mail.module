<?php
/**
 * @defgroup isa_content_mail
 * @brief Module who send mails for the content creation
 * @file 
 * Modules main file
 * @ingroup isa_content_mail
 */

/**
 * Implement hook_comment().
 */
function isa_content_mail_comment(&$a1, $op) {
  if ($op == 'insert') {
    $list_moderators = isa_toolbox_get_users_by_roles(variable_get("moderator_rid", NULL));
    $resul_mail = NULL;
    //remove the author from the moderators list
    unset($list_moderators[$a1['uid']]);
    $params['message'] = "";
    $params['comment'] = $a1;
    $params['subject'] = variable_get("content_create_comment_to_moderators_mail_title", "title...");
    foreach ($list_moderators as $uid => $moderator) {
      $resul_mail = drupal_mail('isa_content_mail', "content_create_comment_to_moderators", $moderator->mail, NULL, $params, $from, TRUE);
    }
    if ($resul_mail != NULL) {
      drupal_set_message(t('A notification has been sent to moderators'));
    }
  }
}

/**
 * Implement hook_nodeapi().
 */
function isa_content_mail_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  ////////////
  // INSERT //
  ////////////
  if ($op == 'insert') {


    //--  BLOG  --//
    $node_type = array(ISA_BLOG_TYPE);
    if (in_array($node->type, $node_type)) {
      $list_moderators = isa_toolbox_get_users_by_roles(variable_get("moderator_rid", NULL));
      $resul_mail = NULL;
      //remove the author from the moderators list
      unset($list_moderators[$user->uid]);
      $type = $node->type;
      $params['message'] = "";
      $params['node'] = $node;
      $params['subject'] = variable_get("content_create_{$type}_to_moderators_mail_title", "title...");
      foreach ($list_moderators as $uid => $moderator) {
        $resul_mail = drupal_mail('isa_content_mail', "content_create_{$type}_to_moderators", $moderator->mail, NULL, $params, $from, TRUE);
      }
      if ($resul_mail != NULL) {
        drupal_set_message(t('A notification has been sent to moderators'));
      }
    }

    //--  WIKI, TOPIC, NEWS, DOCUMENT IN A GROUP  --//    
    $node_type = array('wiki', ISA_TOPIC_TYPE, ISA_NEWS_TYPE, ISA_DOCUMENT_TYPE, ISA_EVENT_TYPE);
    if (in_array($node->type, $node_type) && !empty($node->og_groups)) {
      //don't send an email for topic in 'mailing list' forum
      if ($node->type != ISA_TOPIC_TYPE || !isset($node->taxonomy[variable_get('isa_ml_forum_tid', ISA_ML_DEFAULT_FORUM_TID)])) {
          $list_facilitators = isa_toolbox_get_users_by_og_roles(array_shift(array_keys($node->og_groups)), variable_get("facilitator_rid", NULL));
        $resul_mail = NULL;
        //remove the author from the facilitators list
        unset($list_facilitators[$user->uid]);
        $type = $node->type;
        $params['message'] = "";
        $params['node'] = $node;
        $params['subject'] = variable_get("community_create_{$type}_to_facilitators_mail_title", "title...");
        foreach ($list_facilitators as $uid => $facilitator) {
          $resul_mail = drupal_mail('isa_content_mail', "community_create_{$type}_to_facilitators", $facilitator->mail, NULL, $params, $from, TRUE);
        }
        if ($resul_mail != NULL) {
          drupal_set_message(t('A notification has been sent to facilitators'));
        }
      }
    }
    //////////////
    //  DELETE  //
    //////////////
  }
  elseif ($op == 'delete') {
    $node_type = array(ISA_TOPIC_TYPE);
    if (in_array($node->type, $node_type) && !empty($node->og_groups)) {
      $message = 'A notification has been sent to facilitators';
      $list_facilitators = isa_toolbox_get_users_by_og_roles(array_shift(array_keys($node->og_groups)), variable_get("facilitator_rid", NULL));
      //add the author to the recipients list
      if(!array_key_exists($node->uid,$list_facilitators)){
         $list_facilitators[$node->uid]->mail = isa_toolbox_get_mail_address_from_user($node->uid);
         $list_facilitators[$node->uid]->uid = $node->uid;
         $message .= ' and author';
      }
      if($user->uid == $node->uid && isset($list_facilitators[$user->uid])){
          unset($list_facilitators[$user->uid]);
      }
      
      $type = $node->type;
      $params['message'] = "";
      $params['node'] = $node;
      $params['subject'] = variable_get("community_delete_{$type}_to_facilitators_mail_title", "title...");
      foreach ($list_facilitators as $uid => $facilitator) {
        $resul_mail = drupal_mail('isa_content_mail', "community_delete_{$type}_to_facilitators", $facilitator->mail, NULL, $params, $from, TRUE);
      }   
      if ($resul_mail != NULL) {
        drupal_set_message(t($message));
      }
    }
  }
}

/**
 * Implement hook_menu().
 */
function isa_content_mail_menu() {
  $items['admin/isa/mail/og_node_template_messages'] = array(
      'title' => 'OG content creation/deletion',
      'description' => t('Change the node creation/deletion template messages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('isa_content_mail_og_mail_template_message'),
      'access arguments' => array('administer ISA mails'),
      'type' => MENU_LOCAL_TASK,
  );

  $items['admin/isa/mail/content_template_messages'] = array(
      'title' => 'Content creation/deletion',
      'description' => t('Change the creation content/deletion template messages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('isa_content_mail_template_message'),
      'access arguments' => array('administer ISA mails'),
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 *
 * @return type 
 */
function isa_content_mail_og_mail_template_message() {
  $form_fields = array(
      array(
          'name' => 'community_create_wiki_to_facilitators',
          'title_title' => t('User create new wiki title'),
          'title_body' => t('User create new wiki body'),
          'description_title' => t('The subject of the message sent to facilitators when a user creates a new wiki in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user creates a new wiki in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user creates new wiki in the group')
      ),
      array(
          'name' => 'community_create_topic_to_facilitators',
          'title_title' => t('User create new topic title'),
          'title_body' => t('User create new topic body'),
          'description_title' => t('The subject of the message sent to facilitators when a user creates a new topic in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user creates a new topic in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user creates new topic in the group')
      ),
      array(
          'name' => 'community_create_news_to_facilitators',
          'title_title' => t('User create news title'),
          'title_body' => t('User create news body'),
          'description_title' => t('The subject of the message sent to facilitators when a user creates a news in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user creates a news in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user creates news in the group')
      ),
      array(
          'name' => 'community_create_document_to_facilitators',
          'title_title' => t('User create new document title'),
          'title_body' => t('User create new document body'),
          'description_title' => t('The subject of the message sent to facilitators when a user creates a new document in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user creates a new document in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user creates new document in the group')
      ),
      array(
          'name' => 'community_delete_topic_to_facilitators',
          'title_title' => t('User delete topic title'),
          'title_body' => t('User delete topic body'),
          'description_title' => t('The subject of the message sent to facilitators when a user delete a topic in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user delete a topic in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user delete a topic in the group')
      ),
            array(
          'name' => 'community_delete_topic_to_facilitators',
          'title_title' => t('User delete topic title'),
          'title_body' => t('User delete topic body'),
          'description_title' => t('The subject of the message sent to facilitators when a user delete a topic in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user delete a topic in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user delete a topic in the group')
      ),
      array(
          'name' => 'community_create_event_to_facilitators',
          'title_title' => t('User create new event title'),
          'title_body' => t('User create new event body'),
          'description_title' => t('The subject of the message sent to facilitators when a user create a new event in the group.'),
          'description_body' => t('The body of the message sent to facilitators when a user create a new event in the group.'),
          'fieldset_title' => t('Mail for facilitators when a user create a new event in the group')
      ),
  );
  $form = isa_toolbox_get_form_template_message($form_fields, 'node');
  return system_settings_form($form);
}

/**
 * Page callback of the page for edit template messages for creation of contents
 * @return string the html page
 */
function isa_content_mail_template_message() {
  $form_fields = array(
      array(
          'name' => 'content_create_' . ISA_BLOG_TYPE . '_to_moderators',
          'title_title' => t('User create new blog mail title'),
          'title_body' => t('User create new blog mail body'),
          'description_title' => t('The subject of the message sent to moderators when a user creates a new blog post.'),
          'description_body' => t('The body of the message sent to moderators when a user creates a new blog post.'),
          'fieldset_title' => t('Mail for moderators when a user creates new blog post')
      ),
      array(
          'name' => 'content_create_comment_to_moderators',
          'title_title' => t('User post new comment mail title'),
          'title_body' => t('User post new comment mail body'),
          'description_title' => t('The subject of the message sent to moderators when a user post new comment.'),
          'description_body' => t('The body of the message sent to moderators when a user post new comment'),
          'fieldset_title' => t('Mail for moderators when a user post new comment')
      ),
  );
  $form = isa_toolbox_get_form_template_message($form_fields, array('node', 'comment'));
  return system_settings_form($form);
}

/**
 * Implement of hook_mail().
 */
function isa_content_mail_mail($key, &$message, $params) {
  if ($key == 'content_create_comment_to_moderators') {
    $comment = $params['comment'];
    
    $profile_node = content_profile_load('profile', $comment['uid']);
    $params['subject'] = token_replace($params['subject'], 'comment', $comment);
    $body_token_converted = token_replace(variable_get("{$key}_mail_body", "message..."), 'comment', $comment);

    $node = node_load($comment['nid']);
    if (isset ($node->og_groups) && !empty($node->og_groups)){
        $gid = array_shift($node->og_groups);
        $group = node_load($gid);
        $body_token_converted = token_replace($body_token_converted, 'node', $group);
        $params['subject'] = token_replace($params['subject'], 'node', $group);
      }else{
        $body_token_converted = token_replace($body_token_converted, 'node', NULL);
        $params['subject'] = token_replace($params['subject'], 'node', NULL);
      }
  }
  else {
    global $user;
    if (isset ($user->node_profile)){
      $profile_node = $user->node_profile;
    }
    else {
      $profile_node = content_profile_load('profile', $user->uid);
    }
    $node = $params['node'];
    $params['subject'] = token_replace($params['subject'], 'node', $node);
    $body_token_converted = token_replace(variable_get("{$key}_mail_body", "message..."), 'node', $node);
  }

  $body_token_converted = token_replace($body_token_converted, 'node', $profile_node);

  $message['subject'] = decode_entities($params['subject']);

  $message['body'] = "<html>\n" .
          "<head>\n" .
          "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n" .
          "</head>\n" .
          "<body>" . $body_token_converted . "</body>\n" .
          "</html>\n";
  $message['From'] = variable_get('site_mail', ini_get('sendmail_from'));
  $message['headers'] = array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8;',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
      'From' => variable_get('site_mail', ini_get('sendmail_from')),
  );
}



/**
 * implementat hook_token_list()
 */
function isa_content_mail_token_list($type = 'all') {
  if ($type == 'node') {
    $tokens['ISA custom']['comment_group_title_raw'] = t('The group title (posted in {group title})');
    $tokens['ISA custom']['comment_group_title'] = t('The group title linked ( in the {group title} {group type})');
  } elseif ($type == 'comment') {
    $tokens['ISA custom']['comment_teaser'] = t('The 150 first characteres of the comment');
  }
  return $tokens;
}

/**
 * Implement of hook_token_values()
 */
function isa_content_mail_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'node') {
    if ($object == NULL){
      $values ['comment_group_title_raw'] = 'posted';
      $values ['comment_group_title'] = '';
    }elseif (og_is_group_type($object->type)) {
      $group_type = isa_toolbox_get_node_type_name($object);
      $values ['comment_group_title_raw'] = 'posted in ' . $object->title . ' ' . $group_type;
      $values ['comment_group_title'] = 'in the ' . l($object->title, $object->path, array('absolute' => TRUE)) . ' ' . $group_type;
    }
  } elseif ($type == 'comment') {
     $teaser = substr($object['comment'], 0, 150);
     $values ['comment_teaser'] = strip_tags($teaser);
  }
  return $values;
}
